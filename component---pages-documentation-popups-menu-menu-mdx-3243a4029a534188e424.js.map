{"version":3,"sources":["webpack:///../Pages/Documentation/Popups/Menu/index.tsx","webpack:///../Pages/Documentation/Popups/Menu/Menu.mdx"],"names":["placement","MenuPage","map","i","k","key","paperProps","p","bgColor","color","content","Array","Math","floor","random","fill","k2","Item","button","title","replace","toUpperCase","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Menu","isMDXComponent"],"mappings":"4RAKMA,EAAY,CAChB,YACA,aACA,eACA,SACA,WACA,aACA,OACA,YACA,cACA,QACA,UACA,MACA,OACA,aACA,YAGWC,EAAW,WACtB,OACE,uBACGD,EAAUE,KAAI,SAACC,EAAQC,GAAT,OACb,YAAC,IAAD,CACEJ,UAAWG,EACXE,IAAKD,EACLE,WAAY,CAAEC,EAAG,CAAC,EAAG,GAAIC,QAAS,QAASC,MAAO,SAClDC,QACE,YAAC,IAAD,KACGC,MAAM,EAAIC,KAAKC,MAAuB,IAAhBD,KAAKE,SAAkB,IAC3CC,KAAK,IACLb,KAAI,SAACC,EAAGa,GAAJ,OACH,YAAC,IAAKC,KAAN,CAAWZ,IAAKW,EAAIE,QAAM,EAACC,MAAK,cAAeH,EAAK,UAK5D,YAAC,IAAD,KAASb,EAAEiB,QAAQ,IAAK,KAAKC,mBAE7B,W,uNAKKpB,a,uNCxCR,IAAMqB,EAAe,Q,0NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,QADR,QAGA,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,WAAYC,SAAO,GACpDJ,QACAH,kBACAQ,eACAC,UACAC,QALoD,gBAMpDV,IANoD,EAOpDH,eAPoD,GAQnDO,QAAQ,cACb,YAACM,EAAD,CAAMN,QAAQ,gB,wNAehBH,EAAWU,gBAAiB","file":"component---pages-documentation-popups-menu-menu-mdx-3243a4029a534188e424.js","sourcesContent":["import React from \"react\";\n\nimport { List, Button, Text, IconButton, Popper } from \"@re-flex/ui/src\";\nimport { AiFillChrome, AiOutlineGift, AiFillFolderAdd } from \"react-icons/ai\";\n\nconst placement = [\n  \"top-start\",\n  \"bottom-end\",\n  \"bottom-start\",\n  \"bottom\",\n  \"left-end\",\n  \"left-start\",\n  \"left\",\n  \"right-end\",\n  \"right-start\",\n  \"right\",\n  \"top-end\",\n  \"top\",\n  \"auto\",\n  \"auto-start\",\n  \"auto-end\",\n];\n\nexport const MenuPage = () => {\n  return (\n    <div>\n      {placement.map((i: any, k) => (\n        <Popper\n          placement={i}\n          key={k}\n          paperProps={{ p: [4, 0], bgColor: \"white\", color: \"black\" }}\n          content={\n            <List>\n              {Array(2 + Math.floor((Math.random() * 999) % 6))\n                .fill(\"\")\n                .map((i, k2) => (\n                  <List.Item key={k2} button title={`Menu Item ${k2 + 1}`} />\n                ))}\n            </List>\n          }\n        >\n          <Button>{i.replace(\"-\", \" \").toUpperCase()}</Button>\n        </Popper>\n      ))}{\" \"}\n    </div>\n  );\n};\n\nexport default MenuPage;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/devloops/Desktop/maple/maple-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from \"docz\";\nimport Menu from \"./index.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"menu\"\n    }}>{`Menu`}</h1>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={0} __code={'<Menu />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Menu,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Menu mdxType=\"Menu\" />\n    </Playground>\n    {\n      /* ## Using different kinds\n      <Playground>\n       <Alert kind=\"info\">Some message</Alert>\n       <Alert kind=\"positive\">Some message</Alert>\n       <Alert kind=\"negative\">Some message</Alert>\n       <Alert kind=\"warning\">Some message</Alert>\n      </Playground> */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}