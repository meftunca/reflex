(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{539:function(e,n){e.exports=function(e){this.firstName=function(n){if(void 0!==e.definitions.name.male_first_name&&void 0!==e.definitions.name.female_first_name){if("string"==typeof n&&("male"===n.toLowerCase()?n=0:"female"===n.toLowerCase()&&(n=1)),"number"!=typeof n){if(void 0!==e.definitions.name.first_name)return e.random.arrayElement(e.definitions.name.first_name);n=e.random.number(1)}return 0===n?e.random.arrayElement(e.definitions.name.male_first_name):e.random.arrayElement(e.definitions.name.female_first_name)}return e.random.arrayElement(e.definitions.name.first_name)},this.lastName=function(n){return void 0!==e.definitions.name.male_last_name&&void 0!==e.definitions.name.female_last_name?("number"!=typeof n&&(n=e.random.number(1)),0===n?e.random.arrayElement(e.locales[e.locale].name.male_last_name):e.random.arrayElement(e.locales[e.locale].name.female_last_name)):e.random.arrayElement(e.definitions.name.last_name)},this.findName=function(n,r,t){var a,o,i=e.random.number(8);switch("number"!=typeof t&&(t=e.random.number(1)),n=n||e.name.firstName(t),r=r||e.name.lastName(t),i){case 0:if(a=e.name.prefix(t))return a+" "+n+" "+r;case 1:if(o=e.name.suffix(t))return n+" "+r+" "+o}return n+" "+r},this.jobTitle=function(){return e.name.jobDescriptor()+" "+e.name.jobArea()+" "+e.name.jobType()},this.gender=function(){return e.random.arrayElement(e.definitions.name.gender)},this.prefix=function(n){return void 0!==e.definitions.name.male_prefix&&void 0!==e.definitions.name.female_prefix?("number"!=typeof n&&(n=e.random.number(1)),0===n?e.random.arrayElement(e.locales[e.locale].name.male_prefix):e.random.arrayElement(e.locales[e.locale].name.female_prefix)):e.random.arrayElement(e.definitions.name.prefix)},this.suffix=function(){return e.random.arrayElement(e.definitions.name.suffix)},this.title=function(){return e.random.arrayElement(e.definitions.name.title.descriptor)+" "+e.random.arrayElement(e.definitions.name.title.level)+" "+e.random.arrayElement(e.definitions.name.title.job)},this.jobDescriptor=function(){return e.random.arrayElement(e.definitions.name.title.descriptor)},this.jobArea=function(){return e.random.arrayElement(e.definitions.name.title.level)},this.jobType=function(){return e.random.arrayElement(e.definitions.name.title.job)}}},549:function(e,n,r){"use strict";r.r(n),r.d(n,"default",(function(){return g}));var t=r(2),a=r.n(t),o=r(26),i=r(3),m=r(539),s=r.n(m);function f(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?f(Object(r),!0).forEach((function(n){c(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):f(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}var u=function(e){for(var n=[],r=0;r<e;r++)n.push(r);return n},d=function(){var e=Math.random();return{firstName:s.a.findName(),lastName:s.a.findName(),age:Math.floor(30*Math.random()),visits:Math.floor(100*Math.random()),progress:Math.floor(100*Math.random()),status:e>.66?"relationship":e>.33?"complicated":"single"}};var p=r(4);var b=function(){var e=a.a.useMemo((function(){return[{Header:"Name",columns:[{Header:"First Name",accessor:"firstName"},{Header:"Last Name",accessor:"lastName"}]},{Header:"Info",columns:[{Header:"Age",accessor:"age"},{Header:"Visits",accessor:"visits"},{Header:"Status",accessor:"status"},{Header:"Profile Progress",accessor:"progress"}]}]}),[]),n=a.a.useMemo((function(){return function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=n[r];return u(t).map((function(t){return l(l({},d()),{},{subRows:n[r+1]?e(r+1):void 0})}))}()}(2e3)}),[]);return Object(p.f)(i.Box,{bgColor:"paper",radius:4,shadow:1},Object(p.f)(i.Table,{columns:e,data:n}))};function y(){return(y=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e}).apply(this,arguments)}function v(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var O,h=(O="Props",function(e){return console.warn("Component "+O+" was not imported, exported, or provided by MDXProvider as global scope"),Object(o.b)("div",e)}),j={};function g(e){var n=e.components,r=v(e,["components"]);return Object(o.b)("wrapper",y({},j,r,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"table"},"Table"),Object(o.b)(b,{mdxType:"TableExample"}),Object(o.b)("h2",{id:"properties"},"Properties"),Object(o.b)(h,{of:i.Table,mdxType:"Props"}))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,