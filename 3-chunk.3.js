(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{537:function(e,t){e.exports=function(e){return this.fake=function t(r){if("string"!=typeof r||0===r.length)throw new Error("string parameter is required!");var n=r.search("{{"),a=r.search("}}");if(-1===n&&-1===a)return r;var i=r.substr(n+2,a-n-2),o=i.replace("}}","").replace("{{",""),s=/\(([^)]+)\)/,c=s.exec(o),l="";c&&(o=o.replace(s,""),l=c[1]);var p=o.split(".");if(void 0===e[p[0]])throw new Error("Invalid module: "+p[0]);if(void 0===e[p[0]][p[1]])throw new Error("Invalid method: "+p[0]+"."+p[1]);var u,m,d=e[p[0]][p[1]];try{u=JSON.parse(l)}catch(e){u=l}return m="string"==typeof u&&0===u.length?d.call(this):d.call(this,u),t(r.replace("{{"+i+"}}",m))},this}},551:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return g}));var n=r(2),a=r.n(n),i=r(25),o=r(3),s=r(45),c=r.n(s),l=r(537),p=r.n(l);const u=Array(5).fill("").map(((e,t)=>({leftItem:a.a.createElement(o.Box,{radius:30,p:0,overflow:"hidden",width:30,height:30},a.a.createElement("img",{alt:"",src:c.a.avatar()})),title:p()("{{name.lastName}} {{name.firstName}}"),description:p()("{{name.suffix}}"),key:t})));var m=()=>a.a.createElement(o.Box,{display:"flex"},a.a.createElement(o.Box,{m:[12,24],shadow:1,radius:12},a.a.createElement(o.List,null,u.map((e=>a.a.createElement(o.List.Item,Object.assign({button:!0},e)))))),a.a.createElement(o.Box,{m:[12,24],shadow:1,radius:12},a.a.createElement(o.List,null,u.map((e=>a.a.createElement(o.List.Item,Object.assign({button:!0},e,{rightItem:a.a.createElement(o.Button,{variant:"outlined",size:12},"Add")})))))));r(4);function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function b(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var f,h=(f="Props",function(e){return console.warn("Component "+f+" was not imported, exported, or provided by MDXProvider as global scope"),Object(i.b)("div",e)}),v={};function g(e){var t=e.components,r=b(e,["components"]);return Object(i.b)("wrapper",d({},v,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"list"},"List"),Object(i.b)("h2",{id:"basic-usage"},"Basic usage"),Object(i.b)(m,{mdxType:"ListSample"}),Object(i.b)("pre",null,Object(i.b)("code",d({parentName:"pre"},{className:"language-js",metastring:"live=true",live:"true"}),'<List>\n  <List.Item\n    button\n    title="List Item 1"\n    description="List Item Description"\n    rightItem={\n      <Button variant="outlined" size={12}>\n        Add\n      </Button>\n    }\n  />\n</List>\n')),Object(i.b)("h2",{id:"properties"},"Properties"),Object(i.b)(h,{of:o.List,mdxType:"Props"}))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,