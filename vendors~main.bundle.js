(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{13:function(e,n,t){"use strict";function r(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}t.d(n,"a",(function(){return r}))},14:function(e,n,t){"use strict";var r="Invariant failed";n.a=function(e,n){if(!e)throw new Error(r)}},16:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return _})),t.d(n,"c",(function(){return y}));var r=t(34),a=t.n(r),o=t(2),i=t.n(o),c=t(4),u=t(32),s=t(60),l=t.n(s),f=t(35),p=t.n(f);function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}var h=function(e,n){return"function"==typeof n?n(e):function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(t,!0).forEach((function(n){a()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(t).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({},e,{},n)},g=Object(u.a)((function(e){return Object(u.a)((function(n){return h(e,n)}))})),m=function(e){return Object(o.createElement)(c.d.Consumer,null,(function(n){return e.theme!==n&&(n=g(n)(e.theme)),Object(o.createElement)(c.d.Provider,{value:n},e.children)}))};function y(e){var n=e.displayName||e.name||"Component",t=Object(o.forwardRef)((function(n,t){return Object(o.createElement)(c.d.Consumer,null,(function(r){return Object(o.createElement)(e,l()({theme:r,ref:t},n))}))}));return t.displayName="WithTheme("+n+")",p()(t,e)}function _(){return i.a.useContext(c.d)}},17:function(e,n,t){"use strict";t.d(n,"a",(function(){return C})),t.d(n,"b",(function(){return j})),t.d(n,"d",(function(){return T})),t.d(n,"c",(function(){return g})),t.d(n,"f",(function(){return m})),t.d(n,"e",(function(){return h}));var r=t(9);function a(e){return"/"===e.charAt(0)}function o(e,n){for(var t=n,r=t+1,a=e.length;r<a;t+=1,r+=1)e[t]=e[r];e.pop()}var i=function(e,n){void 0===n&&(n="");var t,r=e&&e.split("/")||[],i=n&&n.split("/")||[],c=e&&a(e),u=n&&a(n),s=c||u;if(e&&a(e)?i=r:r.length&&(i.pop(),i=i.concat(r)),!i.length)return"/";if(i.length){var l=i[i.length-1];t="."===l||".."===l||""===l}else t=!1;for(var f=0,p=i.length;p>=0;p--){var d=i[p];"."===d?o(i,p):".."===d?(o(i,p),f++):f&&(o(i,p),f--)}if(!s)for(;f--;f)i.unshift("..");!s||""===i[0]||i[0]&&a(i[0])||i.unshift("");var h=i.join("/");return t&&"/"!==h.substr(-1)&&(h+="/"),h};function c(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var u=function e(n,t){if(n===t)return!0;if(null==n||null==t)return!1;if(Array.isArray(n))return Array.isArray(t)&&n.length===t.length&&n.every((function(n,r){return e(n,t[r])}));if("object"==typeof n||"object"==typeof t){var r=c(n),a=c(t);return r!==n||a!==t?e(r,a):Object.keys(Object.assign({},n,t)).every((function(r){return e(n[r],t[r])}))}return!1},s=t(14);function l(e){return"/"===e.charAt(0)?e:"/"+e}function f(e){return"/"===e.charAt(0)?e.substr(1):e}function p(e,n){return function(e,n){return 0===e.toLowerCase().indexOf(n.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(n.length))}(e,n)?e.substr(n.length):e}function d(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function h(e){var n=e.pathname,t=e.search,r=e.hash,a=n||"/";return t&&"?"!==t&&(a+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function g(e,n,t,a){var o;"string"==typeof e?(o=function(e){var n=e||"/",t="",r="",a=n.indexOf("#");-1!==a&&(r=n.substr(a),n=n.substr(0,a));var o=n.indexOf("?");return-1!==o&&(t=n.substr(o),n=n.substr(0,o)),{pathname:n,search:"?"===t?"":t,hash:"#"===r?"":r}}(e)).state=n:(void 0===(o=Object(r.a)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==n&&void 0===o.state&&(o.state=n));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return t&&(o.key=t),a?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=i(o.pathname,a.pathname)):o.pathname=a.pathname:o.pathname||(o.pathname="/"),o}function m(e,n){return e.pathname===n.pathname&&e.search===n.search&&e.hash===n.hash&&e.key===n.key&&u(e.state,n.state)}function y(){var e=null;var n=[];return{setPrompt:function(n){return e=n,function(){e===n&&(e=null)}},confirmTransitionTo:function(n,t,r,a){if(null!=e){var o="function"==typeof e?e(n,t):e;"string"==typeof o?"function"==typeof r?r(o,a):a(!0):a(!1!==o)}else a(!0)},appendListener:function(e){var t=!0;function r(){t&&e.apply(void 0,arguments)}return n.push(r),function(){t=!1,n=n.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];n.forEach((function(e){return e.apply(void 0,t)}))}}}var _=!("undefined"==typeof window||!window.document||!window.document.createElement);function v(e,n){n(window.confirm(e))}var b="popstate",w="hashchange";function S(){try{return window.history.state||{}}catch(e){return{}}}function C(e){void 0===e&&(e={}),_||Object(s.a)(!1);var n,t=window.history,a=(-1===(n=window.navigator.userAgent).indexOf("Android 2.")&&-1===n.indexOf("Android 4.0")||-1===n.indexOf("Mobile Safari")||-1!==n.indexOf("Chrome")||-1!==n.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,c=i.forceRefresh,u=void 0!==c&&c,f=i.getUserConfirmation,m=void 0===f?v:f,C=i.keyLength,k=void 0===C?6:C,O=e.basename?d(l(e.basename)):"";function P(e){var n=e||{},t=n.key,r=n.state,a=window.location,o=a.pathname+a.search+a.hash;return O&&(o=p(o,O)),g(o,r,t)}function x(){return Math.random().toString(36).substr(2,k)}var E=y();function j(e){Object(r.a)(K,e),K.length=t.length,E.notifyListeners(K.location,K.action)}function M(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||R(P(e.state))}function T(){R(P(S()))}var A=!1;function R(e){if(A)A=!1,j();else{E.confirmTransitionTo(e,"POP",m,(function(n){n?j({action:"POP",location:e}):function(e){var n=K.location,t=I.indexOf(n.key);-1===t&&(t=0);var r=I.indexOf(e.key);-1===r&&(r=0);var a=t-r;a&&(A=!0,B(a))}(e)}))}}var L=P(S()),I=[L.key];function D(e){return O+h(e)}function B(e){t.go(e)}var U=0;function N(e){1===(U+=e)&&1===e?(window.addEventListener(b,M),o&&window.addEventListener(w,T)):0===U&&(window.removeEventListener(b,M),o&&window.removeEventListener(w,T))}var H=!1;var K={length:t.length,action:"POP",location:L,createHref:D,push:function(e,n){var r="PUSH",o=g(e,n,x(),K.location);E.confirmTransitionTo(o,r,m,(function(e){if(e){var n=D(o),i=o.key,c=o.state;if(a)if(t.pushState({key:i,state:c},null,n),u)window.location.href=n;else{var s=I.indexOf(K.location.key),l=I.slice(0,s+1);l.push(o.key),I=l,j({action:r,location:o})}else window.location.href=n}}))},replace:function(e,n){var r="REPLACE",o=g(e,n,x(),K.location);E.confirmTransitionTo(o,r,m,(function(e){if(e){var n=D(o),i=o.key,c=o.state;if(a)if(t.replaceState({key:i,state:c},null,n),u)window.location.replace(n);else{var s=I.indexOf(K.location.key);-1!==s&&(I[s]=o.key),j({action:r,location:o})}else window.location.replace(n)}}))},go:B,goBack:function(){B(-1)},goForward:function(){B(1)},block:function(e){void 0===e&&(e=!1);var n=E.setPrompt(e);return H||(N(1),H=!0),function(){return H&&(H=!1,N(-1)),n()}},listen:function(e){var n=E.appendListener(e);return N(1),function(){N(-1),n()}}};return K}var k="hashchange",O={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+f(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:f,decodePath:l},slash:{encodePath:l,decodePath:l}};function P(e){var n=e.indexOf("#");return-1===n?e:e.slice(0,n)}function x(){var e=window.location.href,n=e.indexOf("#");return-1===n?"":e.substring(n+1)}function E(e){window.location.replace(P(window.location.href)+"#"+e)}function j(e){void 0===e&&(e={}),_||Object(s.a)(!1);var n=window.history,t=(window.navigator.userAgent.indexOf("Firefox"),e),a=t.getUserConfirmation,o=void 0===a?v:a,i=t.hashType,c=void 0===i?"slash":i,u=e.basename?d(l(e.basename)):"",f=O[c],m=f.encodePath,b=f.decodePath;function w(){var e=b(x());return u&&(e=p(e,u)),g(e)}var S=y();function C(e){Object(r.a)(H,e),H.length=n.length,S.notifyListeners(H.location,H.action)}var j=!1,M=null;function T(){var e,n,t=x(),r=m(t);if(t!==r)E(r);else{var a=w(),i=H.location;if(!j&&(n=a,(e=i).pathname===n.pathname&&e.search===n.search&&e.hash===n.hash))return;if(M===h(a))return;M=null,function(e){if(j)j=!1,C();else{var n="POP";S.confirmTransitionTo(e,n,o,(function(t){t?C({action:n,location:e}):function(e){var n=H.location,t=I.lastIndexOf(h(n));-1===t&&(t=0);var r=I.lastIndexOf(h(e));-1===r&&(r=0);var a=t-r;a&&(j=!0,D(a))}(e)}))}}(a)}}var A=x(),R=m(A);A!==R&&E(R);var L=w(),I=[h(L)];function D(e){n.go(e)}var B=0;function U(e){1===(B+=e)&&1===e?window.addEventListener(k,T):0===B&&window.removeEventListener(k,T)}var N=!1;var H={length:n.length,action:"POP",location:L,createHref:function(e){var n=document.querySelector("base"),t="";return n&&n.getAttribute("href")&&(t=P(window.location.href)),t+"#"+m(u+h(e))},push:function(e,n){var t="PUSH",r=g(e,void 0,void 0,H.location);S.confirmTransitionTo(r,t,o,(function(e){if(e){var n=h(r),a=m(u+n);if(x()!==a){M=n,function(e){window.location.hash=e}(a);var o=I.lastIndexOf(h(H.location)),i=I.slice(0,o+1);i.push(n),I=i,C({action:t,location:r})}else C()}}))},replace:function(e,n){var t="REPLACE",r=g(e,void 0,void 0,H.location);S.confirmTransitionTo(r,t,o,(function(e){if(e){var n=h(r),a=m(u+n);x()!==a&&(M=n,E(a));var o=I.indexOf(h(H.location));-1!==o&&(I[o]=n),C({action:t,location:r})}}))},go:D,goBack:function(){D(-1)},goForward:function(){D(1)},block:function(e){void 0===e&&(e=!1);var n=S.setPrompt(e);return N||(U(1),N=!0),function(){return N&&(N=!1,U(-1)),n()}},listen:function(e){var n=S.appendListener(e);return U(1),function(){U(-1),n()}}};return H}function M(e,n,t){return Math.min(Math.max(e,n),t)}function T(e){void 0===e&&(e={});var n=e,t=n.getUserConfirmation,a=n.initialEntries,o=void 0===a?["/"]:a,i=n.initialIndex,c=void 0===i?0:i,u=n.keyLength,s=void 0===u?6:u,l=y();function f(e){Object(r.a)(b,e),b.length=b.entries.length,l.notifyListeners(b.location,b.action)}function p(){return Math.random().toString(36).substr(2,s)}var d=M(c,0,o.length-1),m=o.map((function(e){return g(e,void 0,"string"==typeof e?p():e.key||p())})),_=h;function v(e){var n=M(b.index+e,0,b.entries.length-1),r=b.entries[n];l.confirmTransitionTo(r,"POP",t,(function(e){e?f({action:"POP",location:r,index:n}):f()}))}var b={length:m.length,action:"POP",location:m[d],index:d,entries:m,createHref:_,push:function(e,n){var r="PUSH",a=g(e,n,p(),b.location);l.confirmTransitionTo(a,r,t,(function(e){if(e){var n=b.index+1,t=b.entries.slice(0);t.length>n?t.splice(n,t.length-n,a):t.push(a),f({action:r,location:a,index:n,entries:t})}}))},replace:function(e,n){var r="REPLACE",a=g(e,n,p(),b.location);l.confirmTransitionTo(a,r,t,(function(e){e&&(b.entries[b.index]=a,f({action:r,location:a}))}))},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(e){var n=b.index+e;return n>=0&&n<b.entries.length},block:function(e){return void 0===e&&(e=!1),l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return b}},2:function(e,n,t){"use strict";e.exports=t(74)},20:function(e,n){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(e){"object"==typeof window&&(t=window)}e.exports=t},21:function(e,n,t){e.exports=t(83)()},22:function(e,n,t){"use strict";function r(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}t.d(n,"a",(function(){return r}))},23:function(e,n,t){"use strict";t.d(n,"d",(function(){return M})),t.d(n,"a",(function(){return T})),t.d(n,"b",(function(){return A})),t.d(n,"c",(function(){return R}));var r=t(2),a=t.n(r),o=(t(21),t(62)),i=t.n(o),c=t(19),u=t(25),s=t(63),l=t.n(s),f=t(64),p=t(68),d=t.n(p),h={plain:{color:"#C5C8C6",backgroundColor:"#1D1F21"},styles:[{types:["prolog","comment","doctype","cdata"],style:{color:"hsl(30, 20%, 50%)"}},{types:["property","tag","boolean","number","constant","symbol"],style:{color:"hsl(350, 40%, 70%)"}},{types:["attr-name","string","char","builtin","insterted"],style:{color:"hsl(75, 70%, 60%)"}},{types:["operator","entity","url","string","variable","language-css"],style:{color:"hsl(40, 90%, 60%)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["regex","important"],style:{color:"#e90"}},{types:["atrule","attr-value","keyword"],style:{color:"hsl(350, 40%, 70%)"}},{types:["punctuation","symbol"],style:{opacity:"0.7"}}]},g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m=function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")},y=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},_=function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)},v=function(e,n){var t={};for(var r in e)n.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},b=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n},w=function(e){function n(){var t,o;m(this,n);for(var i=arguments.length,s=Array(i),l=0;l<i;l++)s[l]=arguments[l];return t=o=b(this,e.call.apply(e,[this].concat(s))),o.state={code:""},o.updateContent=function(e){o.setState({code:e},(function(){o.props.onChange&&o.props.onChange(o.state.code)}))},o.highlightCode=function(e){return a.a.createElement(c.a,{Prism:u.a,code:e,theme:o.props.theme||h,language:o.props.language},(function(e){var n=e.tokens,t=e.getLineProps,o=e.getTokenProps;return a.a.createElement(r.Fragment,null,n.map((function(e,n){return a.a.createElement("div",t({line:e,key:n}),e.map((function(e,n){return a.a.createElement("span",o({token:e,key:n}))})))})))}))},b(o,t)}return _(n,e),n.getDerivedStateFromProps=function(e,n){return e.code!==n.prevCodeProp?{code:e.code,prevCodeProp:e.code}:null},n.prototype.render=function(){var e=this.props,n=e.style,t=(e.code,e.onChange,e.language,e.theme),r=v(e,["style","code","onChange","language","theme"]),o=this.state.code,c=t&&"object"===g(t.plain)?t.plain:{};return a.a.createElement(i.a,y({value:o,padding:10,highlight:this.highlightCode,onValueChange:this.updateContent,style:y({whiteSpace:"pre",fontFamily:"monospace"},c,n)},r))},n}(r.Component),S=l()({}),C={assign:d.a},k={objectAssign:"_poly.assign",transforms:{dangerousForOf:!0,dangerousTaggedTemplateString:!0}},O=function(e){return Object(f.a)(e,k).code},P=function(e,n){return function(t){function r(){return m(this,r),b(this,t.apply(this,arguments))}return _(r,t),r.prototype.componentDidCatch=function(e){n(e)},r.prototype.render=function(){return"function"==typeof e?a.a.createElement(e,null):e},r}(r.Component)},x=function(e,n){var t=Object.keys(n),r=t.map((function(e){return n[e]}));return(new(Function.prototype.bind.apply(Function,[null].concat(["_poly","React"],t,[e])))).apply(void 0,[C,a.a].concat(r))},E=function(e,n){var t=e.code,r=void 0===t?"":t,a=e.scope,o=void 0===a?{}:a,i=r.trim().replace(/;$/,""),c=O("return ("+i+")").trim();return P(x(c,o),n)},j=function(e,n,t){var r=e.code,a=void 0===r?"":r,o=e.scope,i=void 0===o?{}:o;if(!/render\s*\(/.test(a))return t(new SyntaxError("No-Inline evaluations must call `render`."));x(O(a),y({},i,{render:function(e){void 0===e?t(new SyntaxError("`render` must be called with valid JSX.")):n(P(e,t))}}))},M=function(e){function n(){var t,r;m(this,n);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return t=r=b(this,e.call.apply(e,[this].concat(o))),r.onChange=function(e){var n=r.props,t=n.scope,a=n.transformCode,o=n.noInline;r.transpile({code:e,scope:t,transformCode:a,noInline:o})},r.onError=function(e){r.setState({error:e.toString()})},r.transpile=function(e){var n=e.code,t=e.scope,a=e.transformCode,o=e.noInline,i=void 0!==o&&o,c={code:a?a(n):n,scope:t},u=function(e){return r.setState({element:void 0,error:e.toString()})},s=function(e){return r.setState(y({},l,{element:e}))},l={unsafeWrapperError:void 0,error:void 0};try{i?(r.setState(y({},l,{element:null})),j(c,s,u)):s(E(c,u))}catch(e){r.setState(y({},l,{error:e.toString()}))}},b(r,t)}return _(n,e),n.prototype.UNSAFE_componentWillMount=function(){var e=this.props,n=e.code,t=e.scope,r=e.transformCode,a=e.noInline;this.transpile({code:n,scope:t,transformCode:r,noInline:a})},n.prototype.componentDidUpdate=function(e){var n=e.code,t=e.scope,r=e.noInline,a=e.transformCode,o=this.props,i=o.code,c=o.scope,u=o.noInline,s=o.transformCode;i===n&&c===t&&u===r&&s===a||this.transpile({code:i,scope:c,transformCode:s,noInline:u})},n.prototype.render=function(){var e=this.props,n=e.children,t=e.code,r=e.language,o=e.theme,i=e.disabled;return a.a.createElement(S.Provider,{value:y({},this.state,{code:t,language:r,theme:o,disabled:i,onError:this.onError,onChange:this.onChange})},n)},n}(r.Component);function T(e){return a.a.createElement(S.Consumer,null,(function(n){var t=n.code,r=n.language,o=n.theme,i=n.disabled,c=n.onChange;return a.a.createElement(w,y({theme:o,code:t,language:r,disabled:i,onChange:c},e))}))}function A(e){return a.a.createElement(S.Consumer,null,(function(n){var t=n.error;return t?a.a.createElement("pre",e,t):null}))}function R(e){var n=e.Component,t=v(e,["Component"]);return a.a.createElement(n,t,a.a.createElement(S.Consumer,null,(function(e){var n=e.element;return n&&a.a.createElement(n,null)})))}M.defaultProps={code:"",noInline:!1,language:"jsx",disabled:!1},R.defaultProps={Component:"div"}},26:function(e,n,t){"use strict";t.d(n,"a",(function(){return f})),t.d(n,"b",(function(){return h}));var r=t(2),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),l=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},f=function(e){var n=l(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),f=l(t),d=r,h=f["".concat(i,".").concat(d)]||f[d]||p[d]||o;return t?a.a.createElement(h,c(c({ref:n},s),{},{components:t})):a.a.createElement(h,c({ref:n},s))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},27:function(e,n){var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)},28:function(e,n){var t=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=t)},29:function(e,n,t){e.exports=!t(40)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},34:function(e,n){e.exports=function(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}},35:function(e,n,t){"use strict";var r=t(47),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function u(e){return r.isMemo(e)?i:c[e.$$typeof]||a}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[r.Memo]=i;var s=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(n,t,r){if("string"!=typeof t){if(h){var a=d(t);a&&a!==h&&e(n,a,r)}var i=l(t);f&&(i=i.concat(f(t)));for(var c=u(n),g=u(t),m=0;m<i.length;++m){var y=i[m];if(!(o[y]||r&&r[y]||g&&g[y]||c&&c[y])){var _=p(t,y);try{s(n,y,_)}catch(e){}}}}return n}},37:function(e,n,t){"use strict";t.d(n,"a",(function(){return f})),t.d(n,"b",(function(){return l}));var r=t(24),a=t(11),o=t(12);function i(e,n){if(void 0===e.inserted[n.name])return e.insert("",n,e.sheet,!0)}function c(e,n,t){var r=[],a=Object(o.a)(e,r,t);return r.length<2?t:a+n(r)}var u=function e(n){for(var t="",r=0;r<n.length;r++){var a=n[r];if(null!=a){var o=void 0;switch(typeof a){case"boolean":break;case"object":if(Array.isArray(a))o=e(a);else for(var i in o="",a)a[i]&&i&&(o&&(o+=" "),o+=i);break;default:o=a}o&&(t&&(t+=" "),t+=o)}}return t},s=function(e){var n=Object(r.a)(e);n.sheet.speedy=function(e){this.isSpeedy=e},n.compat=!0;var t=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var i=Object(a.a)(t,n.registered,void 0);return Object(o.b)(n,i,!1),n.key+"-"+i.name};return{css:t,cx:function(){for(var e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return c(n.registered,t,u(r))},injectGlobal:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var o=Object(a.a)(t,n.registered);i(n,o)},keyframes:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var o=Object(a.a)(t,n.registered),c="animation-"+o.name;return i(n,{name:o.name,styles:"@keyframes "+c+"{"+o.styles+"}"}),c},hydrate:function(e){e.forEach((function(e){n.inserted[e]=!0}))},flush:function(){n.registered={},n.inserted={},n.sheet.flush()},sheet:n.sheet,cache:n,getRegisteredStyles:o.a.bind(null,n.registered),merge:c.bind(null,n.registered,t)}}(),l=(s.flush,s.hydrate,s.cx,s.merge,s.getRegisteredStyles,s.injectGlobal),f=(s.keyframes,s.css);s.sheet,s.cache},39:function(e,n){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},40:function(e,n){e.exports=function(e){try{return!!e()}catch(e){return!0}}},41:function(e,n,t){"use strict";t.d(n,"a",(function(){return f}));var r=t(8),a=t(13),o=t(2),i=t.n(o),c=t(17),u=(t(21),t(9)),s=t(22),l=t(14),f=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return(n=e.call.apply(e,[this].concat(r))||this).history=Object(c.a)(n.props),n}return Object(a.a)(n,e),n.prototype.render=function(){return i.a.createElement(r.b,{history:this.history,children:this.props.children})},n}(i.a.Component);i.a.Component;var p=function(e,n){return"function"==typeof e?e(n):e},d=function(e,n){return"string"==typeof e?Object(c.c)(e,null,null,n):e},h=function(e){return e},g=i.a.forwardRef;void 0===g&&(g=h);var m=g((function(e,n){var t=e.innerRef,r=e.navigate,a=e.onClick,o=Object(s.a)(e,["innerRef","navigate","onClick"]),c=o.target,l=Object(u.a)({},o,{onClick:function(e){try{a&&a(e)}catch(n){throw e.preventDefault(),n}e.defaultPrevented||0!==e.button||c&&"_self"!==c||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return l.ref=h!==g&&n||t,i.a.createElement("a",l)}));var y=g((function(e,n){var t=e.component,a=void 0===t?m:t,o=e.replace,c=e.to,f=e.innerRef,y=Object(s.a)(e,["component","replace","to","innerRef"]);return i.a.createElement(r.c.Consumer,null,(function(e){e||Object(l.a)(!1);var t=e.history,r=d(p(c,e.location),e.location),s=r?t.createHref(r):"",m=Object(u.a)({},y,{href:s,navigate:function(){var n=p(c,e.location);(o?t.replace:t.push)(n)}});return h!==g?m.ref=n||f:m.innerRef=f,i.a.createElement(a,m)}))})),_=function(e){return e},v=i.a.forwardRef;void 0===v&&(v=_);v((function(e,n){var t=e["aria-current"],a=void 0===t?"page":t,o=e.activeClassName,c=void 0===o?"active":o,f=e.activeStyle,h=e.className,g=e.exact,m=e.isActive,b=e.location,w=e.sensitive,S=e.strict,C=e.style,k=e.to,O=e.innerRef,P=Object(s.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return i.a.createElement(r.c.Consumer,null,(function(e){e||Object(l.a)(!1);var t=b||e.location,o=d(p(k,t),t),s=o.pathname,x=s&&s.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),E=x?Object(r.d)(t.pathname,{path:x,exact:g,sensitive:w,strict:S}):null,j=!!(m?m(E,t):E),M=j?function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return n.filter((function(e){return e})).join(" ")}(h,c):h,T=j?Object(u.a)({},C,{},f):C,A=Object(u.a)({"aria-current":j&&a||null,className:M,style:T,to:o},P);return _!==v?A.ref=n||O:A.innerRef=O,i.a.createElement(y,A)}))}))},43:function(e,n,t){"use strict";(function(e){var r=t(2),a=t.n(r),o=t(13),i=t(21),c=t.n(i),u=1073741823,s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function l(e){var n=[];return{on:function(e){n.push(e)},off:function(e){n=n.filter((function(n){return n!==e}))},get:function(){return e},set:function(t,r){e=t,n.forEach((function(n){return n(e,r)}))}}}var f=a.a.createContext||function(e,n){var t,a,i,f="__create-react-context-"+((s[i="__global_unique_id__"]=(s[i]||0)+1)+"__"),p=function(e){function t(){var n;return(n=e.apply(this,arguments)||this).emitter=l(n.props.value),n}Object(o.a)(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[f]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,a=e.value;((o=r)===(i=a)?0!==o||1/o==1/i:o!=o&&i!=i)?t=0:(t="function"==typeof n?n(r,a):u,0!==(t|=0)&&this.emitter.set(e.value,t))}var o,i},r.render=function(){return this.props.children},t}(r.Component);p.childContextTypes=((t={})[f]=c.a.object.isRequired,t);var d=function(n){function t(){var e;return(e=n.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(n,t){0!=((0|e.observedBits)&t)&&e.setState({value:e.getValue()})},e}Object(o.a)(t,n);var r=t.prototype;return r.componentWillReceiveProps=function(e){var n=e.observedBits;this.observedBits=null==n?u:n},r.componentDidMount=function(){this.context[f]&&this.context[f].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?u:e},r.componentWillUnmount=function(){this.context[f]&&this.context[f].off(this.onUpdate)},r.getValue=function(){return this.context[f]?this.context[f].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},t}(r.Component);return d.contextTypes=((a={})[f]=c.a.object,a),{Provider:p,Consumer:d}};n.a=f}).call(this,t(20))},45:function(e,n,t){e.exports=function(e){var n=this,r=t(80),a=t(81),o=t(82);n.image=function(t,r,a){return n[e.random.arrayElement(["abstract","animals","business","cats","city","food","nightlife","fashion","people","nature","sports","technics","transport"])](t,r,a)},n.avatar=function(){return e.internet.avatar()},n.imageUrl=function(n,t,r,a,o){var i="http://";void 0!==o&&!0===o&&(i="https://");var c=i+"placeimg.com/"+(n=n||640)+"/"+(t=t||480);return void 0!==r&&(c+="/"+r),a&&(c+="?"+e.random.number()),c},n.abstract=function(n,t,r){return e.image.imageUrl(n,t,"abstract",r)},n.animals=function(n,t,r){return e.image.imageUrl(n,t,"animals",r)},n.business=function(n,t,r){return e.image.imageUrl(n,t,"business",r)},n.cats=function(n,t,r){return e.image.imageUrl(n,t,"cats",r)},n.city=function(n,t,r){return e.image.imageUrl(n,t,"city",r)},n.food=function(n,t,r){return e.image.imageUrl(n,t,"food",r)},n.nightlife=function(n,t,r){return e.image.imageUrl(n,t,"nightlife",r)},n.fashion=function(n,t,r){return e.image.imageUrl(n,t,"fashion",r)},n.people=function(n,t,r){return e.image.imageUrl(n,t,"people",r)},n.nature=function(n,t,r){return e.image.imageUrl(n,t,"nature",r)},n.sports=function(n,t,r){return e.image.imageUrl(n,t,"sports",r)},n.technics=function(n,t,r){return e.image.imageUrl(n,t,"technics",r)},n.transport=function(n,t,r){return e.image.imageUrl(n,t,"transport",r)},n.dataUri=function(e,n,t){t=t||"grey";return"data:image/svg+xml;charset=UTF-8,"+encodeURIComponent('<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full" width="'+e+'" height="'+n+'"><rect width="100%" height="100%" fill="'+t+'"/><text x="'+e/2+'" y="'+n/2+'" font-size="20" alignment-baseline="middle" text-anchor="middle" fill="white">'+e+"x"+n+"</text></svg>")},n.lorempixel=new r(e),n.unsplash=new a(e),n.lorempicsum=new o(e)}},46:function(e,n,t){"use strict";var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var n={},t=0;t<10;t++)n["_"+String.fromCharCode(t)]=t;if("0123456789"!==Object.getOwnPropertyNames(n).map((function(e){return n[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,n){for(var t,c,u=i(e),s=1;s<arguments.length;s++){for(var l in t=Object(arguments[s]))a.call(t,l)&&(u[l]=t[l]);if(r){c=r(t);for(var f=0;f<c.length;f++)o.call(t,c[f])&&(u[c[f]]=t[c[f]])}}return u}},47:function(e,n,t){"use strict";e.exports=t(78)},48:function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},49:function(e,n,t){var r=t(510),a=t(515);e.exports=t(29)?function(e,n,t){return r.f(e,n,a(1,t))}:function(e,n,t){return e[n]=t,e}},50:function(e,n){var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},505:function(e,n,t){"use strict";n.byteLength=function(e){var n=s(e),t=n[0],r=n[1];return 3*(t+r)/4-r},n.toByteArray=function(e){var n,t,r=s(e),i=r[0],c=r[1],u=new o(function(e,n,t){return 3*(n+t)/4-t}(0,i,c)),l=0,f=c>0?i-4:i;for(t=0;t<f;t+=4)n=a[e.charCodeAt(t)]<<18|a[e.charCodeAt(t+1)]<<12|a[e.charCodeAt(t+2)]<<6|a[e.charCodeAt(t+3)],u[l++]=n>>16&255,u[l++]=n>>8&255,u[l++]=255&n;2===c&&(n=a[e.charCodeAt(t)]<<2|a[e.charCodeAt(t+1)]>>4,u[l++]=255&n);1===c&&(n=a[e.charCodeAt(t)]<<10|a[e.charCodeAt(t+1)]<<4|a[e.charCodeAt(t+2)]>>2,u[l++]=n>>8&255,u[l++]=255&n);return u},n.fromByteArray=function(e){for(var n,t=e.length,a=t%3,o=[],i=16383,c=0,u=t-a;c<u;c+=i)o.push(l(e,c,c+i>u?u:c+i));1===a?(n=e[t-1],o.push(r[n>>2]+r[n<<4&63]+"==")):2===a&&(n=(e[t-2]<<8)+e[t-1],o.push(r[n>>10]+r[n>>4&63]+r[n<<2&63]+"="));return o.join("")};for(var r=[],a=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",c=0,u=i.length;c<u;++c)r[c]=i[c],a[i.charCodeAt(c)]=c;function s(e){var n=e.length;if(n%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var t=e.indexOf("=");return-1===t&&(t=n),[t,t===n?0:4-t%4]}function l(e,n,t){for(var a,o,i=[],c=n;c<t;c+=3)a=(e[c]<<16&16711680)+(e[c+1]<<8&65280)+(255&e[c+2]),i.push(r[(o=a)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return i.join("")}a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63},506:function(e,n){n.read=function(e,n,t,r,a){var o,i,c=8*a-r-1,u=(1<<c)-1,s=u>>1,l=-7,f=t?a-1:0,p=t?-1:1,d=e[n+f];for(f+=p,o=d&(1<<-l)-1,d>>=-l,l+=c;l>0;o=256*o+e[n+f],f+=p,l-=8);for(i=o&(1<<-l)-1,o>>=-l,l+=r;l>0;i=256*i+e[n+f],f+=p,l-=8);if(0===o)o=1-s;else{if(o===u)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,r),o-=s}return(d?-1:1)*i*Math.pow(2,o-r)},n.write=function(e,n,t,r,a,o){var i,c,u,s=8*o-a-1,l=(1<<s)-1,f=l>>1,p=23===a?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,h=r?1:-1,g=n<0||0===n&&1/n<0?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(c=isNaN(n)?1:0,i=l):(i=Math.floor(Math.log(n)/Math.LN2),n*(u=Math.pow(2,-i))<1&&(i--,u*=2),(n+=i+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(i++,u/=2),i+f>=l?(c=0,i=l):i+f>=1?(c=(n*u-1)*Math.pow(2,a),i+=f):(c=n*Math.pow(2,f-1)*Math.pow(2,a),i=0));a>=8;e[t+d]=255&c,d+=h,c/=256,a-=8);for(i=i<<a|c,s+=a;s>0;e[t+d]=255&i,d+=h,i/=256,s-=8);e[t+d-h]|=128*g}},507:function(e,n){var t={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==t.call(e)}},508:function(e,n,t){var r=t(509);r(r.S+r.F,"Object",{assign:t(521)})},509:function(e,n,t){var r=t(27),a=t(28),o=t(49),i=t(516),c=t(519),u=function(e,n,t){var s,l,f,p,d=e&u.F,h=e&u.G,g=e&u.S,m=e&u.P,y=e&u.B,_=h?r:g?r[n]||(r[n]={}):(r[n]||{}).prototype,v=h?a:a[n]||(a[n]={}),b=v.prototype||(v.prototype={});for(s in h&&(t=n),t)f=((l=!d&&_&&void 0!==_[s])?_:t)[s],p=y&&l?c(f,r):m&&"function"==typeof f?c(Function.call,f):f,_&&i(_,s,f,e&u.U),v[s]!=f&&o(v,s,p),m&&b[s]!=f&&(b[s]=f)};r.core=a,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},51:function(e,n){var t=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++t+r).toString(36))}},510:function(e,n,t){var r=t(511),a=t(512),o=t(514),i=Object.defineProperty;n.f=t(29)?Object.defineProperty:function(e,n,t){if(r(e),n=o(n,!0),r(t),a)try{return i(e,n,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported!");return"value"in t&&(e[n]=t.value),e}},511:function(e,n,t){var r=t(39);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},512:function(e,n,t){e.exports=!t(29)&&!t(40)((function(){return 7!=Object.defineProperty(t(513)("div"),"a",{get:function(){return 7}}).a}))},513:function(e,n,t){var r=t(39),a=t(27).document,o=r(a)&&r(a.createElement);e.exports=function(e){return o?a.createElement(e):{}}},514:function(e,n,t){var r=t(39);e.exports=function(e,n){if(!r(e))return e;var t,a;if(n&&"function"==typeof(t=e.toString)&&!r(a=t.call(e)))return a;if("function"==typeof(t=e.valueOf)&&!r(a=t.call(e)))return a;if(!n&&"function"==typeof(t=e.toString)&&!r(a=t.call(e)))return a;throw TypeError("Can't convert object to primitive value")}},515:function(e,n){e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},516:function(e,n,t){var r=t(27),a=t(49),o=t(50),i=t(51)("src"),c=t(517),u="toString",s=(""+c).split(u);t(28).inspectSource=function(e){return c.call(e)},(e.exports=function(e,n,t,c){var u="function"==typeof t;u&&(o(t,"name")||a(t,"name",n)),e[n]!==t&&(u&&(o(t,i)||a(t,i,e[n]?""+e[n]:s.join(String(n)))),e===r?e[n]=t:c?e[n]?e[n]=t:a(e,n,t):(delete e[n],a(e,n,t)))})(Function.prototype,u,(function(){return"function"==typeof this&&this[i]||c.call(this)}))},517:function(e,n,t){e.exports=t(52)("native-function-to-string",Function.toString)},518:function(e,n){e.exports=!1},519:function(e,n,t){var r=t(520);e.exports=function(e,n,t){if(r(e),void 0===n)return e;switch(t){case 1:return function(t){return e.call(n,t)};case 2:return function(t,r){return e.call(n,t,r)};case 3:return function(t,r,a){return e.call(n,t,r,a)}}return function(){return e.apply(n,arguments)}}},52:function(e,n,t){var r=t(28),a=t(27),o="__core-js_shared__",i=a[o]||(a[o]={});(e.exports=function(e,n){return i[e]||(i[e]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:t(518)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},520:function(e,n){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},521:function(e,n,t){"use strict";var r=t(29),a=t(522),o=t(530),i=t(531),c=t(532),u=t(54),s=Object.assign;e.exports=!s||t(40)((function(){var e={},n={},t=Symbol(),r="abcdefghijklmnopqrst";return e[t]=7,r.split("").forEach((function(e){n[e]=e})),7!=s({},e)[t]||Object.keys(s({},n)).join("")!=r}))?function(e,n){for(var t=c(e),s=arguments.length,l=1,f=o.f,p=i.f;s>l;)for(var d,h=u(arguments[l++]),g=f?a(h).concat(f(h)):a(h),m=g.length,y=0;m>y;)d=g[y++],r&&!p.call(h,d)||(t[d]=h[d]);return t}:s},522:function(e,n,t){var r=t(523),a=t(529);e.exports=Object.keys||function(e){return r(e,a)}},523:function(e,n,t){var r=t(50),a=t(53),o=t(525)(!1),i=t(528)("IE_PROTO");e.exports=function(e,n){var t,c=a(e),u=0,s=[];for(t in c)t!=i&&r(c,t)&&s.push(t);for(;n.length>u;)r(c,t=n[u++])&&(~o(s,t)||s.push(t));return s}},524:function(e,n){var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},525:function(e,n,t){var r=t(53),a=t(526),o=t(527);e.exports=function(e){return function(n,t,i){var c,u=r(n),s=a(u.length),l=o(i,s);if(e&&t!=t){for(;s>l;)if((c=u[l++])!=c)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===t)return e||l||0;return!e&&-1}}},526:function(e,n,t){var r=t(56),a=Math.min;e.exports=function(e){return e>0?a(r(e),9007199254740991):0}},527:function(e,n,t){var r=t(56),a=Math.max,o=Math.min;e.exports=function(e,n){return(e=r(e))<0?a(e+n,0):o(e,n)}},528:function(e,n,t){var r=t(52)("keys"),a=t(51);e.exports=function(e){return r[e]||(r[e]=a(e))}},529:function(e,n){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},53:function(e,n,t){var r=t(54),a=t(55);e.exports=function(e){return r(a(e))}},530:function(e,n){n.f=Object.getOwnPropertySymbols},531:function(e,n){n.f={}.propertyIsEnumerable},532:function(e,n,t){var r=t(55);e.exports=function(e){return Object(r(e))}},54:function(e,n,t){var r=t(524);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},55:function(e,n){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},56:function(e,n){var t=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:t)(e)}},59:function(e,n){e.exports=function(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}},60:function(e,n){function t(){return e.exports=t=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},t.apply(this,arguments)}e.exports=t},62:function(e,n,t){"use strict";(function(e){Object.defineProperty(n,"__esModule",{value:!0});var r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),o=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}(t(2));function i(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function c(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var u=90,s=219,l=222,f=192,p=100,d=3e3,h="navigator"in e&&/Win/i.test(navigator.platform),g="navigator"in e&&/(Mac|iPhone|iPod|iPad)/i.test(navigator.platform),m="npm__react-simple-code-editor__textarea",y=function(e){function n(){var e,t,a;i(this,n);for(var o=arguments.length,m=Array(o),y=0;y<o;y++)m[y]=arguments[y];return t=a=c(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(m))),a.state={capture:!0},a._recordCurrentState=function(){var e=a._input;if(e){var n=e.value,t=e.selectionStart,r=e.selectionEnd;a._recordChange({value:n,selectionStart:t,selectionEnd:r})}},a._getLines=function(e,n){return e.substring(0,n).split("\n")},a._recordChange=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=a._history,o=t.stack,i=t.offset;if(o.length&&i>-1){a._history.stack=o.slice(0,i+1);var c=a._history.stack.length;if(c>p){var u=c-p;a._history.stack=o.slice(u,c),a._history.offset=Math.max(a._history.offset-u,0)}}var s=Date.now();if(n){var l=a._history.stack[a._history.offset];if(l&&s-l.timestamp<d){var f=/[^a-z0-9]([a-z0-9]+)$/i,h=a._getLines(l.value,l.selectionStart).pop().match(f),g=a._getLines(e.value,e.selectionStart).pop().match(f);if(h&&g&&g[1].startsWith(h[1]))return void(a._history.stack[a._history.offset]=r({},e,{timestamp:s}))}}a._history.stack.push(r({},e,{timestamp:s})),a._history.offset++},a._updateInput=function(e){var n=a._input;n&&(n.value=e.value,n.selectionStart=e.selectionStart,n.selectionEnd=e.selectionEnd,a.props.onValueChange(e.value))},a._applyEdits=function(e){var n=a._input,t=a._history.stack[a._history.offset];t&&n&&(a._history.stack[a._history.offset]=r({},t,{selectionStart:n.selectionStart,selectionEnd:n.selectionEnd})),a._recordChange(e),a._updateInput(e)},a._undoEdit=function(){var e=a._history,n=e.stack,t=e.offset,r=n[t-1];r&&(a._updateInput(r),a._history.offset=Math.max(t-1,0))},a._redoEdit=function(){var e=a._history,n=e.stack,t=e.offset,r=n[t+1];r&&(a._updateInput(r),a._history.offset=Math.min(t+1,n.length-1))},a._handleKeyDown=function(e){var n=a.props,t=n.tabSize,r=n.insertSpaces,o=n.ignoreTabKey,i=n.onKeyDown;if(!i||(i(e),!e.defaultPrevented)){27===e.keyCode&&e.target.blur();var c=e.target,p=c.value,d=c.selectionStart,m=c.selectionEnd,y=(r?" ":"\t").repeat(t);if(9===e.keyCode&&!o&&a.state.capture)if(e.preventDefault(),e.shiftKey){var _=a._getLines(p,d),v=_.length-1,b=a._getLines(p,m).length-1,w=p.split("\n").map((function(e,n){return n>=v&&n<=b&&e.startsWith(y)?e.substring(y.length):e})).join("\n");if(p!==w){var S=_[v];a._applyEdits({value:w,selectionStart:S.startsWith(y)?d-y.length:d,selectionEnd:m-(p.length-w.length)})}}else if(d!==m){var C=a._getLines(p,d),k=C.length-1,O=a._getLines(p,m).length-1,P=C[k];a._applyEdits({value:p.split("\n").map((function(e,n){return n>=k&&n<=O?y+e:e})).join("\n"),selectionStart:/\S/.test(P)?d+y.length:d,selectionEnd:m+y.length*(O-k+1)})}else{var x=d+y.length;a._applyEdits({value:p.substring(0,d)+y+p.substring(m),selectionStart:x,selectionEnd:x})}else if(8===e.keyCode){var E=d!==m;if(p.substring(0,d).endsWith(y)&&!E){e.preventDefault();var j=d-y.length;a._applyEdits({value:p.substring(0,d-y.length)+p.substring(m),selectionStart:j,selectionEnd:j})}}else if(13===e.keyCode){if(d===m){var M=a._getLines(p,d).pop().match(/^\s+/);if(M&&M[0]){e.preventDefault();var T="\n"+M[0],A=d+T.length;a._applyEdits({value:p.substring(0,d)+T+p.substring(m),selectionStart:A,selectionEnd:A})}}}else if(57===e.keyCode||e.keyCode===s||e.keyCode===l||e.keyCode===f){var R=void 0;57===e.keyCode&&e.shiftKey?R=["(",")"]:e.keyCode===s?R=e.shiftKey?["{","}"]:["[","]"]:e.keyCode===l?R=e.shiftKey?['"','"']:["'","'"]:e.keyCode!==f||e.shiftKey||(R=["`","`"]),d!==m&&R&&(e.preventDefault(),a._applyEdits({value:p.substring(0,d)+R[0]+p.substring(d,m)+R[1]+p.substring(m),selectionStart:d,selectionEnd:m+2}))}else!(g?e.metaKey&&e.keyCode===u:e.ctrlKey&&e.keyCode===u)||e.shiftKey||e.altKey?(g?e.metaKey&&e.keyCode===u&&e.shiftKey:h?e.ctrlKey&&89===e.keyCode:e.ctrlKey&&e.keyCode===u&&e.shiftKey)&&!e.altKey?(e.preventDefault(),a._redoEdit()):77!==e.keyCode||!e.ctrlKey||g&&!e.shiftKey||(e.preventDefault(),a.setState((function(e){return{capture:!e.capture}}))):(e.preventDefault(),a._undoEdit())}},a._handleChange=function(e){var n=e.target,t=n.value,r=n.selectionStart,o=n.selectionEnd;a._recordChange({value:t,selectionStart:r,selectionEnd:o},!0),a.props.onValueChange(t)},a._history={stack:[],offset:-1},c(a,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),a(n,[{key:"componentDidMount",value:function(){this._recordCurrentState()}},{key:"render",value:function(){var e=this,n=this.props,t=n.value,a=n.style,i=n.padding,c=n.highlight,u=n.textareaId,s=n.autoFocus,l=n.disabled,f=n.form,p=n.maxLength,d=n.minLength,h=n.name,g=n.placeholder,y=n.readOnly,v=n.required,b=n.onClick,w=n.onFocus,S=n.onBlur,C=n.onKeyUp,k=(n.onKeyDown,n.onValueChange,n.tabSize,n.insertSpaces,n.ignoreTabKey,function(e,n){var t={};for(var r in e)n.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}(n,["value","style","padding","highlight","textareaId","autoFocus","disabled","form","maxLength","minLength","name","placeholder","readOnly","required","onClick","onFocus","onBlur","onKeyUp","onKeyDown","onValueChange","tabSize","insertSpaces","ignoreTabKey"])),O={paddingTop:i,paddingRight:i,paddingBottom:i,paddingLeft:i},P=c(t);return o.createElement("div",r({},k,{style:r({},_.container,a)}),o.createElement("textarea",{ref:function(n){return e._input=n},style:r({},_.editor,_.textarea,O),className:m,id:u,value:t,onChange:this._handleChange,onKeyDown:this._handleKeyDown,onClick:b,onKeyUp:C,onFocus:w,onBlur:S,disabled:l,form:f,maxLength:p,minLength:d,name:h,placeholder:g,readOnly:y,required:v,autoFocus:s,autoCapitalize:"off",autoComplete:"off",autoCorrect:"off",spellCheck:!1,"data-gramm":!1}),o.createElement("pre",r({"aria-hidden":"true",style:r({},_.editor,_.highlight,O)},"string"==typeof P?{dangerouslySetInnerHTML:{__html:P+"<br />"}}:{children:P})),o.createElement("style",{type:"text/css",dangerouslySetInnerHTML:{__html:"\n/**\n * Reset the text fill color so that placeholder is visible\n */\n.npm__react-simple-code-editor__textarea:empty {\n  -webkit-text-fill-color: inherit !important;\n}\n\n/**\n * Hack to apply on some CSS on IE10 and IE11\n */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n    * IE doesn't support '-webkit-text-fill-color'\n    * So we use 'color: transparent' to make the text transparent on IE\n    * Unlike other browsers, it doesn't affect caret color in IE\n    */\n  .npm__react-simple-code-editor__textarea {\n    color: transparent !important;\n  }\n\n  .npm__react-simple-code-editor__textarea::selection {\n    background-color: #accef7 !important;\n    color: transparent !important;\n  }\n}\n"}}))}},{key:"session",get:function(){return{history:this._history}},set:function(e){this._history=e.history}}]),n}(o.Component);y.defaultProps={tabSize:2,insertSpaces:!0,ignoreTabKey:!1,padding:0},n.default=y;var _={container:{position:"relative",textAlign:"left",boxSizing:"border-box",padding:0,overflow:"hidden"},textarea:{position:"absolute",top:0,left:0,height:"100%",width:"100%",resize:"none",color:"inherit",overflow:"hidden",MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",WebkitTextFillColor:"transparent"},highlight:{position:"relative",pointerEvents:"none"},editor:{margin:0,border:0,background:"none",boxSizing:"inherit",display:"inherit",fontFamily:"inherit",fontSize:"inherit",fontStyle:"inherit",fontVariantLigatures:"inherit",fontWeight:"inherit",letterSpacing:"inherit",lineHeight:"inherit",tabSize:"inherit",textIndent:"inherit",textRendering:"inherit",textTransform:"inherit",whiteSpace:"pre-wrap",wordBreak:"keep-all",overflowWrap:"break-word"}}}).call(this,t(20))},63:function(e,n,t){"use strict";n.__esModule=!0;var r=o(t(2)),a=o(t(85));function o(e){return e&&e.__esModule?e:{default:e}}n.default=r.default.createContext||a.default,e.exports=n.default},65:function(e,n,t){"use strict";const r=t(89).generate,a=t(90).parse,o=t(1),i=t(91),c=t(94),u=t(96),s=t(97),l=o().addRange(0,1114111),f=(o().addRange(0,65535),l.clone().remove(10,13,8232,8233)),p=(e,n,t)=>n?t?s.UNICODE_IGNORE_CASE.get(e):s.UNICODE.get(e):s.REGULAR.get(e),d=(e,n)=>{const r=n?`${e}/${n}`:"Binary_Property/"+e;try{return t(98)(`./${r}.js`)}catch(t){throw new Error(`Failed to recognize value \`${n}\` for property \`${e}\`.`)}},h=(e,n)=>{const t=e.split("="),r=t[0];let a;if(1==t.length)a=(e=>{try{const n="General_Category",t=c(n,e);return d(n,t)}catch(e){}const n=i(e);return d(n)})(r);else{const e=i(r),n=c(e,t[1]);a=d(e,n)}return n?l.clone().remove(a):a.clone()};o.prototype.iuAddRange=function(e,n){const t=this;do{const n=y(e);n&&t.add(n)}while(++e<=n);return t};const g=(e,n)=>{let t=a(n,b.useUnicodeFlag?"u":"");switch(t.type){case"characterClass":case"group":case"value":break;default:t=m(t,n)}Object.assign(e,t)},m=(e,n)=>({type:"group",behavior:"ignore",body:[e],raw:`(?:${n})`}),y=e=>u.get(e)||!1,_=(e,n)=>{delete e.name,e.matchIndex=n},v=(e,n,t)=>{switch(e.type){case"dot":if(b.useDotAllFlag)break;b.unicode?g(e,(r=b.dotAll,r?l:f).toString(n)):b.dotAll&&g(e,"[\\s\\S]");break;case"characterClass":e=((e,n)=>{const t=o();for(const n of e.body)switch(n.type){case"value":if(t.add(n.codePoint),b.ignoreCase&&b.unicode&&!b.useUnicodeFlag){const e=y(n.codePoint);e&&t.add(e)}break;case"characterClassRange":const e=n.min.codePoint,r=n.max.codePoint;t.addRange(e,r),b.ignoreCase&&b.unicode&&!b.useUnicodeFlag&&t.iuAddRange(e,r);break;case"characterClassEscape":t.add(p(n.value,b.unicode,b.ignoreCase));break;case"unicodePropertyEscape":t.add(h(n.value,n.negative));break;default:throw new Error("Unknown term type: "+n.type)}return e.negative?g(e,`(?!${t.toString(n)})[\\s\\S]`):g(e,t.toString(n)),e})(e,n);break;case"unicodePropertyEscape":b.unicodePropertyEscape&&g(e,h(e.value,e.negative).toString(n));break;case"characterClassEscape":g(e,p(e.value,b.unicode,b.ignoreCase).toString(n));break;case"group":if("normal"==e.behavior&&t.lastIndex++,e.name&&b.namedGroup){const n=e.name.value;if(t.names[n])throw new Error(`Multiple groups with the same name (${n}) are not allowed.`);const r=t.lastIndex;delete e.name,t.names[n]=r,t.onNamedGroup&&t.onNamedGroup.call(null,n,r),t.unmatchedReferences[n]&&(t.unmatchedReferences[n].forEach((e=>{_(e,r)})),delete t.unmatchedReferences[n])}case"alternative":case"disjunction":case"quantifier":e.body=e.body.map((e=>v(e,n,t)));break;case"value":const a=e.codePoint,i=o(a);if(b.ignoreCase&&b.unicode&&!b.useUnicodeFlag){const e=y(a);e&&i.add(e)}g(e,i.toString(n));break;case"reference":if(e.name){const n=e.name.value,r=t.names[n];if(r){_(e,r);break}t.unmatchedReferences[n]||(t.unmatchedReferences[n]=[]),t.unmatchedReferences[n].push(e)}break;case"anchor":case"empty":case"group":break;default:throw new Error("Unknown term type: "+e.type)}var r;return e},b={ignoreCase:!1,unicode:!1,dotAll:!1,useDotAllFlag:!1,useUnicodeFlag:!1,unicodePropertyEscape:!1,namedGroup:!1};e.exports=(e,n,t)=>{b.unicode=n&&n.includes("u");const o={unicodePropertyEscape:b.unicode,namedGroups:!0,lookbehind:t&&t.lookbehind};b.ignoreCase=n&&n.includes("i");const i=t&&t.dotAllFlag;if(b.dotAll=i&&n&&n.includes("s"),b.namedGroup=t&&t.namedGroup,b.useDotAllFlag=t&&t.useDotAllFlag,b.useUnicodeFlag=t&&t.useUnicodeFlag,b.unicodePropertyEscape=t&&t.unicodePropertyEscape,i&&b.useDotAllFlag)throw new Error("`useDotAllFlag` and `dotAllFlag` cannot both be true!");const c={hasUnicodeFlag:b.useUnicodeFlag,bmpOnly:!b.unicode},u={onNamedGroup:t&&t.onNamedGroup,lastIndex:0,names:Object.create(null),unmatchedReferences:Object.create(null)},s=a(e,n,o);return v(s,c,u),(e=>{const n=Object.keys(e.unmatchedReferences);if(n.length>0)throw new Error("Unknown group names: "+n)})(u),r(s)}},67:function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));for(var r={},a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o=0;o<a.length;o++)r[a.charCodeAt(o)]=o;function i(e){for(var n=0,t=0,r=0,a=0,o="",i=0;i<e.length;i++){var u=e[i];if(i>0&&(o+=";"),0!==u.length){for(var s=0,l=[],f=0,p=u;f<p.length;f++){var d=p[f],h=c(d[0]-s);s=d[0],d.length>1&&(h+=c(d[1]-n)+c(d[2]-t)+c(d[3]-r),n=d[1],t=d[2],r=d[3]),5===d.length&&(h+=c(d[4]-a),a=d[4]),l.push(h)}o+=l.join(",")}}return o}function c(e){var n="";e=e<0?-e<<1|1:e<<1;do{var t=31&e;(e>>>=5)>0&&(t|=32),n+=a[t]}while(e>0);return n}},68:function(e,n,t){t(508),e.exports=t(28).Object.assign},7:function(e,n,t){"use strict";function r(e,n,t){return Math.min(Math.max(e,t),n)}t.d(n,"a",(function(){return _})),t.d(n,"b",(function(){return w})),t.d(n,"c",(function(){return C})),t.d(n,"d",(function(){return S}));class a extends Error{constructor(e){super(`Failed to parse color: "${e}"`)}}function o(e){if("string"!=typeof e)throw new a(e);if("transparent"===e.trim().toLowerCase())return[0,0,0,0];let n=e.trim();n=d.test(e)?function(e){const n=e.toLowerCase().trim(),t=c[function(e){let n=5381,t=e.length;for(;t;)n=33*n^e.charCodeAt(--t);return(n>>>0)%2341}(n)];if(!t)throw new a(e);return"#"+t}(e):e;const t=s.exec(n);if(t){const e=Array.from(t).slice(1);return[...e.slice(0,3).map((e=>parseInt(u(e,2),16))),parseInt(u(e[3]||"f",2),16)/255]}const o=l.exec(n);if(o){const e=Array.from(o).slice(1);return[...e.slice(0,3).map((e=>parseInt(e,16))),parseInt(e[3]||"ff",16)/255]}const i=f.exec(n);if(i){const e=Array.from(i).slice(1);return[...e.slice(0,3).map((e=>parseInt(e,10))),parseFloat(e[3]||"1")]}const h=p.exec(n);if(h){const[n,t,o,i]=Array.from(h).slice(1).map(parseFloat);if(r(0,100,t)!==t)throw new a(e);if(r(0,100,o)!==o)throw new a(e);return[...g(n,t,o),i||1]}throw new a(e)}const i=e=>parseInt(e.replace(/_/g,""),36),c="1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm".split(" ").reduce(((e,n)=>(e[i(n.substring(0,3))]=i(n.substring(3)).toString(16).padStart(6,"0"),e)),{});const u=(e,n)=>Array.from(Array(n)).map((()=>e)).join(""),s=new RegExp(`^#${u("([a-f0-9])",3)}([a-f0-9])?$`,"i"),l=new RegExp(`^#${u("([a-f0-9]{2})",3)}([a-f0-9]{2})?$`,"i"),f=new RegExp(`^rgba?\\(\\s*(\\d+)\\s*${u(",\\s*(\\d+)\\s*",2)}(?:,\\s*([\\d.]+))?\\s*\\)$`,"i"),p=/^hsla?\(\s*([\d.]+)\s*,\s*([\d.]+)%\s*,\s*([\d.]+)%(?:\s*,\s*([\d.]+))?\s*\)$/i,d=/^[a-z]+$/i,h=e=>Math.round(255*e),g=(e,n,t)=>{let r=t/100;if(0===n)return[r,r,r].map(h);const a=(e%360+360)%360/60,o=(1-Math.abs(2*r-1))*(n/100),i=o*(1-Math.abs(a%2-1));let c=0,u=0,s=0;a>=0&&a<1?(c=o,u=i):a>=1&&a<2?(c=i,u=o):a>=2&&a<3?(u=o,s=i):a>=3&&a<4?(u=i,s=o):a>=4&&a<5?(c=i,s=o):a>=5&&a<6&&(c=o,s=i);const l=r-o/2;return[c+l,u+l,s+l].map(h)};function m(e){const[n,t,r,a]=o(e).map(((e,n)=>3===n?e:e/255)),i=Math.max(n,t,r),c=Math.min(n,t,r),u=(i+c)/2;if(i===c)return[0,0,u,a];const s=i-c;return[60*(n===i?(t-r)/s+(t<r?6:0):t===i?(r-n)/s+2:(n-t)/s+4),u>.5?s/(2-i-c):s/(i+c),u,a]}function y(e,n,t,a){return`hsla(${(e%360).toFixed()}, ${r(0,100,100*n).toFixed()}%, ${r(0,100,100*t).toFixed()}%, ${parseFloat(r(0,1,a).toFixed(3))})`}function _(e,n){const[t,r,a,o]=m(e);return y(t,r,a-n,o)}function v(e){if("transparent"===e)return 0;function n(e){const n=e/255;return n<=.03928?n/12.92:((n+.055)/1.055)**2.4}const[t,r,a]=o(e);return.2126*n(t)+.7152*n(r)+.0722*n(a)}function b(e,n,t,a){return`rgba(${r(0,255,e).toFixed()}, ${r(0,255,n).toFixed()}, ${r(0,255,t).toFixed()}, ${parseFloat(r(0,1,a).toFixed(3))})`}function w(e,n){return _(e,-n)}function S(e,n){const[t,r,a,i]=o(e);return b(t,r,a,i-n)}function C(e){return v(e)>.179}},70:function(e,n,t){"use strict";const r=(e,{target:n=document.body}={})=>{const t=document.createElement("textarea"),r=document.activeElement;t.value=e,t.setAttribute("readonly",""),t.style.contain="strict",t.style.position="absolute",t.style.left="-9999px",t.style.fontSize="12pt";const a=document.getSelection();let o=!1;a.rangeCount>0&&(o=a.getRangeAt(0)),n.append(t),t.select(),t.selectionStart=0,t.selectionEnd=e.length;let i=!1;try{i=document.execCommand("copy")}catch(e){}return t.remove(),o&&(a.removeAllRanges(),a.addRange(o)),r&&r.focus(),i};e.exports=r,e.exports.default=r},74:function(e,n,t){"use strict";var r=t(46),a="function"==typeof Symbol&&Symbol.for,o=a?Symbol.for("react.element"):60103,i=a?Symbol.for("react.portal"):60106,c=a?Symbol.for("react.fragment"):60107,u=a?Symbol.for("react.strict_mode"):60108,s=a?Symbol.for("react.profiler"):60114,l=a?Symbol.for("react.provider"):60109,f=a?Symbol.for("react.context"):60110,p=a?Symbol.for("react.forward_ref"):60112,d=a?Symbol.for("react.suspense"):60113,h=a?Symbol.for("react.memo"):60115,g=a?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var _={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function b(e,n,t){this.props=e,this.context=n,this.refs=v,this.updater=t||_}function w(){}function S(e,n,t){this.props=e,this.context=n,this.refs=v,this.updater=t||_}b.prototype.isReactComponent={},b.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,n,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=b.prototype;var C=S.prototype=new w;C.constructor=S,r(C,b.prototype),C.isPureReactComponent=!0;var k={current:null},O=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function x(e,n,t){var r,a={},i=null,c=null;if(null!=n)for(r in void 0!==n.ref&&(c=n.ref),void 0!==n.key&&(i=""+n.key),n)O.call(n,r)&&!P.hasOwnProperty(r)&&(a[r]=n[r]);var u=arguments.length-2;if(1===u)a.children=t;else if(1<u){for(var s=Array(u),l=0;l<u;l++)s[l]=arguments[l+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:c,props:a,_owner:k.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var j=/\/+/g,M=[];function T(e,n,t,r){if(M.length){var a=M.pop();return a.result=e,a.keyPrefix=n,a.func=t,a.context=r,a.count=0,a}return{result:e,keyPrefix:n,func:t,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function R(e,n,t,r){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var c=!1;if(null===e)c=!0;else switch(a){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case o:case i:c=!0}}if(c)return t(r,e,""===n?"."+I(e,0):n),1;if(c=0,n=""===n?".":n+":",Array.isArray(e))for(var u=0;u<e.length;u++){var s=n+I(a=e[u],u);c+=R(a,s,t,r)}else if(null===e||"object"!=typeof e?s=null:s="function"==typeof(s=m&&e[m]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),u=0;!(a=e.next()).done;)c+=R(a=a.value,s=n+I(a,u++),t,r);else if("object"===a)throw t=""+e,Error(y(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t,""));return c}function L(e,n,t){return null==e?0:R(e,"",n,t)}function I(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return n[e]}))}(e.key):n.toString(36)}function D(e,n){e.func.call(e.context,n,e.count++)}function B(e,n,t){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,n,e.count++),Array.isArray(e)?U(e,r,t,(function(e){return e})):null!=e&&(E(e)&&(e=function(e,n){return{$$typeof:o,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||n&&n.key===e.key?"":(""+e.key).replace(j,"$&/")+"/")+t)),r.push(e))}function U(e,n,t,r,a){var o="";null!=t&&(o=(""+t).replace(j,"$&/")+"/"),L(e,B,n=T(n,o,r,a)),A(n)}var N={current:null};function H(){var e=N.current;if(null===e)throw Error(y(321));return e}var K={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r};n.Children={map:function(e,n,t){if(null==e)return e;var r=[];return U(e,r,null,n,t),r},forEach:function(e,n,t){if(null==e)return e;L(e,D,n=T(null,null,n,t)),A(n)},count:function(e){return L(e,(function(){return null}),null)},toArray:function(e){var n=[];return U(e,n,null,(function(e){return e})),n},only:function(e){if(!E(e))throw Error(y(143));return e}},n.Component=b,n.Fragment=c,n.Profiler=s,n.PureComponent=S,n.StrictMode=u,n.Suspense=d,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=K,n.cloneElement=function(e,n,t){if(null==e)throw Error(y(267,e));var a=r({},e.props),i=e.key,c=e.ref,u=e._owner;if(null!=n){if(void 0!==n.ref&&(c=n.ref,u=k.current),void 0!==n.key&&(i=""+n.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(l in n)O.call(n,l)&&!P.hasOwnProperty(l)&&(a[l]=void 0===n[l]&&void 0!==s?s[l]:n[l])}var l=arguments.length-2;if(1===l)a.children=t;else if(1<l){s=Array(l);for(var f=0;f<l;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:c,props:a,_owner:u}},n.createContext=function(e,n){return void 0===n&&(n=null),(e={$$typeof:f,_calculateChangedBits:n,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},n.createElement=x,n.createFactory=function(e){var n=x.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:p,render:e}},n.isValidElement=E,n.lazy=function(e){return{$$typeof:g,_ctor:e,_status:-1,_result:null}},n.memo=function(e,n){return{$$typeof:h,type:e,compare:void 0===n?null:n}},n.useCallback=function(e,n){return H().useCallback(e,n)},n.useContext=function(e,n){return H().useContext(e,n)},n.useDebugValue=function(){},n.useEffect=function(e,n){return H().useEffect(e,n)},n.useImperativeHandle=function(e,n,t){return H().useImperativeHandle(e,n,t)},n.useLayoutEffect=function(e,n){return H().useLayoutEffect(e,n)},n.useMemo=function(e,n){return H().useMemo(e,n)},n.useReducer=function(e,n,t){return H().useReducer(e,n,t)},n.useRef=function(e){return H().useRef(e)},n.useState=function(e){return H().useState(e)},n.version="16.13.1"},76:function(e,n,t){"use strict";e.exports=t(77)},77:function(e,n,t){"use strict";var r,a,o,i,c;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,s=null,l=function(){if(null!==u)try{var e=n.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(l,0),e}},f=Date.now();n.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(l,0))},a=function(e,n){s=setTimeout(e,n)},o=function(){clearTimeout(s)},i=function(){return!1},c=n.unstable_forceFrameRate=function(){}}else{var p=window.performance,d=window.Date,h=window.setTimeout,g=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof p&&"function"==typeof p.now)n.unstable_now=function(){return p.now()};else{var y=d.now();n.unstable_now=function(){return d.now()-y}}var _=!1,v=null,b=-1,w=5,S=0;i=function(){return n.unstable_now()>=S},c=function(){},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var C=new MessageChannel,k=C.port2;C.port1.onmessage=function(){if(null!==v){var e=n.unstable_now();S=e+w;try{v(!0,e)?k.postMessage(null):(_=!1,v=null)}catch(e){throw k.postMessage(null),e}}else _=!1},r=function(e){v=e,_||(_=!0,k.postMessage(null))},a=function(e,t){b=h((function(){e(n.unstable_now())}),t)},o=function(){g(b),b=-1}}function O(e,n){var t=e.length;e.push(n);e:for(;;){var r=t-1>>>1,a=e[r];if(!(void 0!==a&&0<E(a,n)))break e;e[r]=n,e[t]=a,t=r}}function P(e){return void 0===(e=e[0])?null:e}function x(e){var n=e[0];if(void 0!==n){var t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,i=e[o],c=o+1,u=e[c];if(void 0!==i&&0>E(i,t))void 0!==u&&0>E(u,i)?(e[r]=u,e[c]=t,r=c):(e[r]=i,e[o]=t,r=o);else{if(!(void 0!==u&&0>E(u,t)))break e;e[r]=u,e[c]=t,r=c}}}return n}return null}function E(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}var j=[],M=[],T=1,A=null,R=3,L=!1,I=!1,D=!1;function B(e){for(var n=P(M);null!==n;){if(null===n.callback)x(M);else{if(!(n.startTime<=e))break;x(M),n.sortIndex=n.expirationTime,O(j,n)}n=P(M)}}function U(e){if(D=!1,B(e),!I)if(null!==P(j))I=!0,r(N);else{var n=P(M);null!==n&&a(U,n.startTime-e)}}function N(e,t){I=!1,D&&(D=!1,o()),L=!0;var r=R;try{for(B(t),A=P(j);null!==A&&(!(A.expirationTime>t)||e&&!i());){var c=A.callback;if(null!==c){A.callback=null,R=A.priorityLevel;var u=c(A.expirationTime<=t);t=n.unstable_now(),"function"==typeof u?A.callback=u:A===P(j)&&x(j),B(t)}else x(j);A=P(j)}if(null!==A)var s=!0;else{var l=P(M);null!==l&&a(U,l.startTime-t),s=!1}return s}finally{A=null,R=r,L=!1}}function H(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var K=c;n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){I||L||(I=!0,r(N))},n.unstable_getCurrentPriorityLevel=function(){return R},n.unstable_getFirstCallbackNode=function(){return P(j)},n.unstable_next=function(e){switch(R){case 1:case 2:case 3:var n=3;break;default:n=R}var t=R;R=n;try{return e()}finally{R=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=K,n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=R;R=e;try{return n()}finally{R=t}},n.unstable_scheduleCallback=function(e,t,i){var c=n.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;u="number"==typeof u&&0<u?c+u:c,i="number"==typeof i.timeout?i.timeout:H(e)}else i=H(e),u=c;return e={id:T++,callback:t,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>c?(e.sortIndex=u,O(M,e),null===P(j)&&e===P(M)&&(D?o():D=!0,a(U,u-c))):(e.sortIndex=i,O(j,e),I||L||(I=!0,r(N))),e},n.unstable_shouldYield=function(){var e=n.unstable_now();B(e);var t=P(j);return t!==A&&null!==A&&null!==t&&null!==t.callback&&t.startTime<=e&&t.expirationTime<A.expirationTime||i()},n.unstable_wrapCallback=function(e){var n=R;return function(){var t=R;R=n;try{return e.apply(this,arguments)}finally{R=t}}}},78:function(e,n,t){"use strict";var r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,g=r?Symbol.for("react.suspense_list"):60120,m=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,_=r?Symbol.for("react.block"):60121,v=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var n=e.$$typeof;switch(n){case a:switch(e=e.type){case f:case p:case i:case u:case c:case h:return e;default:switch(e=e&&e.$$typeof){case l:case d:case y:case m:case s:return e;default:return n}}case o:return n}}}function C(e){return S(e)===p}n.AsyncMode=f,n.ConcurrentMode=p,n.ContextConsumer=l,n.ContextProvider=s,n.Element=a,n.ForwardRef=d,n.Fragment=i,n.Lazy=y,n.Memo=m,n.Portal=o,n.Profiler=u,n.StrictMode=c,n.Suspense=h,n.isAsyncMode=function(e){return C(e)||S(e)===f},n.isConcurrentMode=C,n.isContextConsumer=function(e){return S(e)===l},n.isContextProvider=function(e){return S(e)===s},n.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},n.isForwardRef=function(e){return S(e)===d},n.isFragment=function(e){return S(e)===i},n.isLazy=function(e){return S(e)===y},n.isMemo=function(e){return S(e)===m},n.isPortal=function(e){return S(e)===o},n.isProfiler=function(e){return S(e)===u},n.isStrictMode=function(e){return S(e)===c},n.isSuspense=function(e){return S(e)===h},n.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===p||e===u||e===c||e===h||e===g||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===s||e.$$typeof===l||e.$$typeof===d||e.$$typeof===v||e.$$typeof===b||e.$$typeof===w||e.$$typeof===_)},n.typeOf=S},80:function(e,n){e.exports=function(e){var n=this;n.image=function(t,r,a){return n[e.random.arrayElement(["abstract","animals","business","cats","city","food","nightlife","fashion","people","nature","sports","technics","transport"])](t,r,a)},n.avatar=function(){return e.internet.avatar()},n.imageUrl=function(n,t,r,a){var o="https://lorempixel.com/"+(n=n||640)+"/"+(t=t||480);return void 0!==r&&(o+="/"+r),a&&(o+="?"+e.random.number()),o},n.abstract=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"abstract",r)},n.animals=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"animals",r)},n.business=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"business",r)},n.cats=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"cats",r)},n.city=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"city",r)},n.food=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"food",r)},n.nightlife=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"nightlife",r)},n.fashion=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"fashion",r)},n.people=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"people",r)},n.nature=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"nature",r)},n.sports=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"sports",r)},n.technics=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"technics",r)},n.transport=function(n,t,r){return e.image.lorempixel.imageUrl(n,t,"transport",r)}}},81:function(e,n){e.exports=function(e){var n=this;n.image=function(e,t,r){return n.imageUrl(e,t,void 0,r)},n.avatar=function(){return e.internet.avatar()},n.imageUrl=function(e,n,t,r){var a="https://source.unsplash.com";(void 0!==t&&(a+="/category/"+t),a+="/"+(e=e||640)+"x"+(n=n||480),void 0!==r)&&(new RegExp("^([A-Za-z0-9].+,[A-Za-z0-9]+)$|^([A-Za-z0-9]+)$").test(r)&&(a+="?"+r));return a},n.food=function(n,t,r){return e.image.unsplash.imageUrl(n,t,"food",r)},n.people=function(n,t,r){return e.image.unsplash.imageUrl(n,t,"people",r)},n.nature=function(n,t,r){return e.image.unsplash.imageUrl(n,t,"nature",r)},n.technology=function(n,t,r){return e.image.unsplash.imageUrl(n,t,"technology",r)},n.objects=function(n,t,r){return e.image.unsplash.imageUrl(n,t,"objects",r)},n.buildings=function(n,t,r){return e.image.unsplash.imageUrl(n,t,"buildings",r)}}},82:function(e,n){e.exports=function(e){var n=this;n.image=function(e,t,r,a){return n.imageUrl(e,t,r,a)},n.imageGrayscale=function(e,t,r){return n.imageUrl(e,t,r)},n.imageBlurred=function(e,t,r){return n.imageUrl(e,t,void 0,r)},n.imageRandomSeeded=function(e,t,r,a,o){return n.imageUrl(e,t,r,a,o)},n.avatar=function(){return e.internet.avatar()},n.imageUrl=function(e,n,t,r,a){var o="https://picsum.photos";return a&&(o+="/seed/"+a),o+="/"+(e=e||640)+"/"+(n=n||480),t&&r?o+"?grayscale&blur="+r:t?o+"?grayscale":r?o+"?blur="+r:o}}},83:function(e,n,t){"use strict";var r=t(84);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,n,t,a,o,i){if(i!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function n(){return e}e.isRequired=e;var t={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,elementType:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:o,resetWarningCache:a};return t.PropTypes=t,t}},84:function(e,n,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},85:function(e,n,t){"use strict";n.__esModule=!0;var r=t(2),a=(i(r),i(t(21))),o=i(t(86));i(t(87));function i(e){return e&&e.__esModule?e:{default:e}}function c(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}function s(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}var l=1073741823;function f(e){var n=[];return{on:function(e){n.push(e)},off:function(e){n=n.filter((function(n){return n!==e}))},get:function(){return e},set:function(t,r){e=t,n.forEach((function(n){return n(e,r)}))}}}n.default=function(e,n){var t,i,p="__create-react-context-"+(0,o.default)()+"__",d=function(e){function t(){var n,r;c(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return n=r=u(this,e.call.apply(e,[this].concat(o))),r.emitter=f(r.props.value),u(r,n)}return s(t,e),t.prototype.getChildContext=function(){var e;return(e={})[p]=this.emitter,e},t.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t=this.props.value,r=e.value,a=void 0;((o=t)===(i=r)?0!==o||1/o==1/i:o!=o&&i!=i)?a=0:(a="function"==typeof n?n(t,r):l,0!==(a|=0)&&this.emitter.set(e.value,a))}var o,i},t.prototype.render=function(){return this.props.children},t}(r.Component);d.childContextTypes=((t={})[p]=a.default.object.isRequired,t);var h=function(n){function t(){var e,r;c(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return e=r=u(this,n.call.apply(n,[this].concat(o))),r.state={value:r.getValue()},r.onUpdate=function(e,n){0!=((0|r.observedBits)&n)&&r.setState({value:r.getValue()})},u(r,e)}return s(t,n),t.prototype.componentWillReceiveProps=function(e){var n=e.observedBits;this.observedBits=null==n?l:n},t.prototype.componentDidMount=function(){this.context[p]&&this.context[p].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?l:e},t.prototype.componentWillUnmount=function(){this.context[p]&&this.context[p].off(this.onUpdate)},t.prototype.getValue=function(){return this.context[p]?this.context[p].get():e},t.prototype.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},t}(r.Component);return h.contextTypes=((i={})[p]=a.default.object,i),{Provider:d,Consumer:h}},e.exports=n.default},86:function(e,n,t){"use strict";(function(n){var t="__global_unique_id__";e.exports=function(){return n[t]=(n[t]||0)+1}}).call(this,t(20))},87:function(e,n,t){"use strict";var r=t(88);e.exports=r},88:function(e,n,t){"use strict";function r(e){return function(){return e}}var a=function(){};a.thatReturns=r,a.thatReturnsFalse=r(!1),a.thatReturnsTrue=r(!0),a.thatReturnsNull=r(null),a.thatReturnsThis=function(){return this},a.thatReturnsArgument=function(e){return e},e.exports=a},89:function(e,n,t){(function(e,r){var a;(function(){"use strict";var o={function:!0,object:!0},i=o[typeof window]&&window||this,c=o[typeof n]&&n&&!n.nodeType&&n,u=o[typeof e]&&e&&!e.nodeType,s=c&&u&&"object"==typeof r&&r;!s||s.global!==s&&s.window!==s&&s.self!==s||(i=s);var l=Object.prototype.hasOwnProperty;function f(){var e=Number(arguments[0]);if(!isFinite(e)||e<0||e>1114111||Math.floor(e)!=e)throw RangeError("Invalid code point: "+e);if(e<=65535)return String.fromCharCode(e);var n=55296+((e-=65536)>>10),t=e%1024+56320;return String.fromCharCode(n,t)}var p={};function d(e,n){if(-1==n.indexOf("|")){if(e==n)return;throw Error("Invalid node type: "+e+"; expected type: "+n)}if(!(n=l.call(p,n)?p[n]:p[n]=RegExp("^(?:"+n+")$")).test(e))throw Error("Invalid node type: "+e+"; expected types: "+n)}function h(e){var n=e.type;if(l.call(v,n))return v[n](e);throw Error("Invalid node type: "+n)}function g(e,n){for(var t,r=-1,a=n.length,o="";++r<a;)t=n[r],r+1<a&&"value"==n[r].type&&"null"==n[r].kind&&"value"==n[r+1].type&&"symbol"==n[r+1].kind&&n[r+1].codePoint>=48&&n[r+1].codePoint<=57?o+="\\000":o+=e(t);return o}function m(e){return d(e.type,"anchor|characterClassEscape|characterClassRange|dot|value"),h(e)}function y(e){return d(e.type,"identifier"),e.value}function _(e){return d(e.type,"anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|unicodePropertyEscape|value|dot"),h(e)}var v={alternative:function(e){return d(e.type,"alternative"),g(_,e.body)},anchor:function(e){switch(d(e.type,"anchor"),e.kind){case"start":return"^";case"end":return"$";case"boundary":return"\\b";case"not-boundary":return"\\B";default:throw Error("Invalid assertion")}},characterClass:function(e){return d(e.type,"characterClass"),"["+(e.negative?"^":"")+g(m,e.body)+"]"},characterClassEscape:function(e){return d(e.type,"characterClassEscape"),"\\"+e.value},characterClassRange:function(e){d(e.type,"characterClassRange");var n=e.min,t=e.max;if("characterClassRange"==n.type||"characterClassRange"==t.type)throw Error("Invalid character class range");return m(n)+"-"+m(t)},disjunction:function(e){d(e.type,"disjunction");for(var n=e.body,t=-1,r=n.length,a="";++t<r;)0!=t&&(a+="|"),a+=h(n[t]);return a},dot:function(e){return d(e.type,"dot"),"."},group:function(e){d(e.type,"group");var n="";switch(e.behavior){case"normal":e.name&&(n+="?<"+y(e.name)+">");break;case"ignore":n+="?:";break;case"lookahead":n+="?=";break;case"negativeLookahead":n+="?!";break;case"lookbehind":n+="?<=";break;case"negativeLookbehind":n+="?<!";break;default:throw Error("Invalid behaviour: "+e.behaviour)}return"("+(n+=g(h,e.body))+")"},quantifier:function(e){d(e.type,"quantifier");var n="",t=e.min,r=e.max;return n=null==r?0==t?"*":1==t?"+":"{"+t+",}":t==r?"{"+t+"}":0==t&&1==r?"?":"{"+t+","+r+"}",e.greedy||(n+="?"),function(e){return d(e.type,"anchor|characterClass|characterClassEscape|dot|group|reference|value"),h(e)}(e.body[0])+n},reference:function(e){if(d(e.type,"reference"),e.matchIndex)return"\\"+e.matchIndex;if(e.name)return"\\k<"+y(e.name)+">";throw new Error("Unknown reference type")},unicodePropertyEscape:function(e){return d(e.type,"unicodePropertyEscape"),"\\"+(e.negative?"P":"p")+"{"+e.value+"}"},value:function(e){d(e.type,"value");var n=e.kind,t=e.codePoint;if("number"!=typeof t)throw new Error("Invalid code point: "+t);switch(n){case"controlLetter":return"\\c"+f(t+64);case"hexadecimalEscape":return"\\x"+("00"+t.toString(16).toUpperCase()).slice(-2);case"identifier":return"\\"+f(t);case"null":return"\\"+t;case"octal":return"\\"+("000"+t.toString(8)).slice(-3);case"singleEscape":switch(t){case 8:return"\\b";case 9:return"\\t";case 10:return"\\n";case 11:return"\\v";case 12:return"\\f";case 13:return"\\r";case 45:return"\\-";default:throw Error("Invalid code point: "+t)}case"symbol":return f(t);case"unicodeEscape":return"\\u"+("0000"+t.toString(16).toUpperCase()).slice(-4);case"unicodeCodePointEscape":return"\\u{"+t.toString(16).toUpperCase()+"}";default:throw Error("Unsupported node kind: "+n)}}},b={generate:h};void 0===(a=function(){return b}.call(n,t,n,e))||(e.exports=a),i.regjsgen=b}).call(this)}).call(this,t(48)(e),t(20))},9:function(e,n,t){"use strict";function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}t.d(n,"a",(function(){return r}))},91:function(e,n,t){"use strict";const r=t(92),a=t(93);e.exports=function(e){if(r.has(e))return e;if(a.has(e))return a.get(e);throw new Error("Unknown property: "+e)}},92:function(e,n){e.exports=new Set(["General_Category","Script","Script_Extensions","Alphabetic","Any","ASCII","ASCII_Hex_Digit","Assigned","Bidi_Control","Bidi_Mirrored","Case_Ignorable","Cased","Changes_When_Casefolded","Changes_When_Casemapped","Changes_When_Lowercased","Changes_When_NFKC_Casefolded","Changes_When_Titlecased","Changes_When_Uppercased","Dash","Default_Ignorable_Code_Point","Deprecated","Diacritic","Emoji","Emoji_Component","Emoji_Modifier","Emoji_Modifier_Base","Emoji_Presentation","Extended_Pictographic","Extender","Grapheme_Base","Grapheme_Extend","Hex_Digit","ID_Continue","ID_Start","Ideographic","IDS_Binary_Operator","IDS_Trinary_Operator","Join_Control","Logical_Order_Exception","Lowercase","Math","Noncharacter_Code_Point","Pattern_Syntax","Pattern_White_Space","Quotation_Mark","Radical","Regional_Indicator","Sentence_Terminal","Soft_Dotted","Terminal_Punctuation","Unified_Ideograph","Uppercase","Variation_Selector","White_Space","XID_Continue","XID_Start"])},93:function(e,n){e.exports=new Map([["scx","Script_Extensions"],["sc","Script"],["gc","General_Category"],["AHex","ASCII_Hex_Digit"],["Alpha","Alphabetic"],["Bidi_C","Bidi_Control"],["Bidi_M","Bidi_Mirrored"],["Cased","Cased"],["CI","Case_Ignorable"],["CWCF","Changes_When_Casefolded"],["CWCM","Changes_When_Casemapped"],["CWKCF","Changes_When_NFKC_Casefolded"],["CWL","Changes_When_Lowercased"],["CWT","Changes_When_Titlecased"],["CWU","Changes_When_Uppercased"],["Dash","Dash"],["Dep","Deprecated"],["DI","Default_Ignorable_Code_Point"],["Dia","Diacritic"],["EBase","Emoji_Modifier_Base"],["EComp","Emoji_Component"],["EMod","Emoji_Modifier"],["Emoji","Emoji"],["EPres","Emoji_Presentation"],["Ext","Extender"],["ExtPict","Extended_Pictographic"],["Gr_Base","Grapheme_Base"],["Gr_Ext","Grapheme_Extend"],["Hex","Hex_Digit"],["IDC","ID_Continue"],["Ideo","Ideographic"],["IDS","ID_Start"],["IDSB","IDS_Binary_Operator"],["IDST","IDS_Trinary_Operator"],["Join_C","Join_Control"],["LOE","Logical_Order_Exception"],["Lower","Lowercase"],["Math","Math"],["NChar","Noncharacter_Code_Point"],["Pat_Syn","Pattern_Syntax"],["Pat_WS","Pattern_White_Space"],["QMark","Quotation_Mark"],["Radical","Radical"],["RI","Regional_Indicator"],["SD","Soft_Dotted"],["STerm","Sentence_Terminal"],["Term","Terminal_Punctuation"],["UIdeo","Unified_Ideograph"],["Upper","Uppercase"],["VS","Variation_Selector"],["WSpace","White_Space"],["space","White_Space"],["XIDC","XID_Continue"],["XIDS","XID_Start"]])},94:function(e,n,t){"use strict";const r=t(95);e.exports=function(e,n){const t=r.get(e);if(!t)throw new Error(`Unknown property \`${e}\`.`);const a=t.get(n);if(a)return a;throw new Error(`Unknown value \`${n}\` for property \`${e}\`.`)}},95:function(e,n){e.exports=new Map([["General_Category",new Map([["C","Other"],["Cc","Control"],["cntrl","Control"],["Cf","Format"],["Cn","Unassigned"],["Co","Private_Use"],["Cs","Surrogate"],["L","Letter"],["LC","Cased_Letter"],["Ll","Lowercase_Letter"],["Lm","Modifier_Letter"],["Lo","Other_Letter"],["Lt","Titlecase_Letter"],["Lu","Uppercase_Letter"],["M","Mark"],["Combining_Mark","Mark"],["Mc","Spacing_Mark"],["Me","Enclosing_Mark"],["Mn","Nonspacing_Mark"],["N","Number"],["Nd","Decimal_Number"],["digit","Decimal_Number"],["Nl","Letter_Number"],["No","Other_Number"],["P","Punctuation"],["punct","Punctuation"],["Pc","Connector_Punctuation"],["Pd","Dash_Punctuation"],["Pe","Close_Punctuation"],["Pf","Final_Punctuation"],["Pi","Initial_Punctuation"],["Po","Other_Punctuation"],["Ps","Open_Punctuation"],["S","Symbol"],["Sc","Currency_Symbol"],["Sk","Modifier_Symbol"],["Sm","Math_Symbol"],["So","Other_Symbol"],["Z","Separator"],["Zl","Line_Separator"],["Zp","Paragraph_Separator"],["Zs","Space_Separator"],["Other","Other"],["Control","Control"],["Format","Format"],["Unassigned","Unassigned"],["Private_Use","Private_Use"],["Surrogate","Surrogate"],["Letter","Letter"],["Cased_Letter","Cased_Letter"],["Lowercase_Letter","Lowercase_Letter"],["Modifier_Letter","Modifier_Letter"],["Other_Letter","Other_Letter"],["Titlecase_Letter","Titlecase_Letter"],["Uppercase_Letter","Uppercase_Letter"],["Mark","Mark"],["Spacing_Mark","Spacing_Mark"],["Enclosing_Mark","Enclosing_Mark"],["Nonspacing_Mark","Nonspacing_Mark"],["Number","Number"],["Decimal_Number","Decimal_Number"],["Letter_Number","Letter_Number"],["Other_Number","Other_Number"],["Punctuation","Punctuation"],["Connector_Punctuation","Connector_Punctuation"],["Dash_Punctuation","Dash_Punctuation"],["Close_Punctuation","Close_Punctuation"],["Final_Punctuation","Final_Punctuation"],["Initial_Punctuation","Initial_Punctuation"],["Other_Punctuation","Other_Punctuation"],["Open_Punctuation","Open_Punctuation"],["Symbol","Symbol"],["Currency_Symbol","Currency_Symbol"],["Modifier_Symbol","Modifier_Symbol"],["Math_Symbol","Math_Symbol"],["Other_Symbol","Other_Symbol"],["Separator","Separator"],["Line_Separator","Line_Separator"],["Paragraph_Separator","Paragraph_Separator"],["Space_Separator","Space_Separator"]])],["Script",new Map([["Adlm","Adlam"],["Aghb","Caucasian_Albanian"],["Ahom","Ahom"],["Arab","Arabic"],["Armi","Imperial_Aramaic"],["Armn","Armenian"],["Avst","Avestan"],["Bali","Balinese"],["Bamu","Bamum"],["Bass","Bassa_Vah"],["Batk","Batak"],["Beng","Bengali"],["Bhks","Bhaiksuki"],["Bopo","Bopomofo"],["Brah","Brahmi"],["Brai","Braille"],["Bugi","Buginese"],["Buhd","Buhid"],["Cakm","Chakma"],["Cans","Canadian_Aboriginal"],["Cari","Carian"],["Cham","Cham"],["Cher","Cherokee"],["Chrs","Chorasmian"],["Copt","Coptic"],["Qaac","Coptic"],["Cprt","Cypriot"],["Cyrl","Cyrillic"],["Deva","Devanagari"],["Diak","Dives_Akuru"],["Dogr","Dogra"],["Dsrt","Deseret"],["Dupl","Duployan"],["Egyp","Egyptian_Hieroglyphs"],["Elba","Elbasan"],["Elym","Elymaic"],["Ethi","Ethiopic"],["Geor","Georgian"],["Glag","Glagolitic"],["Gong","Gunjala_Gondi"],["Gonm","Masaram_Gondi"],["Goth","Gothic"],["Gran","Grantha"],["Grek","Greek"],["Gujr","Gujarati"],["Guru","Gurmukhi"],["Hang","Hangul"],["Hani","Han"],["Hano","Hanunoo"],["Hatr","Hatran"],["Hebr","Hebrew"],["Hira","Hiragana"],["Hluw","Anatolian_Hieroglyphs"],["Hmng","Pahawh_Hmong"],["Hmnp","Nyiakeng_Puachue_Hmong"],["Hrkt","Katakana_Or_Hiragana"],["Hung","Old_Hungarian"],["Ital","Old_Italic"],["Java","Javanese"],["Kali","Kayah_Li"],["Kana","Katakana"],["Khar","Kharoshthi"],["Khmr","Khmer"],["Khoj","Khojki"],["Kits","Khitan_Small_Script"],["Knda","Kannada"],["Kthi","Kaithi"],["Lana","Tai_Tham"],["Laoo","Lao"],["Latn","Latin"],["Lepc","Lepcha"],["Limb","Limbu"],["Lina","Linear_A"],["Linb","Linear_B"],["Lisu","Lisu"],["Lyci","Lycian"],["Lydi","Lydian"],["Mahj","Mahajani"],["Maka","Makasar"],["Mand","Mandaic"],["Mani","Manichaean"],["Marc","Marchen"],["Medf","Medefaidrin"],["Mend","Mende_Kikakui"],["Merc","Meroitic_Cursive"],["Mero","Meroitic_Hieroglyphs"],["Mlym","Malayalam"],["Modi","Modi"],["Mong","Mongolian"],["Mroo","Mro"],["Mtei","Meetei_Mayek"],["Mult","Multani"],["Mymr","Myanmar"],["Nand","Nandinagari"],["Narb","Old_North_Arabian"],["Nbat","Nabataean"],["Newa","Newa"],["Nkoo","Nko"],["Nshu","Nushu"],["Ogam","Ogham"],["Olck","Ol_Chiki"],["Orkh","Old_Turkic"],["Orya","Oriya"],["Osge","Osage"],["Osma","Osmanya"],["Palm","Palmyrene"],["Pauc","Pau_Cin_Hau"],["Perm","Old_Permic"],["Phag","Phags_Pa"],["Phli","Inscriptional_Pahlavi"],["Phlp","Psalter_Pahlavi"],["Phnx","Phoenician"],["Plrd","Miao"],["Prti","Inscriptional_Parthian"],["Rjng","Rejang"],["Rohg","Hanifi_Rohingya"],["Runr","Runic"],["Samr","Samaritan"],["Sarb","Old_South_Arabian"],["Saur","Saurashtra"],["Sgnw","SignWriting"],["Shaw","Shavian"],["Shrd","Sharada"],["Sidd","Siddham"],["Sind","Khudawadi"],["Sinh","Sinhala"],["Sogd","Sogdian"],["Sogo","Old_Sogdian"],["Sora","Sora_Sompeng"],["Soyo","Soyombo"],["Sund","Sundanese"],["Sylo","Syloti_Nagri"],["Syrc","Syriac"],["Tagb","Tagbanwa"],["Takr","Takri"],["Tale","Tai_Le"],["Talu","New_Tai_Lue"],["Taml","Tamil"],["Tang","Tangut"],["Tavt","Tai_Viet"],["Telu","Telugu"],["Tfng","Tifinagh"],["Tglg","Tagalog"],["Thaa","Thaana"],["Thai","Thai"],["Tibt","Tibetan"],["Tirh","Tirhuta"],["Ugar","Ugaritic"],["Vaii","Vai"],["Wara","Warang_Citi"],["Wcho","Wancho"],["Xpeo","Old_Persian"],["Xsux","Cuneiform"],["Yezi","Yezidi"],["Yiii","Yi"],["Zanb","Zanabazar_Square"],["Zinh","Inherited"],["Qaai","Inherited"],["Zyyy","Common"],["Zzzz","Unknown"],["Adlam","Adlam"],["Caucasian_Albanian","Caucasian_Albanian"],["Arabic","Arabic"],["Imperial_Aramaic","Imperial_Aramaic"],["Armenian","Armenian"],["Avestan","Avestan"],["Balinese","Balinese"],["Bamum","Bamum"],["Bassa_Vah","Bassa_Vah"],["Batak","Batak"],["Bengali","Bengali"],["Bhaiksuki","Bhaiksuki"],["Bopomofo","Bopomofo"],["Brahmi","Brahmi"],["Braille","Braille"],["Buginese","Buginese"],["Buhid","Buhid"],["Chakma","Chakma"],["Canadian_Aboriginal","Canadian_Aboriginal"],["Carian","Carian"],["Cherokee","Cherokee"],["Chorasmian","Chorasmian"],["Coptic","Coptic"],["Cypriot","Cypriot"],["Cyrillic","Cyrillic"],["Devanagari","Devanagari"],["Dives_Akuru","Dives_Akuru"],["Dogra","Dogra"],["Deseret","Deseret"],["Duployan","Duployan"],["Egyptian_Hieroglyphs","Egyptian_Hieroglyphs"],["Elbasan","Elbasan"],["Elymaic","Elymaic"],["Ethiopic","Ethiopic"],["Georgian","Georgian"],["Glagolitic","Glagolitic"],["Gunjala_Gondi","Gunjala_Gondi"],["Masaram_Gondi","Masaram_Gondi"],["Gothic","Gothic"],["Grantha","Grantha"],["Greek","Greek"],["Gujarati","Gujarati"],["Gurmukhi","Gurmukhi"],["Hangul","Hangul"],["Han","Han"],["Hanunoo","Hanunoo"],["Hatran","Hatran"],["Hebrew","Hebrew"],["Hiragana","Hiragana"],["Anatolian_Hieroglyphs","Anatolian_Hieroglyphs"],["Pahawh_Hmong","Pahawh_Hmong"],["Nyiakeng_Puachue_Hmong","Nyiakeng_Puachue_Hmong"],["Katakana_Or_Hiragana","Katakana_Or_Hiragana"],["Old_Hungarian","Old_Hungarian"],["Old_Italic","Old_Italic"],["Javanese","Javanese"],["Kayah_Li","Kayah_Li"],["Katakana","Katakana"],["Kharoshthi","Kharoshthi"],["Khmer","Khmer"],["Khojki","Khojki"],["Khitan_Small_Script","Khitan_Small_Script"],["Kannada","Kannada"],["Kaithi","Kaithi"],["Tai_Tham","Tai_Tham"],["Lao","Lao"],["Latin","Latin"],["Lepcha","Lepcha"],["Limbu","Limbu"],["Linear_A","Linear_A"],["Linear_B","Linear_B"],["Lycian","Lycian"],["Lydian","Lydian"],["Mahajani","Mahajani"],["Makasar","Makasar"],["Mandaic","Mandaic"],["Manichaean","Manichaean"],["Marchen","Marchen"],["Medefaidrin","Medefaidrin"],["Mende_Kikakui","Mende_Kikakui"],["Meroitic_Cursive","Meroitic_Cursive"],["Meroitic_Hieroglyphs","Meroitic_Hieroglyphs"],["Malayalam","Malayalam"],["Mongolian","Mongolian"],["Mro","Mro"],["Meetei_Mayek","Meetei_Mayek"],["Multani","Multani"],["Myanmar","Myanmar"],["Nandinagari","Nandinagari"],["Old_North_Arabian","Old_North_Arabian"],["Nabataean","Nabataean"],["Nko","Nko"],["Nushu","Nushu"],["Ogham","Ogham"],["Ol_Chiki","Ol_Chiki"],["Old_Turkic","Old_Turkic"],["Oriya","Oriya"],["Osage","Osage"],["Osmanya","Osmanya"],["Palmyrene","Palmyrene"],["Pau_Cin_Hau","Pau_Cin_Hau"],["Old_Permic","Old_Permic"],["Phags_Pa","Phags_Pa"],["Inscriptional_Pahlavi","Inscriptional_Pahlavi"],["Psalter_Pahlavi","Psalter_Pahlavi"],["Phoenician","Phoenician"],["Miao","Miao"],["Inscriptional_Parthian","Inscriptional_Parthian"],["Rejang","Rejang"],["Hanifi_Rohingya","Hanifi_Rohingya"],["Runic","Runic"],["Samaritan","Samaritan"],["Old_South_Arabian","Old_South_Arabian"],["Saurashtra","Saurashtra"],["SignWriting","SignWriting"],["Shavian","Shavian"],["Sharada","Sharada"],["Siddham","Siddham"],["Khudawadi","Khudawadi"],["Sinhala","Sinhala"],["Sogdian","Sogdian"],["Old_Sogdian","Old_Sogdian"],["Sora_Sompeng","Sora_Sompeng"],["Soyombo","Soyombo"],["Sundanese","Sundanese"],["Syloti_Nagri","Syloti_Nagri"],["Syriac","Syriac"],["Tagbanwa","Tagbanwa"],["Takri","Takri"],["Tai_Le","Tai_Le"],["New_Tai_Lue","New_Tai_Lue"],["Tamil","Tamil"],["Tangut","Tangut"],["Tai_Viet","Tai_Viet"],["Telugu","Telugu"],["Tifinagh","Tifinagh"],["Tagalog","Tagalog"],["Thaana","Thaana"],["Tibetan","Tibetan"],["Tirhuta","Tirhuta"],["Ugaritic","Ugaritic"],["Vai","Vai"],["Warang_Citi","Warang_Citi"],["Wancho","Wancho"],["Old_Persian","Old_Persian"],["Cuneiform","Cuneiform"],["Yezidi","Yezidi"],["Yi","Yi"],["Zanabazar_Square","Zanabazar_Square"],["Inherited","Inherited"],["Common","Common"],["Unknown","Unknown"]])],["Script_Extensions",new Map([["Adlm","Adlam"],["Aghb","Caucasian_Albanian"],["Ahom","Ahom"],["Arab","Arabic"],["Armi","Imperial_Aramaic"],["Armn","Armenian"],["Avst","Avestan"],["Bali","Balinese"],["Bamu","Bamum"],["Bass","Bassa_Vah"],["Batk","Batak"],["Beng","Bengali"],["Bhks","Bhaiksuki"],["Bopo","Bopomofo"],["Brah","Brahmi"],["Brai","Braille"],["Bugi","Buginese"],["Buhd","Buhid"],["Cakm","Chakma"],["Cans","Canadian_Aboriginal"],["Cari","Carian"],["Cham","Cham"],["Cher","Cherokee"],["Chrs","Chorasmian"],["Copt","Coptic"],["Qaac","Coptic"],["Cprt","Cypriot"],["Cyrl","Cyrillic"],["Deva","Devanagari"],["Diak","Dives_Akuru"],["Dogr","Dogra"],["Dsrt","Deseret"],["Dupl","Duployan"],["Egyp","Egyptian_Hieroglyphs"],["Elba","Elbasan"],["Elym","Elymaic"],["Ethi","Ethiopic"],["Geor","Georgian"],["Glag","Glagolitic"],["Gong","Gunjala_Gondi"],["Gonm","Masaram_Gondi"],["Goth","Gothic"],["Gran","Grantha"],["Grek","Greek"],["Gujr","Gujarati"],["Guru","Gurmukhi"],["Hang","Hangul"],["Hani","Han"],["Hano","Hanunoo"],["Hatr","Hatran"],["Hebr","Hebrew"],["Hira","Hiragana"],["Hluw","Anatolian_Hieroglyphs"],["Hmng","Pahawh_Hmong"],["Hmnp","Nyiakeng_Puachue_Hmong"],["Hrkt","Katakana_Or_Hiragana"],["Hung","Old_Hungarian"],["Ital","Old_Italic"],["Java","Javanese"],["Kali","Kayah_Li"],["Kana","Katakana"],["Khar","Kharoshthi"],["Khmr","Khmer"],["Khoj","Khojki"],["Kits","Khitan_Small_Script"],["Knda","Kannada"],["Kthi","Kaithi"],["Lana","Tai_Tham"],["Laoo","Lao"],["Latn","Latin"],["Lepc","Lepcha"],["Limb","Limbu"],["Lina","Linear_A"],["Linb","Linear_B"],["Lisu","Lisu"],["Lyci","Lycian"],["Lydi","Lydian"],["Mahj","Mahajani"],["Maka","Makasar"],["Mand","Mandaic"],["Mani","Manichaean"],["Marc","Marchen"],["Medf","Medefaidrin"],["Mend","Mende_Kikakui"],["Merc","Meroitic_Cursive"],["Mero","Meroitic_Hieroglyphs"],["Mlym","Malayalam"],["Modi","Modi"],["Mong","Mongolian"],["Mroo","Mro"],["Mtei","Meetei_Mayek"],["Mult","Multani"],["Mymr","Myanmar"],["Nand","Nandinagari"],["Narb","Old_North_Arabian"],["Nbat","Nabataean"],["Newa","Newa"],["Nkoo","Nko"],["Nshu","Nushu"],["Ogam","Ogham"],["Olck","Ol_Chiki"],["Orkh","Old_Turkic"],["Orya","Oriya"],["Osge","Osage"],["Osma","Osmanya"],["Palm","Palmyrene"],["Pauc","Pau_Cin_Hau"],["Perm","Old_Permic"],["Phag","Phags_Pa"],["Phli","Inscriptional_Pahlavi"],["Phlp","Psalter_Pahlavi"],["Phnx","Phoenician"],["Plrd","Miao"],["Prti","Inscriptional_Parthian"],["Rjng","Rejang"],["Rohg","Hanifi_Rohingya"],["Runr","Runic"],["Samr","Samaritan"],["Sarb","Old_South_Arabian"],["Saur","Saurashtra"],["Sgnw","SignWriting"],["Shaw","Shavian"],["Shrd","Sharada"],["Sidd","Siddham"],["Sind","Khudawadi"],["Sinh","Sinhala"],["Sogd","Sogdian"],["Sogo","Old_Sogdian"],["Sora","Sora_Sompeng"],["Soyo","Soyombo"],["Sund","Sundanese"],["Sylo","Syloti_Nagri"],["Syrc","Syriac"],["Tagb","Tagbanwa"],["Takr","Takri"],["Tale","Tai_Le"],["Talu","New_Tai_Lue"],["Taml","Tamil"],["Tang","Tangut"],["Tavt","Tai_Viet"],["Telu","Telugu"],["Tfng","Tifinagh"],["Tglg","Tagalog"],["Thaa","Thaana"],["Thai","Thai"],["Tibt","Tibetan"],["Tirh","Tirhuta"],["Ugar","Ugaritic"],["Vaii","Vai"],["Wara","Warang_Citi"],["Wcho","Wancho"],["Xpeo","Old_Persian"],["Xsux","Cuneiform"],["Yezi","Yezidi"],["Yiii","Yi"],["Zanb","Zanabazar_Square"],["Zinh","Inherited"],["Qaai","Inherited"],["Zyyy","Common"],["Zzzz","Unknown"],["Adlam","Adlam"],["Caucasian_Albanian","Caucasian_Albanian"],["Arabic","Arabic"],["Imperial_Aramaic","Imperial_Aramaic"],["Armenian","Armenian"],["Avestan","Avestan"],["Balinese","Balinese"],["Bamum","Bamum"],["Bassa_Vah","Bassa_Vah"],["Batak","Batak"],["Bengali","Bengali"],["Bhaiksuki","Bhaiksuki"],["Bopomofo","Bopomofo"],["Brahmi","Brahmi"],["Braille","Braille"],["Buginese","Buginese"],["Buhid","Buhid"],["Chakma","Chakma"],["Canadian_Aboriginal","Canadian_Aboriginal"],["Carian","Carian"],["Cherokee","Cherokee"],["Chorasmian","Chorasmian"],["Coptic","Coptic"],["Cypriot","Cypriot"],["Cyrillic","Cyrillic"],["Devanagari","Devanagari"],["Dives_Akuru","Dives_Akuru"],["Dogra","Dogra"],["Deseret","Deseret"],["Duployan","Duployan"],["Egyptian_Hieroglyphs","Egyptian_Hieroglyphs"],["Elbasan","Elbasan"],["Elymaic","Elymaic"],["Ethiopic","Ethiopic"],["Georgian","Georgian"],["Glagolitic","Glagolitic"],["Gunjala_Gondi","Gunjala_Gondi"],["Masaram_Gondi","Masaram_Gondi"],["Gothic","Gothic"],["Grantha","Grantha"],["Greek","Greek"],["Gujarati","Gujarati"],["Gurmukhi","Gurmukhi"],["Hangul","Hangul"],["Han","Han"],["Hanunoo","Hanunoo"],["Hatran","Hatran"],["Hebrew","Hebrew"],["Hiragana","Hiragana"],["Anatolian_Hieroglyphs","Anatolian_Hieroglyphs"],["Pahawh_Hmong","Pahawh_Hmong"],["Nyiakeng_Puachue_Hmong","Nyiakeng_Puachue_Hmong"],["Katakana_Or_Hiragana","Katakana_Or_Hiragana"],["Old_Hungarian","Old_Hungarian"],["Old_Italic","Old_Italic"],["Javanese","Javanese"],["Kayah_Li","Kayah_Li"],["Katakana","Katakana"],["Kharoshthi","Kharoshthi"],["Khmer","Khmer"],["Khojki","Khojki"],["Khitan_Small_Script","Khitan_Small_Script"],["Kannada","Kannada"],["Kaithi","Kaithi"],["Tai_Tham","Tai_Tham"],["Lao","Lao"],["Latin","Latin"],["Lepcha","Lepcha"],["Limbu","Limbu"],["Linear_A","Linear_A"],["Linear_B","Linear_B"],["Lycian","Lycian"],["Lydian","Lydian"],["Mahajani","Mahajani"],["Makasar","Makasar"],["Mandaic","Mandaic"],["Manichaean","Manichaean"],["Marchen","Marchen"],["Medefaidrin","Medefaidrin"],["Mende_Kikakui","Mende_Kikakui"],["Meroitic_Cursive","Meroitic_Cursive"],["Meroitic_Hieroglyphs","Meroitic_Hieroglyphs"],["Malayalam","Malayalam"],["Mongolian","Mongolian"],["Mro","Mro"],["Meetei_Mayek","Meetei_Mayek"],["Multani","Multani"],["Myanmar","Myanmar"],["Nandinagari","Nandinagari"],["Old_North_Arabian","Old_North_Arabian"],["Nabataean","Nabataean"],["Nko","Nko"],["Nushu","Nushu"],["Ogham","Ogham"],["Ol_Chiki","Ol_Chiki"],["Old_Turkic","Old_Turkic"],["Oriya","Oriya"],["Osage","Osage"],["Osmanya","Osmanya"],["Palmyrene","Palmyrene"],["Pau_Cin_Hau","Pau_Cin_Hau"],["Old_Permic","Old_Permic"],["Phags_Pa","Phags_Pa"],["Inscriptional_Pahlavi","Inscriptional_Pahlavi"],["Psalter_Pahlavi","Psalter_Pahlavi"],["Phoenician","Phoenician"],["Miao","Miao"],["Inscriptional_Parthian","Inscriptional_Parthian"],["Rejang","Rejang"],["Hanifi_Rohingya","Hanifi_Rohingya"],["Runic","Runic"],["Samaritan","Samaritan"],["Old_South_Arabian","Old_South_Arabian"],["Saurashtra","Saurashtra"],["SignWriting","SignWriting"],["Shavian","Shavian"],["Sharada","Sharada"],["Siddham","Siddham"],["Khudawadi","Khudawadi"],["Sinhala","Sinhala"],["Sogdian","Sogdian"],["Old_Sogdian","Old_Sogdian"],["Sora_Sompeng","Sora_Sompeng"],["Soyombo","Soyombo"],["Sundanese","Sundanese"],["Syloti_Nagri","Syloti_Nagri"],["Syriac","Syriac"],["Tagbanwa","Tagbanwa"],["Takri","Takri"],["Tai_Le","Tai_Le"],["New_Tai_Lue","New_Tai_Lue"],["Tamil","Tamil"],["Tangut","Tangut"],["Tai_Viet","Tai_Viet"],["Telugu","Telugu"],["Tifinagh","Tifinagh"],["Tagalog","Tagalog"],["Thaana","Thaana"],["Tibetan","Tibetan"],["Tirhuta","Tirhuta"],["Ugaritic","Ugaritic"],["Vai","Vai"],["Warang_Citi","Warang_Citi"],["Wancho","Wancho"],["Old_Persian","Old_Persian"],["Cuneiform","Cuneiform"],["Yezidi","Yezidi"],["Yi","Yi"],["Zanabazar_Square","Zanabazar_Square"],["Inherited","Inherited"],["Common","Common"],["Unknown","Unknown"]])]])},96:function(e,n){e.exports=new Map([[75,8490],[83,383],[107,8490],[115,383],[181,924],[197,8491],[223,7838],[229,8491],[383,83],[452,453],[453,452],[455,456],[456,455],[458,459],[459,458],[497,498],[498,497],[837,8126],[914,976],[917,1013],[920,1012],[921,8126],[922,1008],[924,181],[928,982],[929,1009],[931,962],[934,981],[937,8486],[952,1012],[962,931],[969,8486],[976,914],[977,1012],[981,934],[982,928],[1008,922],[1009,929],[1012,[920,977,952]],[1013,917],[1042,7296],[1044,7297],[1054,7298],[1057,7299],[1058,7301],[1066,7302],[1122,7303],[7296,1042],[7297,1044],[7298,1054],[7299,1057],[7300,7301],[7301,[1058,7300]],[7302,1066],[7303,1122],[7304,42570],[7776,7835],[7835,7776],[7838,223],[8064,8072],[8065,8073],[8066,8074],[8067,8075],[8068,8076],[8069,8077],[8070,8078],[8071,8079],[8072,8064],[8073,8065],[8074,8066],[8075,8067],[8076,8068],[8077,8069],[8078,8070],[8079,8071],[8080,8088],[8081,8089],[8082,8090],[8083,8091],[8084,8092],[8085,8093],[8086,8094],[8087,8095],[8088,8080],[8089,8081],[8090,8082],[8091,8083],[8092,8084],[8093,8085],[8094,8086],[8095,8087],[8096,8104],[8097,8105],[8098,8106],[8099,8107],[8100,8108],[8101,8109],[8102,8110],[8103,8111],[8104,8096],[8105,8097],[8106,8098],[8107,8099],[8108,8100],[8109,8101],[8110,8102],[8111,8103],[8115,8124],[8124,8115],[8126,[837,921]],[8131,8140],[8140,8131],[8179,8188],[8188,8179],[8486,[937,969]],[8490,75],[8491,[197,229]],[42570,7304],[66560,66600],[66561,66601],[66562,66602],[66563,66603],[66564,66604],[66565,66605],[66566,66606],[66567,66607],[66568,66608],[66569,66609],[66570,66610],[66571,66611],[66572,66612],[66573,66613],[66574,66614],[66575,66615],[66576,66616],[66577,66617],[66578,66618],[66579,66619],[66580,66620],[66581,66621],[66582,66622],[66583,66623],[66584,66624],[66585,66625],[66586,66626],[66587,66627],[66588,66628],[66589,66629],[66590,66630],[66591,66631],[66592,66632],[66593,66633],[66594,66634],[66595,66635],[66596,66636],[66597,66637],[66598,66638],[66599,66639],[66600,66560],[66601,66561],[66602,66562],[66603,66563],[66604,66564],[66605,66565],[66606,66566],[66607,66567],[66608,66568],[66609,66569],[66610,66570],[66611,66571],[66612,66572],[66613,66573],[66614,66574],[66615,66575],[66616,66576],[66617,66577],[66618,66578],[66619,66579],[66620,66580],[66621,66581],[66622,66582],[66623,66583],[66624,66584],[66625,66585],[66626,66586],[66627,66587],[66628,66588],[66629,66589],[66630,66590],[66631,66591],[66632,66592],[66633,66593],[66634,66594],[66635,66595],[66636,66596],[66637,66597],[66638,66598],[66639,66599],[66736,66776],[66737,66777],[66738,66778],[66739,66779],[66740,66780],[66741,66781],[66742,66782],[66743,66783],[66744,66784],[66745,66785],[66746,66786],[66747,66787],[66748,66788],[66749,66789],[66750,66790],[66751,66791],[66752,66792],[66753,66793],[66754,66794],[66755,66795],[66756,66796],[66757,66797],[66758,66798],[66759,66799],[66760,66800],[66761,66801],[66762,66802],[66763,66803],[66764,66804],[66765,66805],[66766,66806],[66767,66807],[66768,66808],[66769,66809],[66770,66810],[66771,66811],[66776,66736],[66777,66737],[66778,66738],[66779,66739],[66780,66740],[66781,66741],[66782,66742],[66783,66743],[66784,66744],[66785,66745],[66786,66746],[66787,66747],[66788,66748],[66789,66749],[66790,66750],[66791,66751],[66792,66752],[66793,66753],[66794,66754],[66795,66755],[66796,66756],[66797,66757],[66798,66758],[66799,66759],[66800,66760],[66801,66761],[66802,66762],[66803,66763],[66804,66764],[66805,66765],[66806,66766],[66807,66767],[66808,66768],[66809,66769],[66810,66770],[66811,66771],[68736,68800],[68737,68801],[68738,68802],[68739,68803],[68740,68804],[68741,68805],[68742,68806],[68743,68807],[68744,68808],[68745,68809],[68746,68810],[68747,68811],[68748,68812],[68749,68813],[68750,68814],[68751,68815],[68752,68816],[68753,68817],[68754,68818],[68755,68819],[68756,68820],[68757,68821],[68758,68822],[68759,68823],[68760,68824],[68761,68825],[68762,68826],[68763,68827],[68764,68828],[68765,68829],[68766,68830],[68767,68831],[68768,68832],[68769,68833],[68770,68834],[68771,68835],[68772,68836],[68773,68837],[68774,68838],[68775,68839],[68776,68840],[68777,68841],[68778,68842],[68779,68843],[68780,68844],[68781,68845],[68782,68846],[68783,68847],[68784,68848],[68785,68849],[68786,68850],[68800,68736],[68801,68737],[68802,68738],[68803,68739],[68804,68740],[68805,68741],[68806,68742],[68807,68743],[68808,68744],[68809,68745],[68810,68746],[68811,68747],[68812,68748],[68813,68749],[68814,68750],[68815,68751],[68816,68752],[68817,68753],[68818,68754],[68819,68755],[68820,68756],[68821,68757],[68822,68758],[68823,68759],[68824,68760],[68825,68761],[68826,68762],[68827,68763],[68828,68764],[68829,68765],[68830,68766],[68831,68767],[68832,68768],[68833,68769],[68834,68770],[68835,68771],[68836,68772],[68837,68773],[68838,68774],[68839,68775],[68840,68776],[68841,68777],[68842,68778],[68843,68779],[68844,68780],[68845,68781],[68846,68782],[68847,68783],[68848,68784],[68849,68785],[68850,68786],[71840,71872],[71841,71873],[71842,71874],[71843,71875],[71844,71876],[71845,71877],[71846,71878],[71847,71879],[71848,71880],[71849,71881],[71850,71882],[71851,71883],[71852,71884],[71853,71885],[71854,71886],[71855,71887],[71856,71888],[71857,71889],[71858,71890],[71859,71891],[71860,71892],[71861,71893],[71862,71894],[71863,71895],[71864,71896],[71865,71897],[71866,71898],[71867,71899],[71868,71900],[71869,71901],[71870,71902],[71871,71903],[71872,71840],[71873,71841],[71874,71842],[71875,71843],[71876,71844],[71877,71845],[71878,71846],[71879,71847],[71880,71848],[71881,71849],[71882,71850],[71883,71851],[71884,71852],[71885,71853],[71886,71854],[71887,71855],[71888,71856],[71889,71857],[71890,71858],[71891,71859],[71892,71860],[71893,71861],[71894,71862],[71895,71863],[71896,71864],[71897,71865],[71898,71866],[71899,71867],[71900,71868],[71901,71869],[71902,71870],[71903,71871],[93760,93792],[93761,93793],[93762,93794],[93763,93795],[93764,93796],[93765,93797],[93766,93798],[93767,93799],[93768,93800],[93769,93801],[93770,93802],[93771,93803],[93772,93804],[93773,93805],[93774,93806],[93775,93807],[93776,93808],[93777,93809],[93778,93810],[93779,93811],[93780,93812],[93781,93813],[93782,93814],[93783,93815],[93784,93816],[93785,93817],[93786,93818],[93787,93819],[93788,93820],[93789,93821],[93790,93822],[93791,93823],[93792,93760],[93793,93761],[93794,93762],[93795,93763],[93796,93764],[93797,93765],[93798,93766],[93799,93767],[93800,93768],[93801,93769],[93802,93770],[93803,93771],[93804,93772],[93805,93773],[93806,93774],[93807,93775],[93808,93776],[93809,93777],[93810,93778],[93811,93779],[93812,93780],[93813,93781],[93814,93782],[93815,93783],[93816,93784],[93817,93785],[93818,93786],[93819,93787],[93820,93788],[93821,93789],[93822,93790],[93823,93791],[125184,125218],[125185,125219],[125186,125220],[125187,125221],[125188,125222],[125189,125223],[125190,125224],[125191,125225],[125192,125226],[125193,125227],[125194,125228],[125195,125229],[125196,125230],[125197,125231],[125198,125232],[125199,125233],[125200,125234],[125201,125235],[125202,125236],[125203,125237],[125204,125238],[125205,125239],[125206,125240],[125207,125241],[125208,125242],[125209,125243],[125210,125244],[125211,125245],[125212,125246],[125213,125247],[125214,125248],[125215,125249],[125216,125250],[125217,125251],[125218,125184],[125219,125185],[125220,125186],[125221,125187],[125222,125188],[125223,125189],[125224,125190],[125225,125191],[125226,125192],[125227,125193],[125228,125194],[125229,125195],[125230,125196],[125231,125197],[125232,125198],[125233,125199],[125234,125200],[125235,125201],[125236,125202],[125237,125203],[125238,125204],[125239,125205],[125240,125206],[125241,125207],[125242,125208],[125243,125209],[125244,125210],[125245,125211],[125246,125212],[125247,125213],[125248,125214],[125249,125215],[125250,125216],[125251,125217]])},97:function(e,n,t){"use strict";const r=t(1);n.REGULAR=new Map([["d",r().addRange(48,57)],["D",r().addRange(0,47).addRange(58,65535)],["s",r(32,160,5760,8239,8287,12288,65279).addRange(9,13).addRange(8192,8202).addRange(8232,8233)],["S",r().addRange(0,8).addRange(14,31).addRange(33,159).addRange(161,5759).addRange(5761,8191).addRange(8203,8231).addRange(8234,8238).addRange(8240,8286).addRange(8288,12287).addRange(12289,65278).addRange(65280,65535)],["w",r(95).addRange(48,57).addRange(65,90).addRange(97,122)],["W",r(96).addRange(0,47).addRange(58,64).addRange(91,94).addRange(123,65535)]]),n.UNICODE=new Map([["d",r().addRange(48,57)],["D",r().addRange(0,47).addRange(58,1114111)],["s",r(32,160,5760,8239,8287,12288,65279).addRange(9,13).addRange(8192,8202).addRange(8232,8233)],["S",r().addRange(0,8).addRange(14,31).addRange(33,159).addRange(161,5759).addRange(5761,8191).addRange(8203,8231).addRange(8234,8238).addRange(8240,8286).addRange(8288,12287).addRange(12289,65278).addRange(65280,1114111)],["w",r(95).addRange(48,57).addRange(65,90).addRange(97,122)],["W",r(96).addRange(0,47).addRange(58,64).addRange(91,94).addRange(123,1114111)]]),n.UNICODE_IGNORE_CASE=new Map([["d",r().addRange(48,57)],["D",r().addRange(0,47).addRange(58,1114111)],["s",r(32,160,5760,8239,8287,12288,65279).addRange(9,13).addRange(8192,8202).addRange(8232,8233)],["S",r().addRange(0,8).addRange(14,31).addRange(33,159).addRange(161,5759).addRange(5761,8191).addRange(8203,8231).addRange(8234,8238).addRange(8240,8286).addRange(8288,12287).addRange(12289,65278).addRange(65280,1114111)],["w",r(95,383,8490).addRange(48,57).addRange(65,90).addRange(97,122)],["W",r(96).addRange(0,47).addRange(58,64).addRange(91,94).addRange(123,382).addRange(384,8489).addRange(8491,1114111)]])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2Vtb3Rpb24tdGhlbWluZy9kaXN0L2Vtb3Rpb24tdGhlbWluZy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvZXNtL3ZhbHVlLWVxdWFsLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9yZWFjdC1saXZlL2Rpc3QvcmVhY3QtbGl2ZS5lcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9kaXN0L2VzbS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lbW90aW9uL2Rpc3QvY3JlYXRlLWVtb3Rpb24uYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2Vtb3Rpb24vZGlzdC9lbW90aW9uLmVzbS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9pbWFnZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL3JlYWN0LXNpbXBsZS1jb2RlLWVkaXRvci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jb250ZXh0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvcmVnZXhwdS1jb3JlL3Jld3JpdGUtcGF0dGVybi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvc291cmNlbWFwLWNvZGVjL2Rpc3Qvc291cmNlbWFwLWNvZGVjLmVzLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NvbG9yMmsvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9jb3B5LXRleHQtdG8tY2xpcGJvYXJkL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvZmFrZXIvbGliL2ltYWdlX3Byb3ZpZGVycy9sb3JlbXBpeGVsLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9mYWtlci9saWIvaW1hZ2VfcHJvdmlkZXJzL3Vuc3BsYXNoLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9mYWtlci9saWIvaW1hZ2VfcHJvdmlkZXJzL2xvcmVtcGljc3VtLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jb250ZXh0L2xpYi9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvZ3VkL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9mYmpzL2xpYi93YXJuaW5nLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy9yZWdqc2dlbi9yZWdqc2dlbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvdW5pY29kZS1tYXRjaC1wcm9wZXJ0eS1lY21hc2NyaXB0L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy91bmljb2RlLWNhbm9uaWNhbC1wcm9wZXJ0eS1uYW1lcy1lY21hc2NyaXB0L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy91bmljb2RlLXByb3BlcnR5LWFsaWFzZXMtZWNtYXNjcmlwdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvdW5pY29kZS1tYXRjaC1wcm9wZXJ0eS12YWx1ZS1lY21hc2NyaXB0L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvZGV2bG9vcHMvRGVza3RvcC93ZWIvcmVmbGV4LXByb2plY3RzL25vZGVfbW9kdWxlcy91bmljb2RlLW1hdGNoLXByb3BlcnR5LXZhbHVlLWVjbWFzY3JpcHQvZGF0YS9tYXBwaW5ncy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2Rldmxvb3BzL0Rlc2t0b3Avd2ViL3JlZmxleC1wcm9qZWN0cy9ub2RlX21vZHVsZXMvcmVnZXhwdS1jb3JlL2RhdGEvaXUtbWFwcGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9kZXZsb29wcy9EZXNrdG9wL3dlYi9yZWZsZXgtcHJvamVjdHMvbm9kZV9tb2R1bGVzL3JlZ2V4cHUtY29yZS9kYXRhL2NoYXJhY3Rlci1jbGFzcy1lc2NhcGUtc2V0cy5qcyJdLCJuYW1lcyI6WyJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwicHJlZml4IiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIkVycm9yIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiZ2V0VGhlbWUiLCJvdXRlclRoZW1lIiwidGhlbWUiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfb2JqZWN0U3ByZWFkIiwiY3JlYXRlQ2FjaGVXaXRoVGhlbWUiLCJUaGVtZVByb3ZpZGVyIiwicHJvcHMiLCJDb25zdW1lciIsIlByb3ZpZGVyIiwidmFsdWUiLCJjaGlsZHJlbiIsIndpdGhUaGVtZSIsIkNvbXBvbmVudCIsImNvbXBvbmVudE5hbWUiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJXaXRoVGhlbWUiLCJyZWYiLCJ1c2VUaGVtZSIsInVzZUNvbnRleHQiLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJjaGFyQXQiLCJzcGxpY2VPbmUiLCJsaXN0IiwiaW5kZXgiLCJrIiwibiIsInBvcCIsInRvIiwiZnJvbSIsInVuZGVmaW5lZCIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwic3BsaXQiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImNvbmNhdCIsImxhc3QiLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0IiwicmVzdWx0Iiwiam9pbiIsInN1YnN0ciIsIm9iaiIsInZhbHVlT2YiLCJjYWxsIiwidmFsdWVFcXVhbCIsImEiLCJiIiwiQXJyYXkiLCJpc0FycmF5IiwiZXZlcnkiLCJpdGVtIiwiYVZhbHVlIiwiYlZhbHVlIiwiYXNzaWduIiwiYWRkTGVhZGluZ1NsYXNoIiwicGF0aCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsInRvTG93ZXJDYXNlIiwiaW5kZXhPZiIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwic2xpY2UiLCJjcmVhdGVQYXRoIiwibG9jYXRpb24iLCJzZWFyY2giLCJoYXNoIiwiY3JlYXRlTG9jYXRpb24iLCJzdGF0ZSIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiZSIsIlVSSUVycm9yIiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiYWN0aW9uIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwiYXBwZW5kTGlzdGVuZXIiLCJmbiIsImlzQWN0aXZlIiwibGlzdGVuZXIiLCJub3RpZnlMaXN0ZW5lcnMiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiUG9wU3RhdGVFdmVudCIsIkhhc2hDaGFuZ2VFdmVudCIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsInVhIiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl9yZWYiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJzZXRTdGF0ZSIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiZXZlbnQiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzQmxvY2tlZCIsImhyZWYiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2UiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hDaGFuZ2VFdmVudCQxIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwidXJsIiwiZ2V0SGFzaFBhdGgiLCJzdWJzdHJpbmciLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImJhc2VUYWciLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIm1pbiIsIm1heCIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwibWFwIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsInNwbGljZSIsImNhbkdvIiwibW9kdWxlIiwiZXhwb3J0cyIsImciLCJ0aGlzIiwiRnVuY3Rpb24iLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsInBsYWluIiwiY29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzdHlsZXMiLCJ0eXBlcyIsInN0eWxlIiwiZm9udFN0eWxlIiwiZm9udFdlaWdodCIsIm9wYWNpdHkiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZXh0ZW5kcyIsImhhc093blByb3BlcnR5IiwiaW5oZXJpdHMiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiQ29kZUVkaXRvciIsIl9Db21wb25lbnQiLCJfdGVtcCIsIl90aGlzIiwiY29kZSIsInVwZGF0ZUNvbnRlbnQiLCJvbkNoYW5nZSIsImhpZ2hsaWdodENvZGUiLCJQcmlzbSIsImxhbmd1YWdlIiwidG9rZW5zIiwiZ2V0TGluZVByb3BzIiwiZ2V0VG9rZW5Qcm9wcyIsImxpbmUiLCJ0b2tlbiIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsInByZXZDb2RlUHJvcCIsInJlbmRlciIsInRoZW1lJCQxIiwicmVzdCIsImJhc2VUaGVtZSIsInBhZGRpbmciLCJoaWdobGlnaHQiLCJvblZhbHVlQ2hhbmdlIiwid2hpdGVTcGFjZSIsImZvbnRGYW1pbHkiLCJMaXZlQ29udGV4dCIsIl9wb2x5Iiwib3B0cyIsIm9iamVjdEFzc2lnbiIsInRyYW5zZm9ybXMiLCJkYW5nZXJvdXNGb3JPZiIsImRhbmdlcm91c1RhZ2dlZFRlbXBsYXRlU3RyaW5nIiwidHJhbnNmb3JtJDEiLCJlcnJvckJvdW5kYXJ5IiwiRWxlbWVudCIsImVycm9yQ2FsbGJhY2siLCJFcnJvckJvdW5kYXJ5IiwiY29tcG9uZW50RGlkQ2F0Y2giLCJlcnJvciIsImV2YWxDb2RlIiwic2NvcGUiLCJzY29wZUtleXMiLCJzY29wZVZhbHVlcyIsImJpbmQiLCJnZW5lcmF0ZUVsZW1lbnQiLCJfcmVmJGNvZGUiLCJfcmVmJHNjb3BlIiwiY29kZVRyaW1tZWQiLCJ0cmltIiwidHJhbnNmb3JtZWQiLCJyZW5kZXJFbGVtZW50QXN5bmMiLCJfcmVmMiIsInJlc3VsdENhbGxiYWNrIiwiX3JlZjIkY29kZSIsIl9yZWYyJHNjb3BlIiwidGVzdCIsIlN5bnRheEVycm9yIiwiZWxlbWVudCIsIkxpdmVQcm92aWRlciIsIl90aGlzJHByb3BzIiwidHJhbnNmb3JtQ29kZSIsIm5vSW5saW5lIiwidHJhbnNwaWxlIiwib25FcnJvciIsIl9yZWYkbm9JbmxpbmUiLCJpbnB1dCIsImVyciIsInJlbmRlckVsZW1lbnQiLCJ1bnNhZmVXcmFwcGVyRXJyb3IiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldkNvZGUiLCJwcmV2U2NvcGUiLCJwcmV2Tm9JbmxpbmUiLCJwcmV2VHJhbnNmb3JtQ29kZSIsIl9wcm9wczIiLCJfcHJvcHMzIiwiZGlzYWJsZWQiLCJMaXZlRWRpdG9yIiwiTGl2ZUVycm9yIiwiTGl2ZVByZXZpZXciLCJDb21wb25lbnQkJDEiLCJkZWZhdWx0UHJvcHMiLCJfZGVmaW5lUHJvcGVydHkiLCJfb2JqZWN0U3ByZWFkMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInNvdXJjZVN5bWJvbEtleXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk1EWENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidXNlTURYQ29tcG9uZW50cyIsImNvbXBvbmVudHMiLCJjb250ZXh0Q29tcG9uZW50cyIsImFsbENvbXBvbmVudHMiLCJNRFhQcm92aWRlciIsIkRFRkFVTFRTIiwiaW5saW5lQ29kZSIsIndyYXBwZXIiLCJGcmFnbWVudCIsIk1EWENyZWF0ZUVsZW1lbnQiLCJmb3J3YXJkUmVmIiwicHJvcENvbXBvbmVudHMiLCJtZHhUeXBlIiwib3JpZ2luYWxUeXBlIiwicGFyZW50TmFtZSIsImV0YyIsInR5cGUiLCJhcmdzTGVuZ3RoIiwiY3JlYXRlRWxlbWVudEFyZ0FycmF5IiwibmV3UHJvcHMiLCJnbG9iYWwiLCJfX2ciLCJjb3JlIiwidmVyc2lvbiIsIl9fZSIsImdldCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsImluc2VydFdpdGhvdXRTY29waW5nIiwiY2FjaGUiLCJzZXJpYWxpemVkIiwiaW5zZXJ0ZWQiLCJpbnNlcnQiLCJzaGVldCIsIm1lcmdlIiwicmVnaXN0ZXJlZCIsImNzcyIsImNsYXNzTmFtZSIsInJlZ2lzdGVyZWRTdHlsZXMiLCJyYXdDbGFzc05hbWUiLCJjbGFzc25hbWVzIiwiY2xzIiwiYXJnIiwidG9BZGQiLCJfY3JlYXRlRW1vdGlvbiIsIm9wdGlvbnMiLCJzcGVlZHkiLCJpc1NwZWVkeSIsImNvbXBhdCIsImN4IiwiX2xlbjQiLCJfa2V5NCIsImluamVjdEdsb2JhbCIsIl9sZW4zIiwiX2tleTMiLCJrZXlmcmFtZXMiLCJfbGVuMiIsIl9rZXkyIiwiYW5pbWF0aW9uIiwiaHlkcmF0ZSIsImlkcyIsImZsdXNoIiwiZ2V0UmVnaXN0ZXJlZFN0eWxlcyIsIml0IiwiZXhlYyIsIkJyb3dzZXJSb3V0ZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwicmVzb2x2ZVRvTG9jYXRpb24iLCJub3JtYWxpemVUb0xvY2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0iLCJDIiwiTGlua0FuY2hvciIsImZvcndhcmRlZFJlZiIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJfb25DbGljayIsIm9uQ2xpY2siLCJleCIsInByZXZlbnREZWZhdWx0IiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiY29udGV4dCIsImZvcndhcmRSZWZTaGltJDEiLCJmb3J3YXJkUmVmJDEiLCJfcmVmJGFyaWFDdXJyZW50IiwiYXJpYUN1cnJlbnQiLCJfcmVmJGFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImV4YWN0IiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic2Vuc2l0aXZlIiwic3RyaWN0Iiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJtYXRjaCIsImpvaW5DbGFzc25hbWVzIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWxUaGlzIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJvbiIsImhhbmRsZXIiLCJvZmYiLCJoIiwic2V0IiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImRlZmF1bHRWYWx1ZSIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJlbWl0dGVyIiwiX3Byb3RvIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwieCIsInkiLCJpc1JlcXVpcmVkIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJnZXRWYWx1ZSIsIm9uVXBkYXRlIiwib2JzZXJ2ZWRCaXRzIiwiX3Byb3RvMiIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJmYWtlciIsIkxvcmVtcGl4ZWwiLCJVbnNwbGFzaCIsIkxvcmVtUGljc3VtIiwiaW1hZ2UiLCJ3aWR0aCIsImhlaWdodCIsInJhbmRvbWl6ZSIsImFycmF5RWxlbWVudCIsImF2YXRhciIsImludGVybmV0IiwiaW1hZ2VVcmwiLCJjYXRlZ29yeSIsImh0dHBzIiwicHJvdG9jb2wiLCJudW1iZXIiLCJhYnN0cmFjdCIsImFuaW1hbHMiLCJidXNpbmVzcyIsImNhdHMiLCJjaXR5IiwiZm9vZCIsIm5pZ2h0bGlmZSIsImZhc2hpb24iLCJwZW9wbGUiLCJuYXR1cmUiLCJzcG9ydHMiLCJ0ZWNobmljcyIsInRyYW5zcG9ydCIsImRhdGFVcmkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJsb3JlbXBpeGVsIiwidW5zcGxhc2giLCJsb3JlbXBpY3N1bSIsInByb3BJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInMiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImwiLCJkUCIsImNyZWF0ZURlc2MiLCJmIiwiYnl0ZUxlbmd0aCIsImI2NCIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0b0J5dGVBcnJheSIsInRtcCIsImFyciIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsImxlbiIsInJldkxvb2t1cCIsImNoYXJDb2RlQXQiLCJmcm9tQnl0ZUFycmF5IiwidWludDgiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJtYXhDaHVua0xlbmd0aCIsImxlbjIiLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsIlVpbnQ4QXJyYXkiLCJzdGFydCIsImVuZCIsIm51bSIsIm91dHB1dCIsInJlYWQiLCJidWZmZXIiLCJvZmZzZXQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsIm0iLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJkIiwiTmFOIiwiSW5maW5pdHkiLCJwb3ciLCJ3cml0ZSIsImMiLCJydCIsImFicyIsImlzTmFOIiwiZmxvb3IiLCJsb2ciLCJMTjIiLCIkZXhwb3J0IiwiUyIsIkYiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiSVNfUFJPVE8iLCJQIiwiSVNfQklORCIsIkIiLCJleHBQcm90byIsIlUiLCJXIiwiUiIsImlkIiwicHgiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJPIiwiQXR0cmlidXRlcyIsImlzT2JqZWN0IiwiaXMiLCJiaXRtYXAiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUT19TVFJJTkciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwic2FmZSIsImlzRnVuY3Rpb24iLCJhRnVuY3Rpb24iLCJ0aGF0IiwiU0hBUkVEIiwic3RvcmUiLCJtb2RlIiwiY29weXJpZ2h0IiwiREVTQ1JJUFRPUlMiLCJnZXRLZXlzIiwiZ09QUyIsInBJRSIsIklPYmplY3QiLCIkYXNzaWduIiwiQSIsIksiLCJUIiwiYUxlbiIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJqIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsInRvSU9iamVjdCIsImFycmF5SW5kZXhPZiIsIklFX1BST1RPIiwibmFtZXMiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsInRvSW50ZWdlciIsInNoYXJlZCIsInVpZCIsImRlZmluZWQiLCJjb2YiLCJjZWlsIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiUmVhY3QiLCJfX2VzTW9kdWxlIiwibmV3T2JqIiwiZGVmYXVsdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJLRVlDT0RFX1oiLCJLRVlDT0RFX0JSQUNLRVRTIiwiS0VZQ09ERV9RVU9URSIsIktFWUNPREVfQkFDS19RVU9URSIsIkhJU1RPUllfTElNSVQiLCJISVNUT1JZX1RJTUVfR0FQIiwiaXNXaW5kb3dzIiwicGxhdGZvcm0iLCJpc01hY0xpa2UiLCJFZGl0b3IiLCJjYXB0dXJlIiwiX3JlY29yZEN1cnJlbnRTdGF0ZSIsIl9pbnB1dCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiX3JlY29yZENoYW5nZSIsIl9nZXRMaW5lcyIsInRleHQiLCJwb3NpdGlvbiIsInJlY29yZCIsIm92ZXJ3cml0ZSIsIl90aGlzJF9oaXN0b3J5IiwiX2hpc3RvcnkiLCJzdGFjayIsImNvdW50IiwiZXh0cmFzIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsInJlIiwicHJldmlvdXMiLCJjdXJyZW50Iiwic3RhcnRzV2l0aCIsIl91cGRhdGVJbnB1dCIsIl9hcHBseUVkaXRzIiwiX3VuZG9FZGl0IiwiX3RoaXMkX2hpc3RvcnkyIiwiX3JlZG9FZGl0IiwiX3RoaXMkX2hpc3RvcnkzIiwiX2hhbmRsZUtleURvd24iLCJ0YWJTaXplIiwiaW5zZXJ0U3BhY2VzIiwiaWdub3JlVGFiS2V5Iiwib25LZXlEb3duIiwia2V5Q29kZSIsImJsdXIiLCJfZSR0YXJnZXQiLCJ0YWJDaGFyYWN0ZXIiLCJyZXBlYXQiLCJsaW5lc0JlZm9yZUNhcmV0Iiwic3RhcnRMaW5lIiwiZW5kTGluZSIsIm5leHRWYWx1ZSIsInN0YXJ0TGluZVRleHQiLCJfbGluZXNCZWZvcmVDYXJldCIsIl9zdGFydExpbmUiLCJfZW5kTGluZSIsIl9zdGFydExpbmVUZXh0IiwidXBkYXRlZFNlbGVjdGlvbiIsImhhc1NlbGVjdGlvbiIsImVuZHNXaXRoIiwiX3VwZGF0ZWRTZWxlY3Rpb24iLCJtYXRjaGVzIiwiaW5kZW50IiwiX3VwZGF0ZWRTZWxlY3Rpb24yIiwiY2hhcnMiLCJfaGFuZGxlQ2hhbmdlIiwiX2UkdGFyZ2V0MiIsIl9pbmhlcml0cyIsInRleHRhcmVhSWQiLCJhdXRvRm9jdXMiLCJmb3JtIiwibWF4TGVuZ3RoIiwibWluTGVuZ3RoIiwicGxhY2Vob2xkZXIiLCJyZWFkT25seSIsInJlcXVpcmVkIiwib25Gb2N1cyIsIm9uQmx1ciIsIm9uS2V5VXAiLCJjb250ZW50U3R5bGUiLCJwYWRkaW5nVG9wIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwiaGlnaGxpZ2h0ZWQiLCJjb250YWluZXIiLCJlZGl0b3IiLCJ0ZXh0YXJlYSIsImF1dG9DYXBpdGFsaXplIiwiYXV0b0NvbXBsZXRlIiwiYXV0b0NvcnJlY3QiLCJzcGVsbENoZWNrIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJzZXNzaW9uIiwidGV4dEFsaWduIiwiYm94U2l6aW5nIiwib3ZlcmZsb3ciLCJ0b3AiLCJsZWZ0IiwicmVzaXplIiwiTW96T3N4Rm9udFNtb290aGluZyIsIldlYmtpdEZvbnRTbW9vdGhpbmciLCJXZWJraXRUZXh0RmlsbENvbG9yIiwicG9pbnRlckV2ZW50cyIsIm1hcmdpbiIsImJvcmRlciIsImJhY2tncm91bmQiLCJkaXNwbGF5IiwiZm9udFNpemUiLCJmb250VmFyaWFudExpZ2F0dXJlcyIsImxldHRlclNwYWNpbmciLCJsaW5lSGVpZ2h0IiwidGV4dEluZGVudCIsInRleHRSZW5kZXJpbmciLCJ0ZXh0VHJhbnNmb3JtIiwid29yZEJyZWFrIiwib3ZlcmZsb3dXcmFwIiwiX3JlYWN0MiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfaW1wbGVtZW50YXRpb24yIiwiZ2VuZXJhdGUiLCJwYXJzZSIsInJlZ2VuZXJhdGUiLCJ1bmljb2RlTWF0Y2hQcm9wZXJ0eSIsInVuaWNvZGVNYXRjaFByb3BlcnR5VmFsdWUiLCJpdU1hcHBpbmdzIiwiRVNDQVBFX1NFVFMiLCJVTklDT0RFX1NFVCIsImFkZFJhbmdlIiwiRE9UX1NFVF9VTklDT0RFIiwiY2xvbmUiLCJyZW1vdmUiLCJnZXRDaGFyYWN0ZXJDbGFzc0VzY2FwZVNldCIsImNoYXJhY3RlciIsInVuaWNvZGUiLCJpZ25vcmVDYXNlIiwiVU5JQ09ERV9JR05PUkVfQ0FTRSIsIlVOSUNPREUiLCJSRUdVTEFSIiwiZ2V0VW5pY29kZVByb3BlcnR5VmFsdWVTZXQiLCJwcm9wZXJ0eSIsImV4Y2VwdGlvbiIsImdldFVuaWNvZGVQcm9wZXJ0eUVzY2FwZVNldCIsImlzTmVnYXRpdmUiLCJmaXJzdFBhcnQiLCJoYW5kbGVMb25lVW5pY29kZVByb3BlcnR5TmFtZU9yVmFsdWUiLCJpdUFkZFJhbmdlIiwiZm9sZGVkIiwiY2FzZUZvbGQiLCJhZGQiLCJ1cGRhdGUiLCJwYXR0ZXJuIiwidHJlZSIsImNvbmZpZyIsInVzZVVuaWNvZGVGbGFnIiwid3JhcCIsImNvZGVQb2ludCIsInVwZGF0ZU5hbWVkUmVmZXJlbmNlIiwibWF0Y2hJbmRleCIsInByb2Nlc3NUZXJtIiwicmVnZW5lcmF0ZU9wdGlvbnMiLCJncm91cHMiLCJ1c2VEb3RBbGxGbGFnIiwiZG90QWxsIiwiY2hhcmFjdGVyQ2xhc3NJdGVtIiwiYm9keSIsIm5lZ2F0aXZlIiwicHJvY2Vzc0NoYXJhY3RlckNsYXNzIiwidW5pY29kZVByb3BlcnR5RXNjYXBlIiwiYmVoYXZpb3IiLCJsYXN0SW5kZXgiLCJuYW1lZEdyb3VwIiwib25OYW1lZEdyb3VwIiwidW5tYXRjaGVkUmVmZXJlbmNlcyIsInJlZmVyZW5jZSIsInRlcm0iLCJmbGFncyIsImluY2x1ZGVzIiwicmVnanNwYXJzZXJGZWF0dXJlcyIsImxvb2tiZWhpbmQiLCJzdXBwb3J0RG90QWxsRmxhZyIsImRvdEFsbEZsYWciLCJ1bm1hdGNoZWRSZWZlcmVuY2VzTmFtZXMiLCJhc3NlcnROb1VubWF0Y2hlZFJlZmVyZW5jZXMiLCJjaGFyVG9JbnRlZ2VyIiwiZW5jb2RlIiwiZGVjb2RlZCIsInNvdXJjZUZpbGVJbmRleCIsInNvdXJjZUNvZGVMaW5lIiwic291cmNlQ29kZUNvbHVtbiIsIm5hbWVJbmRleCIsIm1hcHBpbmdzIiwiZ2VuZXJhdGVkQ29kZUNvbHVtbiIsImxpbmVNYXBwaW5ncyIsIl9pIiwibGluZV8xIiwic2VnbWVudCIsInNlZ21lbnRNYXBwaW5ncyIsImVuY29kZUludGVnZXIiLCJjbGFtcGVkIiwiZ3VhcmQiLCJsb3ciLCJoaWdoIiwiQ29sb3JFcnJvciIsInN1cGVyIiwicGFyc2VUb1JnYmEiLCJub3JtYWxpemVkQ29sb3IiLCJuYW1lZENvbG9yUmVnZXgiLCJub3JtYWxpemVkQ29sb3JOYW1lIiwiY29tcHJlc3NlZENvbG9yTWFwIiwic3RyIiwibmFtZVRvSGV4IiwicmVkdWNlZEhleE1hdGNoIiwicmVkdWNlZEhleFJlZ2V4IiwicGFyc2VJbnQiLCJyIiwiaGV4TWF0Y2giLCJoZXhSZWdleCIsInJnYmFNYXRjaCIsInJnYmFSZWdleCIsInBhcnNlRmxvYXQiLCJoc2xhTWF0Y2giLCJoc2xhUmVnZXgiLCJoc2xUb1JnYiIsImNvbG9yVG9JbnQiLCJyZWR1Y2UiLCJhY2MiLCJuZXh0IiwicGFkU3RhcnQiLCJhbW91bnQiLCJSZWdFeHAiLCJyb3VuZENvbG9yIiwicm91bmQiLCJodWUiLCJzYXR1cmF0aW9uIiwibGlnaHRuZXNzIiwiaHVlUHJpbWUiLCJjaHJvbWEiLCJzZWNvbmRDb21wb25lbnQiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJsaWdodG5lc3NNb2RpZmljYXRpb24iLCJwYXJzZVRvSHNsYSIsImFscGhhIiwiaHNsYSIsInRvRml4ZWQiLCJkYXJrZW4iLCJnZXRMdW1pbmFuY2UiLCJjaGFubmVsIiwicmdiYSIsImxpZ2h0ZW4iLCJ0cmFuc3BhcmVudGl6ZSIsInJlYWRhYmxlQ29sb3JJc0JsYWNrIiwiY29weVRleHRUb0NsaXBib2FyZCIsInByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJjb250YWluIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwib3JpZ2luYWxSYW5nZSIsInJhbmdlQ291bnQiLCJnZXRSYW5nZUF0IiwiYXBwZW5kIiwic2VsZWN0IiwiaXNTdWNjZXNzIiwiZXhlY0NvbW1hbmQiLCJfIiwicmVtb3ZlQWxsUmFuZ2VzIiwiZm9jdXMiLCJmb3IiLCJwIiwicSIsInQiLCJ1IiwidiIsInciLCJ6IiwiRCIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJFIiwicmVmcyIsInVwZGF0ZXIiLCJIIiwiaXNSZWFjdENvbXBvbmVudCIsImZvcmNlVXBkYXRlIiwiSSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSiIsIkwiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCIkJHR5cGVvZiIsIl9vd25lciIsIlEiLCJrZXlQcmVmaXgiLCJmdW5jIiwiZG9uZSIsIlYiLCJlc2NhcGUiLCJhYSIsIlgiLCJOIiwiWSIsIloiLCJiYSIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIkNoaWxkcmVuIiwidG9BcnJheSIsIm9ubHkiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNsb25lRWxlbWVudCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtZW1vIiwidXNlQ2FsbGJhY2siLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX25vdyIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInBlcmZvcm1hbmNlIiwiY29uc29sZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJkZWxheSIsInRpbWVvdXQiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiTGF6eSIsIlBvcnRhbCIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsImtleXdvcmQiLCJ0ZWNobm9sb2d5Iiwib2JqZWN0cyIsImJ1aWxkaW5ncyIsImdyYXlzY2FsZSIsImltYWdlR3JheXNjYWxlIiwiaW1hZ2VCbHVycmVkIiwiaW1hZ2VSYW5kb21TZWVkZWQiLCJzZWVkIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIl9yZWFjdCIsIl9wcm9wVHlwZXMyIiwiX2d1ZDIiLCJfdGVtcDIiLCJ3YXJuaW5nIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50Iiwib2JqZWN0VHlwZXMiLCJyb290IiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImhhc0ZyZWVNb2R1bGUiLCJmcmVlR2xvYmFsIiwiZnJvbUNvZGVQb2ludCIsIk51bWJlciIsImlzRmluaXRlIiwiUmFuZ2VFcnJvciIsImhpZ2hTdXJyb2dhdGUiLCJsb3dTdXJyb2dhdGUiLCJhc3NlcnRUeXBlUmVnZXhNYXAiLCJhc3NlcnRUeXBlIiwiZXhwZWN0ZWQiLCJnZW5lcmF0b3JzIiwiZ2VuZXJhdGVTZXF1ZW5jZSIsImdlbmVyYXRvciIsInRlcm1zIiwia2luZCIsImdlbmVyYXRlQ2xhc3NBdG9tIiwiZ2VuZXJhdGVJZGVudGlmaWVyIiwiZ2VuZXJhdGVUZXJtIiwiYmVoYXZpb3VyIiwicXVhbnRpZmllciIsImdyZWVkeSIsImdlbmVyYXRlQXRvbSIsInRvVXBwZXJDYXNlIiwicmVnanNnZW4iLCJjYW5vbmljYWxQcm9wZXJ0aWVzIiwicHJvcGVydHlBbGlhc2VzIiwiU2V0IiwiTWFwIiwicHJvcGVydHlUb1ZhbHVlQWxpYXNlcyIsImFsaWFzVG9WYWx1ZSIsImNhbm9uaWNhbFZhbHVlIl0sIm1hcHBpbmdzIjoiMEZBQWUsU0FBU0EsRUFBZUMsRUFBVUMsR0FDL0NELEVBQVNFLFVBQVlDLE9BQU9DLE9BQU9ILEVBQVdDLFdBQzlDRixFQUFTRSxVQUFVRyxZQUFjTCxFQUNqQ0EsRUFBU00sVUFBWUwsRUFIdkIsbUMsZ0NDQUEsSUFDSU0sRUFBUyxtQkFXRSxJQVZmLFNBQW1CQyxFQUFXQyxHQUMxQixJQUFJRCxFQUlBLE1BQU0sSUFBSUUsTUFBTUgsSyxnQ0NQeEIsNExBT0EsU0FBU0ksRUFBUUMsRUFBUUMsR0FBa0IsSUFBSUMsRUFBT1gsT0FBT1csS0FBS0YsR0FBUyxHQUFJVCxPQUFPWSxzQkFBdUIsQ0FBRSxJQUFJQyxFQUFVYixPQUFPWSxzQkFBc0JILEdBQWFDLElBQWdCRyxFQUFVQSxFQUFRQyxRQUFPLFNBQVVDLEdBQU8sT0FBT2YsT0FBT2dCLHlCQUF5QlAsRUFBUU0sR0FBS0UsZUFBZ0JOLEVBQUtPLEtBQUtDLE1BQU1SLEVBQU1FLEdBQVksT0FBT0YsRUFJOVUsSUFBSVMsRUFBVyxTQUFrQkMsRUFBWUMsR0FDM0MsTUFBcUIsbUJBQVZBLEVBQ1NBLEVBQU1ELEdBSjVCLFNBQXVCRSxHQUFVLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJQyxVQUFVQyxPQUFRRixJQUFLLENBQUUsSUFBSUcsRUFBeUIsTUFBaEJGLFVBQVVELEdBQWFDLFVBQVVELEdBQUssR0FBUUEsRUFBSSxFQUFLaEIsRUFBUW1CLEdBQVEsR0FBTUMsU0FBUSxTQUFVQyxHQUFPLElBQWdCTixFQUFRTSxFQUFLRixFQUFPRSxPQUFzQjdCLE9BQU84QiwwQkFBNkI5QixPQUFPK0IsaUJBQWlCUixFQUFRdkIsT0FBTzhCLDBCQUEwQkgsSUFBbUJuQixFQUFRbUIsR0FBUUMsU0FBUSxTQUFVQyxHQUFPN0IsT0FBT2dDLGVBQWVULEVBQVFNLEVBQUs3QixPQUFPZ0IseUJBQXlCVyxFQUFRRSxPQUFlLE9BQU9OLEVBaUJwZlUsQ0FBYyxHQUFJWixFQUFZLEdBQUlDLElBR3ZDWSxFQUF1QixhQUFZLFNBQVViLEdBQy9DLE9BQU8sYUFBWSxTQUFVQyxHQUMzQixPQUFPRixFQUFTQyxFQUFZQyxTQUk1QmEsRUFBZ0IsU0FBdUJDLEdBQ3pDLE9BQU8sd0JBQWMsSUFBYUMsU0FBVSxNQUFNLFNBQVVmLEdBSzFELE9BSkljLEVBQU1kLFFBQVVBLElBQ2xCQSxFQUFRWSxFQUFxQlosRUFBckJZLENBQTRCRSxFQUFNZCxRQUdyQyx3QkFBYyxJQUFhZ0IsU0FBVSxDQUMxQ0MsTUFBT2pCLEdBQ05jLEVBQU1JLGNBS2IsU0FBU0MsRUFBVUMsR0FDakIsSUFBSUMsRUFBZ0JELEVBQVVFLGFBQWVGLEVBQVVHLE1BQVEsWUFZM0RDLEVBQVksc0JBVkgsU0FBZ0JWLEVBQU9XLEdBQ2xDLE9BQU8sd0JBQWMsSUFBYVYsU0FBVSxNQUFNLFNBQVVmLEdBQzFELE9BQU8sd0JBQWNvQixFQUFXLElBQVMsQ0FDdkNwQixNQUFPQSxFQUNQeUIsSUFBS0EsR0FDSlgsVUFPUCxPQURBVSxFQUFVRixZQUFjLGFBQWVELEVBQWdCLElBQ2hELElBQXFCRyxFQUFXSixHQUd6QyxTQUFTTSxJQUNQLE9BQU8sSUFBZUMsV0FBVyxPLHVQQ25FbkMsU0FBU0MsRUFBV0MsR0FDbEIsTUFBOEIsTUFBdkJBLEVBQVNDLE9BQU8sR0FJekIsU0FBU0MsRUFBVUMsRUFBTUMsR0FDdkIsSUFBSyxJQUFJL0IsRUFBSStCLEVBQU9DLEVBQUloQyxFQUFJLEVBQUdpQyxFQUFJSCxFQUFLNUIsT0FBUThCLEVBQUlDLEVBQUdqQyxHQUFLLEVBQUdnQyxHQUFLLEVBQ2xFRixFQUFLOUIsR0FBSzhCLEVBQUtFLEdBR2pCRixFQUFLSSxNQWdFUSxNQTVEZixTQUF5QkMsRUFBSUMsUUFDZEMsSUFBVEQsSUFBb0JBLEVBQU8sSUFFL0IsSUFrQklFLEVBbEJBQyxFQUFXSixHQUFNQSxFQUFHSyxNQUFNLE1BQVMsR0FDbkNDLEVBQWFMLEdBQVFBLEVBQUtJLE1BQU0sTUFBUyxHQUV6Q0UsRUFBVVAsR0FBTVQsRUFBV1MsR0FDM0JRLEVBQVlQLEdBQVFWLEVBQVdVLEdBQy9CUSxFQUFhRixHQUFXQyxFQVc1QixHQVRJUixHQUFNVCxFQUFXUyxHQUVuQk0sRUFBWUYsRUFDSEEsRUFBUXJDLFNBRWpCdUMsRUFBVVAsTUFDVk8sRUFBWUEsRUFBVUksT0FBT04sS0FHMUJFLEVBQVV2QyxPQUFRLE1BQU8sSUFHOUIsR0FBSXVDLEVBQVV2QyxPQUFRLENBQ3BCLElBQUk0QyxFQUFPTCxFQUFVQSxFQUFVdkMsT0FBUyxHQUN4Q29DLEVBQTRCLE1BQVRRLEdBQXlCLE9BQVRBLEdBQTBCLEtBQVRBLE9BRXBEUixHQUFtQixFQUlyQixJQURBLElBQUlTLEVBQUssRUFDQS9DLEVBQUl5QyxFQUFVdkMsT0FBUUYsR0FBSyxFQUFHQSxJQUFLLENBQzFDLElBQUlnRCxFQUFPUCxFQUFVekMsR0FFUixNQUFUZ0QsRUFDRm5CLEVBQVVZLEVBQVd6QyxHQUNILE9BQVRnRCxHQUNUbkIsRUFBVVksRUFBV3pDLEdBQ3JCK0MsS0FDU0EsSUFDVGxCLEVBQVVZLEVBQVd6QyxHQUNyQitDLEtBSUosSUFBS0gsRUFBWSxLQUFPRyxJQUFNQSxFQUFJTixFQUFVUSxRQUFRLE9BR2xETCxHQUNpQixLQUFqQkgsRUFBVSxJQUNSQSxFQUFVLElBQU9mLEVBQVdlLEVBQVUsS0FFeENBLEVBQVVRLFFBQVEsSUFFcEIsSUFBSUMsRUFBU1QsRUFBVVUsS0FBSyxLQUk1QixPQUZJYixHQUEwQyxNQUF0QlksRUFBT0UsUUFBUSxLQUFZRixHQUFVLEtBRXREQSxHQ3ZFVCxTQUFTLEVBQVFHLEdBQ2YsT0FBT0EsRUFBSUMsUUFBVUQsRUFBSUMsVUFBWTlFLE9BQU9ELFVBQVUrRSxRQUFRQyxLQUFLRixHQWtDdEQsTUEvQmYsU0FBU0csRUFBV0MsRUFBR0MsR0FFckIsR0FBSUQsSUFBTUMsRUFBRyxPQUFPLEVBR3BCLEdBQVMsTUFBTEQsR0FBa0IsTUFBTEMsRUFBVyxPQUFPLEVBRW5DLEdBQUlDLE1BQU1DLFFBQVFILEdBQ2hCLE9BQ0VFLE1BQU1DLFFBQVFGLElBQ2RELEVBQUV2RCxTQUFXd0QsRUFBRXhELFFBQ2Z1RCxFQUFFSSxPQUFNLFNBQVNDLEVBQU0vQixHQUNyQixPQUFPeUIsRUFBV00sRUFBTUosRUFBRTNCLE9BS2hDLEdBQWlCLGlCQUFOMEIsR0FBK0IsaUJBQU5DLEVBQWdCLENBQ2xELElBQUlLLEVBQVMsRUFBUU4sR0FDakJPLEVBQVMsRUFBUU4sR0FFckIsT0FBSUssSUFBV04sR0FBS08sSUFBV04sRUFBVUYsRUFBV08sRUFBUUMsR0FFckR4RixPQUFPVyxLQUFLWCxPQUFPeUYsT0FBTyxHQUFJUixFQUFHQyxJQUFJRyxPQUFNLFNBQVN4RCxHQUN6RCxPQUFPbUQsRUFBV0MsRUFBRXBELEdBQU1xRCxFQUFFckQsT0FJaEMsT0FBTyxHLFFDMUJULFNBQVM2RCxFQUFnQkMsR0FDdkIsTUFBMEIsTUFBbkJBLEVBQUt2QyxPQUFPLEdBQWF1QyxFQUFPLElBQU1BLEVBRS9DLFNBQVNDLEVBQWtCRCxHQUN6QixNQUEwQixNQUFuQkEsRUFBS3ZDLE9BQU8sR0FBYXVDLEVBQUtmLE9BQU8sR0FBS2UsRUFLbkQsU0FBU0UsRUFBY0YsRUFBTXZGLEdBQzNCLE9BSkYsU0FBcUJ1RixFQUFNdkYsR0FDekIsT0FBNEQsSUFBckR1RixFQUFLRyxjQUFjQyxRQUFRM0YsRUFBTzBGLGlCQUF1RSxJQUEvQyxNQUFNQyxRQUFRSixFQUFLdkMsT0FBT2hELEVBQU9zQixTQUczRnNFLENBQVlMLEVBQU12RixHQUFVdUYsRUFBS2YsT0FBT3hFLEVBQU9zQixRQUFVaUUsRUFFbEUsU0FBU00sRUFBbUJOLEdBQzFCLE1BQXdDLE1BQWpDQSxFQUFLdkMsT0FBT3VDLEVBQUtqRSxPQUFTLEdBQWFpRSxFQUFLTyxNQUFNLEdBQUksR0FBS1AsRUEwQnBFLFNBQVNRLEVBQVdDLEdBQ2xCLElBQUlqRCxFQUFXaUQsRUFBU2pELFNBQ3BCa0QsRUFBU0QsRUFBU0MsT0FDbEJDLEVBQU9GLEVBQVNFLEtBQ2hCWCxFQUFPeEMsR0FBWSxJQUd2QixPQUZJa0QsR0FBcUIsTUFBWEEsSUFBZ0JWLEdBQTZCLE1BQXJCVSxFQUFPakQsT0FBTyxHQUFhaUQsRUFBUyxJQUFNQSxHQUM1RUMsR0FBaUIsTUFBVEEsSUFBY1gsR0FBMkIsTUFBbkJXLEVBQUtsRCxPQUFPLEdBQWFrRCxFQUFPLElBQU1BLEdBQ2pFWCxFQUdULFNBQVNZLEVBQWVaLEVBQU1hLEVBQU8zRSxFQUFLNEUsR0FDeEMsSUFBSUwsRUFFZ0IsaUJBQVRULEdBRVRTLEVBdkNKLFNBQW1CVCxHQUNqQixJQUFJeEMsRUFBV3dDLEdBQVEsSUFDbkJVLEVBQVMsR0FDVEMsRUFBTyxHQUNQSSxFQUFZdkQsRUFBUzRDLFFBQVEsTUFFZCxJQUFmVyxJQUNGSixFQUFPbkQsRUFBU3lCLE9BQU84QixHQUN2QnZELEVBQVdBLEVBQVN5QixPQUFPLEVBQUc4QixJQUdoQyxJQUFJQyxFQUFjeEQsRUFBUzRDLFFBQVEsS0FPbkMsT0FMcUIsSUFBakJZLElBQ0ZOLEVBQVNsRCxFQUFTeUIsT0FBTytCLEdBQ3pCeEQsRUFBV0EsRUFBU3lCLE9BQU8sRUFBRytCLElBR3pCLENBQ0x4RCxTQUFVQSxFQUNWa0QsT0FBbUIsTUFBWEEsRUFBaUIsR0FBS0EsRUFDOUJDLEtBQWUsTUFBVEEsRUFBZSxHQUFLQSxHQWtCZk0sQ0FBVWpCLElBQ1phLE1BQVFBLFFBSVMzQyxLQUQxQnVDLEVBQVcsWUFBUyxHQUFJVCxJQUNYeEMsV0FBd0JpRCxFQUFTakQsU0FBVyxJQUVyRGlELEVBQVNDLE9BQ3VCLE1BQTlCRCxFQUFTQyxPQUFPakQsT0FBTyxLQUFZZ0QsRUFBU0MsT0FBUyxJQUFNRCxFQUFTQyxRQUV4RUQsRUFBU0MsT0FBUyxHQUdoQkQsRUFBU0UsS0FDcUIsTUFBNUJGLEVBQVNFLEtBQUtsRCxPQUFPLEtBQVlnRCxFQUFTRSxLQUFPLElBQU1GLEVBQVNFLE1BRXBFRixFQUFTRSxLQUFPLFFBR0p6QyxJQUFWMkMsUUFBMEMzQyxJQUFuQnVDLEVBQVNJLFFBQXFCSixFQUFTSSxNQUFRQSxJQUc1RSxJQUNFSixFQUFTakQsU0FBVzBELFVBQVVULEVBQVNqRCxVQUN2QyxNQUFPMkQsR0FDUCxNQUFJQSxhQUFhQyxTQUNULElBQUlBLFNBQVMsYUFBZVgsRUFBU2pELFNBQXhCLGlGQUViMkQsRUFvQlYsT0FoQklqRixJQUFLdUUsRUFBU3ZFLElBQU1BLEdBRXBCNEUsRUFFR0wsRUFBU2pELFNBRTZCLE1BQWhDaUQsRUFBU2pELFNBQVNDLE9BQU8sS0FDbENnRCxFQUFTakQsU0FBVyxFQUFnQmlELEVBQVNqRCxTQUFVc0QsRUFBZ0J0RCxXQUZ2RWlELEVBQVNqRCxTQUFXc0QsRUFBZ0J0RCxTQU1qQ2lELEVBQVNqRCxXQUNaaUQsRUFBU2pELFNBQVcsS0FJakJpRCxFQUVULFNBQVNZLEVBQWtCL0IsRUFBR0MsR0FDNUIsT0FBT0QsRUFBRTlCLFdBQWErQixFQUFFL0IsVUFBWThCLEVBQUVvQixTQUFXbkIsRUFBRW1CLFFBQVVwQixFQUFFcUIsT0FBU3BCLEVBQUVvQixNQUFRckIsRUFBRXBELE1BQVFxRCxFQUFFckQsS0FBTyxFQUFXb0QsRUFBRXVCLE1BQU90QixFQUFFc0IsT0FHN0gsU0FBU1MsSUFDUCxJQUFJQyxFQUFTLEtBaUNiLElBQUlDLEVBQVksR0E0QmhCLE1BQU8sQ0FDTEMsVUE1REYsU0FBbUJDLEdBR2pCLE9BREFILEVBQVNHLEVBQ0YsV0FDREgsSUFBV0csSUFBWUgsRUFBUyxRQXlEdENJLG9CQXJERixTQUE2QmxCLEVBQVVtQixFQUFRQyxFQUFxQkMsR0FJbEUsR0FBYyxNQUFWUCxFQUFnQixDQUNsQixJQUFJeEMsRUFBMkIsbUJBQVh3QyxFQUF3QkEsRUFBT2QsRUFBVW1CLEdBQVVMLEVBRWpELGlCQUFYeEMsRUFDMEIsbUJBQXhCOEMsRUFDVEEsRUFBb0I5QyxFQUFRK0MsR0FHNUJBLEdBQVMsR0FJWEEsR0FBb0IsSUFBWC9DLFFBR1grQyxHQUFTLElBbUNYQyxlQTdCRixTQUF3QkMsR0FDdEIsSUFBSUMsR0FBVyxFQUVmLFNBQVNDLElBQ0hELEdBQVVELEVBQUd4RyxXQUFNLEVBQVFNLFdBSWpDLE9BREEwRixFQUFVakcsS0FBSzJHLEdBQ1IsV0FDTEQsR0FBVyxFQUNYVCxFQUFZQSxFQUFVckcsUUFBTyxTQUFVd0UsR0FDckMsT0FBT0EsSUFBU3VDLE9BbUJwQkMsZ0JBZEYsV0FDRSxJQUFLLElBQUlDLEVBQU90RyxVQUFVQyxPQUFRc0csRUFBTyxJQUFJN0MsTUFBTTRDLEdBQU9FLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDL0VELEVBQUtDLEdBQVF4RyxVQUFVd0csR0FHekJkLEVBQVV2RixTQUFRLFNBQVVpRyxHQUMxQixPQUFPQSxFQUFTMUcsV0FBTSxFQUFRNkcsUUFZcEMsSUFBSUUsSUFBaUMsb0JBQVhDLFNBQTBCQSxPQUFPQyxXQUFZRCxPQUFPQyxTQUFTQyxlQUN2RixTQUFTQyxFQUFnQmhJLEVBQVNtSCxHQUNoQ0EsRUFBU1UsT0FBT0ksUUFBUWpJLElBd0MxQixJQUFJa0ksRUFBZ0IsV0FDaEJDLEVBQWtCLGFBRXRCLFNBQVNDLElBQ1AsSUFDRSxPQUFPUCxPQUFPUSxRQUFRbkMsT0FBUyxHQUMvQixNQUFPTSxHQUdQLE1BQU8sSUFTWCxTQUFTOEIsRUFBcUJ4RyxRQUNkLElBQVZBLElBQ0ZBLEVBQVEsSUFHVDhGLEdBQXNHLGFBQVUsR0FDakgsSUFyRElXLEVBcURBQyxFQUFnQlgsT0FBT1EsUUFDdkJJLElBckQrQixLQUQvQkYsRUFBS1YsT0FBT2EsVUFBVUMsV0FDbEJsRCxRQUFRLGdCQUF1RCxJQUEvQjhDLEVBQUc5QyxRQUFRLGlCQUEyRCxJQUFqQzhDLEVBQUc5QyxRQUFRLG1CQUFxRCxJQUExQjhDLEVBQUc5QyxRQUFRLFlBQXFELElBQWpDOEMsRUFBRzlDLFFBQVEsbUJBQ3RKb0MsT0FBT1EsU0FBVyxjQUFlUixPQUFPUSxRQXFEM0NPLEtBN0NzRCxJQUFuRGYsT0FBT2EsVUFBVUMsVUFBVWxELFFBQVEsWUE4Q3RDb0QsRUFBUy9HLEVBQ1RnSCxFQUFzQkQsRUFBT0UsYUFDN0JBLE9BQXVDLElBQXhCRCxHQUF5Q0EsRUFDeERFLEVBQXdCSCxFQUFPM0Isb0JBQy9CQSxPQUFnRCxJQUExQjhCLEVBQW1DaEIsRUFBa0JnQixFQUMzRUMsRUFBbUJKLEVBQU9LLFVBQzFCQSxPQUFpQyxJQUFyQkQsRUFBOEIsRUFBSUEsRUFDOUNFLEVBQVdySCxFQUFNcUgsU0FBV3hELEVBQW1CUCxFQUFnQnRELEVBQU1xSCxXQUFhLEdBRXRGLFNBQVNDLEVBQWVDLEdBQ3RCLElBQUlDLEVBQU9ELEdBQWdCLEdBQ3ZCOUgsRUFBTStILEVBQUsvSCxJQUNYMkUsRUFBUW9ELEVBQUtwRCxNQUVicUQsRUFBbUIxQixPQUFPL0IsU0FJMUJULEVBSFdrRSxFQUFpQjFHLFNBQ25CMEcsRUFBaUJ4RCxPQUNuQndELEVBQWlCdkQsS0FJNUIsT0FESW1ELElBQVU5RCxFQUFPRSxFQUFjRixFQUFNOEQsSUFDbENsRCxFQUFlWixFQUFNYSxFQUFPM0UsR0FHckMsU0FBU2lJLElBQ1AsT0FBT0MsS0FBS0MsU0FBU0MsU0FBUyxJQUFJckYsT0FBTyxFQUFHNEUsR0FHOUMsSUFBSVUsRUFBb0JqRCxJQUV4QixTQUFTa0QsRUFBU0MsR0FDaEIsWUFBU3pCLEVBQVN5QixHQUVsQnpCLEVBQVFqSCxPQUFTb0gsRUFBY3BILE9BQy9Cd0ksRUFBa0JwQyxnQkFBZ0JhLEVBQVF2QyxTQUFVdUMsRUFBUXBCLFFBRzlELFNBQVM4QyxFQUFlQyxJQXBFMUIsU0FBbUNBLEdBQ2pDLFlBQXVCekcsSUFBaEJ5RyxFQUFNOUQsUUFBaUUsSUFBMUN3QyxVQUFVQyxVQUFVbEQsUUFBUSxVQXFFMUR3RSxDQUEwQkQsSUFDOUJFLEVBQVVkLEVBQWVZLEVBQU05RCxRQUdqQyxTQUFTaUUsSUFDUEQsRUFBVWQsRUFBZWhCLE1BRzNCLElBQUlnQyxHQUFlLEVBRW5CLFNBQVNGLEVBQVVwRSxHQUNqQixHQUFJc0UsRUFDRkEsR0FBZSxFQUNmUCxRQUNLLENBRUxELEVBQWtCNUMsb0JBQW9CbEIsRUFEekIsTUFDMkNvQixHQUFxQixTQUFVbUQsR0FDakZBLEVBQ0ZSLEVBQVMsQ0FDUDVDLE9BSk8sTUFLUG5CLFNBQVVBLElBU3BCLFNBQW1Cd0UsR0FDakIsSUFBSUMsRUFBYWxDLEVBQVF2QyxTQUlyQjBFLEVBQVVDLEVBQVFoRixRQUFROEUsRUFBV2hKLE1BQ3hCLElBQWJpSixJQUFnQkEsRUFBVSxHQUM5QixJQUFJRSxFQUFZRCxFQUFRaEYsUUFBUTZFLEVBQWEvSSxNQUMxQixJQUFmbUosSUFBa0JBLEVBQVksR0FDbEMsSUFBSUMsRUFBUUgsRUFBVUUsRUFFbEJDLElBQ0ZQLEdBQWUsRUFDZlEsRUFBR0QsSUFuQkNFLENBQVUvRSxPQXVCbEIsSUFBSWdGLEVBQWtCMUIsRUFBZWhCLEtBQ2pDcUMsRUFBVSxDQUFDSyxFQUFnQnZKLEtBRS9CLFNBQVN3SixFQUFXakYsR0FDbEIsT0FBT3FELEVBQVd0RCxFQUFXQyxHQXVFL0IsU0FBUzhFLEVBQUd6SCxHQUNWcUYsRUFBY29DLEdBQUd6SCxHQVduQixJQUFJNkgsRUFBZ0IsRUFFcEIsU0FBU0MsRUFBa0JOLEdBR0gsS0FGdEJLLEdBQWlCTCxJQUVvQixJQUFWQSxHQUN6QjlDLE9BQU9xRCxpQkFBaUJoRCxFQUFlNkIsR0FDbkNuQixHQUF5QmYsT0FBT3FELGlCQUFpQi9DLEVBQWlCZ0MsSUFDM0MsSUFBbEJhLElBQ1RuRCxPQUFPc0Qsb0JBQW9CakQsRUFBZTZCLEdBQ3RDbkIsR0FBeUJmLE9BQU9zRCxvQkFBb0JoRCxFQUFpQmdDLElBSTdFLElBQUlpQixHQUFZLEVBaUNoQixJQUFJL0MsRUFBVSxDQUNaakgsT0FBUW9ILEVBQWNwSCxPQUN0QjZGLE9BQVEsTUFDUm5CLFNBQVVnRixFQUNWQyxXQUFZQSxFQUNabkssS0FwSUYsU0FBY3lFLEVBQU1hLEdBRWxCLElBQUllLEVBQVMsT0FDVG5CLEVBQVdHLEVBQWVaLEVBQU1hLEVBQU9zRCxJQUFhbkIsRUFBUXZDLFVBQ2hFOEQsRUFBa0I1QyxvQkFBb0JsQixFQUFVbUIsRUFBUUMsR0FBcUIsU0FBVW1ELEdBQ3JGLEdBQUtBLEVBQUwsQ0FDQSxJQUFJZ0IsRUFBT04sRUFBV2pGLEdBQ2xCdkUsRUFBTXVFLEVBQVN2RSxJQUNmMkUsRUFBUUosRUFBU0ksTUFFckIsR0FBSXVDLEVBTUYsR0FMQUQsRUFBYzhDLFVBQVUsQ0FDdEIvSixJQUFLQSxFQUNMMkUsTUFBT0EsR0FDTixLQUFNbUYsR0FFTHRDLEVBQ0ZsQixPQUFPL0IsU0FBU3VGLEtBQU9BLE1BQ2xCLENBQ0wsSUFBSUUsRUFBWWQsRUFBUWhGLFFBQVE0QyxFQUFRdkMsU0FBU3ZFLEtBQzdDaUssRUFBV2YsRUFBUTdFLE1BQU0sRUFBRzJGLEVBQVksR0FDNUNDLEVBQVM1SyxLQUFLa0YsRUFBU3ZFLEtBQ3ZCa0osRUFBVWUsRUFDVjNCLEVBQVMsQ0FDUDVDLE9BQVFBLEVBQ1JuQixTQUFVQSxTQUtkK0IsT0FBTy9CLFNBQVN1RixLQUFPQSxPQXVHM0JJLFFBbEdGLFNBQWlCcEcsRUFBTWEsR0FFckIsSUFBSWUsRUFBUyxVQUNUbkIsRUFBV0csRUFBZVosRUFBTWEsRUFBT3NELElBQWFuQixFQUFRdkMsVUFDaEU4RCxFQUFrQjVDLG9CQUFvQmxCLEVBQVVtQixFQUFRQyxHQUFxQixTQUFVbUQsR0FDckYsR0FBS0EsRUFBTCxDQUNBLElBQUlnQixFQUFPTixFQUFXakYsR0FDbEJ2RSxFQUFNdUUsRUFBU3ZFLElBQ2YyRSxFQUFRSixFQUFTSSxNQUVyQixHQUFJdUMsRUFNRixHQUxBRCxFQUFja0QsYUFBYSxDQUN6Qm5LLElBQUtBLEVBQ0wyRSxNQUFPQSxHQUNOLEtBQU1tRixHQUVMdEMsRUFDRmxCLE9BQU8vQixTQUFTMkYsUUFBUUosT0FDbkIsQ0FDTCxJQUFJRSxFQUFZZCxFQUFRaEYsUUFBUTRDLEVBQVF2QyxTQUFTdkUsTUFDOUIsSUFBZmdLLElBQWtCZCxFQUFRYyxHQUFhekYsRUFBU3ZFLEtBQ3BEc0ksRUFBUyxDQUNQNUMsT0FBUUEsRUFDUm5CLFNBQVVBLFNBS2QrQixPQUFPL0IsU0FBUzJGLFFBQVFKLFFBdUU1QlQsR0FBSUEsRUFDSmUsT0EvREYsV0FDRWYsR0FBSSxJQStESmdCLFVBNURGLFdBQ0VoQixFQUFHLElBNERIaUIsTUF6Q0YsU0FBZWpGLFFBQ0UsSUFBWEEsSUFDRkEsR0FBUyxHQUdYLElBQUlrRixFQUFVbEMsRUFBa0I5QyxVQUFVRixHQU8xQyxPQUxLd0UsSUFDSEgsRUFBa0IsR0FDbEJHLEdBQVksR0FHUCxXQU1MLE9BTElBLElBQ0ZBLEdBQVksRUFDWkgsR0FBbUIsSUFHZGEsTUF3QlRDLE9BcEJGLFNBQWdCeEUsR0FDZCxJQUFJeUUsRUFBV3BDLEVBQWtCeEMsZUFBZUcsR0FFaEQsT0FEQTBELEVBQWtCLEdBQ1gsV0FDTEEsR0FBbUIsR0FDbkJlLE9BaUJKLE9BQU8zRCxFQUdULElBQUk0RCxFQUFvQixhQUNwQkMsRUFBaUIsQ0FDbkJDLFNBQVUsQ0FDUkMsV0FBWSxTQUFvQi9HLEdBQzlCLE1BQTBCLE1BQW5CQSxFQUFLdkMsT0FBTyxHQUFhdUMsRUFBTyxLQUFPQyxFQUFrQkQsSUFFbEVnSCxXQUFZLFNBQW9CaEgsR0FDOUIsTUFBMEIsTUFBbkJBLEVBQUt2QyxPQUFPLEdBQWF1QyxFQUFLZixPQUFPLEdBQUtlLElBR3JEaUgsUUFBUyxDQUNQRixXQUFZOUcsRUFDWitHLFdBQVlqSCxHQUVkbUgsTUFBTyxDQUNMSCxXQUFZaEgsRUFDWmlILFdBQVlqSCxJQUloQixTQUFTb0gsRUFBVUMsR0FDakIsSUFBSXJHLEVBQVlxRyxFQUFJaEgsUUFBUSxLQUM1QixPQUFzQixJQUFmVyxFQUFtQnFHLEVBQU1BLEVBQUk3RyxNQUFNLEVBQUdRLEdBRy9DLFNBQVNzRyxJQUdQLElBQUlyQixFQUFPeEQsT0FBTy9CLFNBQVN1RixLQUN2QmpGLEVBQVlpRixFQUFLNUYsUUFBUSxLQUM3QixPQUFzQixJQUFmVyxFQUFtQixHQUFLaUYsRUFBS3NCLFVBQVV2RyxFQUFZLEdBTzVELFNBQVN3RyxFQUFnQnZILEdBQ3ZCd0MsT0FBTy9CLFNBQVMyRixRQUFRZSxFQUFVM0UsT0FBTy9CLFNBQVN1RixNQUFRLElBQU1oRyxHQUdsRSxTQUFTd0gsRUFBa0IvSyxRQUNYLElBQVZBLElBQ0ZBLEVBQVEsSUFHVDhGLEdBQW1HLGFBQVUsR0FDOUcsSUFBSVksRUFBZ0JYLE9BQU9RLFFBRXZCUSxHQW5VR2hCLE9BQU9hLFVBQVVDLFVBQVVsRCxRQUFRLFdBbVU3QjNELEdBQ1RrSCxFQUF3QkgsRUFBTzNCLG9CQUMvQkEsT0FBZ0QsSUFBMUI4QixFQUFtQ2hCLEVBQWtCZ0IsRUFDM0U4RCxFQUFrQmpFLEVBQU9rRSxTQUN6QkEsT0FBK0IsSUFBcEJELEVBQTZCLFFBQVVBLEVBQ2xEM0QsRUFBV3JILEVBQU1xSCxTQUFXeEQsRUFBbUJQLEVBQWdCdEQsRUFBTXFILFdBQWEsR0FDbEY2RCxFQUF3QmQsRUFBZWEsR0FDdkNYLEVBQWFZLEVBQXNCWixXQUNuQ0MsRUFBYVcsRUFBc0JYLFdBRXZDLFNBQVNqRCxJQUNQLElBQUkvRCxFQUFPZ0gsRUFBV0ssS0FHdEIsT0FESXZELElBQVU5RCxFQUFPRSxFQUFjRixFQUFNOEQsSUFDbENsRCxFQUFlWixHQUd4QixJQUFJdUUsRUFBb0JqRCxJQUV4QixTQUFTa0QsRUFBU0MsR0FDaEIsWUFBU3pCLEVBQVN5QixHQUVsQnpCLEVBQVFqSCxPQUFTb0gsRUFBY3BILE9BQy9Cd0ksRUFBa0JwQyxnQkFBZ0JhLEVBQVF2QyxTQUFVdUMsRUFBUXBCLFFBRzlELElBQUltRCxHQUFlLEVBQ2Y2QyxFQUFhLEtBTWpCLFNBQVM5QyxJQUNQLElBTDRCeEYsRUFBR0MsRUFLM0JTLEVBQU9xSCxJQUNQUSxFQUFjZCxFQUFXL0csR0FFN0IsR0FBSUEsSUFBUzZILEVBRVhOLEVBQWdCTSxPQUNYLENBQ0wsSUFBSXBILEVBQVdzRCxJQUNYK0QsRUFBZTlFLEVBQVF2QyxTQUMzQixJQUFLc0UsSUFkd0J4RixFQWMyQmtCLEdBZDlCbkIsRUFjZ0J3SSxHQWJuQ3RLLFdBQWErQixFQUFFL0IsVUFBWThCLEVBQUVvQixTQUFXbkIsRUFBRW1CLFFBQVVwQixFQUFFcUIsT0FBU3BCLEVBQUVvQixNQWFMLE9BRW5FLEdBQUlpSCxJQUFlcEgsRUFBV0MsR0FBVyxPQUV6Q21ILEVBQWEsS0FLakIsU0FBbUJuSCxHQUNqQixHQUFJc0UsRUFDRkEsR0FBZSxFQUNmUCxRQUNLLENBQ0wsSUFBSTVDLEVBQVMsTUFDYjJDLEVBQWtCNUMsb0JBQW9CbEIsRUFBVW1CLEVBQVFDLEdBQXFCLFNBQVVtRCxHQUNqRkEsRUFDRlIsRUFBUyxDQUNQNUMsT0FBUUEsRUFDUm5CLFNBQVVBLElBU3BCLFNBQW1Cd0UsR0FDakIsSUFBSUMsRUFBYWxDLEVBQVF2QyxTQUlyQjBFLEVBQVU0QyxFQUFTQyxZQUFZeEgsRUFBVzBFLEtBQzdCLElBQWJDLElBQWdCQSxFQUFVLEdBQzlCLElBQUlFLEVBQVkwQyxFQUFTQyxZQUFZeEgsRUFBV3lFLEtBQzdCLElBQWZJLElBQWtCQSxFQUFZLEdBQ2xDLElBQUlDLEVBQVFILEVBQVVFLEVBRWxCQyxJQUNGUCxHQUFlLEVBQ2ZRLEVBQUdELElBbkJDRSxDQUFVL0UsT0FqQmRvRSxDQUFVcEUsSUF5Q2QsSUFBSVQsRUFBT3FILElBQ1BRLEVBQWNkLEVBQVcvRyxHQUN6QkEsSUFBUzZILEdBQWFOLEVBQWdCTSxHQUMxQyxJQUFJcEMsRUFBa0IxQixJQUNsQmdFLEVBQVcsQ0FBQ3ZILEVBQVdpRixJQXVFM0IsU0FBU0YsRUFBR3pILEdBRVZxRixFQUFjb0MsR0FBR3pILEdBV25CLElBQUk2SCxFQUFnQixFQUVwQixTQUFTQyxFQUFrQk4sR0FHSCxLQUZ0QkssR0FBaUJMLElBRW9CLElBQVZBLEVBQ3pCOUMsT0FBT3FELGlCQUFpQmUsRUFBbUI5QixHQUNoQixJQUFsQmEsR0FDVG5ELE9BQU9zRCxvQkFBb0JjLEVBQW1COUIsR0FJbEQsSUFBSWlCLEdBQVksRUFpQ2hCLElBQUkvQyxFQUFVLENBQ1pqSCxPQUFRb0gsRUFBY3BILE9BQ3RCNkYsT0FBUSxNQUNSbkIsU0FBVWdGLEVBQ1ZDLFdBbklGLFNBQW9CakYsR0FDbEIsSUFBSXdILEVBQVV4RixTQUFTeUYsY0FBYyxRQUNqQ2xDLEVBQU8sR0FNWCxPQUpJaUMsR0FBV0EsRUFBUUUsYUFBYSxVQUNsQ25DLEVBQU9tQixFQUFVM0UsT0FBTy9CLFNBQVN1RixPQUc1QkEsRUFBTyxJQUFNZSxFQUFXakQsRUFBV3RELEVBQVdDLEtBNEhyRGxGLEtBekhGLFNBQWN5RSxFQUFNYSxHQUVsQixJQUFJZSxFQUFTLE9BQ1RuQixFQUFXRyxFQUFlWixPQUFNOUIsT0FBV0EsRUFBVzhFLEVBQVF2QyxVQUNsRThELEVBQWtCNUMsb0JBQW9CbEIsRUFBVW1CLEVBQVFDLEdBQXFCLFNBQVVtRCxHQUNyRixHQUFLQSxFQUFMLENBQ0EsSUFBSWhGLEVBQU9RLEVBQVdDLEdBQ2xCb0gsRUFBY2QsRUFBV2pELEVBQVc5RCxHQUd4QyxHQUZrQnFILE1BQWtCUSxFQUVuQixDQUlmRCxFQUFhNUgsRUF4SXJCLFNBQXNCQSxHQUNwQndDLE9BQU8vQixTQUFTRSxLQUFPWCxFQXdJakJvSSxDQUFhUCxHQUNiLElBQUkzQixFQUFZNkIsRUFBU0MsWUFBWXhILEVBQVd3QyxFQUFRdkMsV0FDcEQ0SCxFQUFZTixFQUFTeEgsTUFBTSxFQUFHMkYsRUFBWSxHQUM5Q21DLEVBQVU5TSxLQUFLeUUsR0FDZitILEVBQVdNLEVBQ1g3RCxFQUFTLENBQ1A1QyxPQUFRQSxFQUNSbkIsU0FBVUEsU0FJWitELFNBZ0dKNEIsUUEzRkYsU0FBaUJwRyxFQUFNYSxHQUVyQixJQUFJZSxFQUFTLFVBQ1RuQixFQUFXRyxFQUFlWixPQUFNOUIsT0FBV0EsRUFBVzhFLEVBQVF2QyxVQUNsRThELEVBQWtCNUMsb0JBQW9CbEIsRUFBVW1CLEVBQVFDLEdBQXFCLFNBQVVtRCxHQUNyRixHQUFLQSxFQUFMLENBQ0EsSUFBSWhGLEVBQU9RLEVBQVdDLEdBQ2xCb0gsRUFBY2QsRUFBV2pELEVBQVc5RCxHQUN0QnFILE1BQWtCUSxJQU1sQ0QsRUFBYTVILEVBQ2J1SCxFQUFnQk0sSUFHbEIsSUFBSTNCLEVBQVk2QixFQUFTM0gsUUFBUUksRUFBV3dDLEVBQVF2QyxZQUNqQyxJQUFmeUYsSUFBa0I2QixFQUFTN0IsR0FBYWxHLEdBQzVDd0UsRUFBUyxDQUNQNUMsT0FBUUEsRUFDUm5CLFNBQVVBLFNBc0VkOEUsR0FBSUEsRUFDSmUsT0E3REYsV0FDRWYsR0FBSSxJQTZESmdCLFVBMURGLFdBQ0VoQixFQUFHLElBMERIaUIsTUF6Q0YsU0FBZWpGLFFBQ0UsSUFBWEEsSUFDRkEsR0FBUyxHQUdYLElBQUlrRixFQUFVbEMsRUFBa0I5QyxVQUFVRixHQU8xQyxPQUxLd0UsSUFDSEgsRUFBa0IsR0FDbEJHLEdBQVksR0FHUCxXQU1MLE9BTElBLElBQ0ZBLEdBQVksRUFDWkgsR0FBbUIsSUFHZGEsTUF3QlRDLE9BcEJGLFNBQWdCeEUsR0FDZCxJQUFJeUUsRUFBV3BDLEVBQWtCeEMsZUFBZUcsR0FFaEQsT0FEQTBELEVBQWtCLEdBQ1gsV0FDTEEsR0FBbUIsR0FDbkJlLE9BaUJKLE9BQU8zRCxFQUdULFNBQVNzRixFQUFNeEssRUFBR3lLLEVBQVlDLEdBQzVCLE9BQU9wRSxLQUFLcUUsSUFBSXJFLEtBQUtzRSxJQUFJNUssRUFBR3lLLEdBQWFDLEdBTzNDLFNBQVNHLEVBQW9CbE0sUUFDYixJQUFWQSxJQUNGQSxFQUFRLElBR1YsSUFBSStHLEVBQVMvRyxFQUNUb0YsRUFBc0IyQixFQUFPM0Isb0JBQzdCK0csRUFBd0JwRixFQUFPcUYsZUFDL0JBLE9BQTJDLElBQTFCRCxFQUFtQyxDQUFDLEtBQU9BLEVBQzVERSxFQUFzQnRGLEVBQU91RixhQUM3QkEsT0FBdUMsSUFBeEJELEVBQWlDLEVBQUlBLEVBQ3BEbEYsRUFBbUJKLEVBQU9LLFVBQzFCQSxPQUFpQyxJQUFyQkQsRUFBOEIsRUFBSUEsRUFDOUNXLEVBQW9CakQsSUFFeEIsU0FBU2tELEVBQVNDLEdBQ2hCLFlBQVN6QixFQUFTeUIsR0FFbEJ6QixFQUFRakgsT0FBU2lILEVBQVFnRyxRQUFRak4sT0FDakN3SSxFQUFrQnBDLGdCQUFnQmEsRUFBUXZDLFNBQVV1QyxFQUFRcEIsUUFHOUQsU0FBU3VDLElBQ1AsT0FBT0MsS0FBS0MsU0FBU0MsU0FBUyxJQUFJckYsT0FBTyxFQUFHNEUsR0FHOUMsSUFBSWpHLEVBQVEwSyxFQUFNUyxFQUFjLEVBQUdGLEVBQWU5TSxPQUFTLEdBQ3ZEaU4sRUFBVUgsRUFBZUksS0FBSSxTQUFVQyxHQUN6QyxPQUFtQ3RJLEVBQWVzSSxPQUFPaEwsRUFBakMsaUJBQVZnTCxFQUFzRC9FLElBQWdEK0UsRUFBTWhOLEtBQU9pSSxRQUcvSHVCLEVBQWFsRixFQXlDakIsU0FBUytFLEVBQUd6SCxHQUNWLElBQUlxTCxFQUFZYixFQUFNdEYsRUFBUXBGLE1BQVFFLEVBQUcsRUFBR2tGLEVBQVFnRyxRQUFRak4sT0FBUyxHQUVqRTBFLEVBQVd1QyxFQUFRZ0csUUFBUUcsR0FDL0I1RSxFQUFrQjVDLG9CQUFvQmxCLEVBRnpCLE1BRTJDb0IsR0FBcUIsU0FBVW1ELEdBQ2pGQSxFQUNGUixFQUFTLENBQ1A1QyxPQUxPLE1BTVBuQixTQUFVQSxFQUNWN0MsTUFBT3VMLElBS1QzRSxPQThCTixJQUFJeEIsRUFBVSxDQUNaakgsT0FBUWlOLEVBQVFqTixPQUNoQjZGLE9BQVEsTUFDUm5CLFNBQVV1SSxFQUFRcEwsR0FDbEJBLE1BQU9BLEVBQ1BvTCxRQUFTQSxFQUNUdEQsV0FBWUEsRUFDWm5LLEtBMUZGLFNBQWN5RSxFQUFNYSxHQUVsQixJQUFJZSxFQUFTLE9BQ1RuQixFQUFXRyxFQUFlWixFQUFNYSxFQUFPc0QsSUFBYW5CLEVBQVF2QyxVQUNoRThELEVBQWtCNUMsb0JBQW9CbEIsRUFBVW1CLEVBQVFDLEdBQXFCLFNBQVVtRCxHQUNyRixHQUFLQSxFQUFMLENBQ0EsSUFDSW1FLEVBRFluRyxFQUFRcEYsTUFDSSxFQUN4QndMLEVBQWNwRyxFQUFRZ0csUUFBUXpJLE1BQU0sR0FFcEM2SSxFQUFZck4sT0FBU29OLEVBQ3ZCQyxFQUFZQyxPQUFPRixFQUFXQyxFQUFZck4sT0FBU29OLEVBQVcxSSxHQUU5RDJJLEVBQVk3TixLQUFLa0YsR0FHbkIrRCxFQUFTLENBQ1A1QyxPQUFRQSxFQUNSbkIsU0FBVUEsRUFDVjdDLE1BQU91TCxFQUNQSCxRQUFTSSxTQXVFYmhELFFBbEVGLFNBQWlCcEcsRUFBTWEsR0FFckIsSUFBSWUsRUFBUyxVQUNUbkIsRUFBV0csRUFBZVosRUFBTWEsRUFBT3NELElBQWFuQixFQUFRdkMsVUFDaEU4RCxFQUFrQjVDLG9CQUFvQmxCLEVBQVVtQixFQUFRQyxHQUFxQixTQUFVbUQsR0FDaEZBLElBQ0xoQyxFQUFRZ0csUUFBUWhHLEVBQVFwRixPQUFTNkMsRUFDakMrRCxFQUFTLENBQ1A1QyxPQUFRQSxFQUNSbkIsU0FBVUEsU0EwRGQ4RSxHQUFJQSxFQUNKZSxPQW5DRixXQUNFZixHQUFJLElBbUNKZ0IsVUFoQ0YsV0FDRWhCLEVBQUcsSUFnQ0grRCxNQTdCRixTQUFleEwsR0FDYixJQUFJcUwsRUFBWW5HLEVBQVFwRixNQUFRRSxFQUNoQyxPQUFPcUwsR0FBYSxHQUFLQSxFQUFZbkcsRUFBUWdHLFFBQVFqTixRQTRCckR5SyxNQXpCRixTQUFlakYsR0FLYixZQUplLElBQVhBLElBQ0ZBLEdBQVMsR0FHSmdELEVBQWtCOUMsVUFBVUYsSUFxQm5DbUYsT0FsQkYsU0FBZ0J4RSxHQUNkLE9BQU9xQyxFQUFrQnhDLGVBQWVHLEtBbUIxQyxPQUFPYyxJLCtCQ2g1QlB1RyxFQUFPQyxRQUFVLEVBQVEsSyxpQkNIM0IsSUFBSUMsRUFHSkEsRUFBSSxXQUNILE9BQU9DLEtBREosR0FJSixJQUVDRCxFQUFJQSxHQUFLLElBQUlFLFNBQVMsY0FBYixHQUNSLE1BQU94SSxHQUVjLGlCQUFYcUIsU0FBcUJpSCxFQUFJakgsUUFPckMrRyxFQUFPQyxRQUFVQyxHLG1CQ0ZmRixFQUFPQyxRQUFVLEVBQVEsR0FBUixJLGdDQ2pCSixTQUFTSSxFQUE4QjVOLEVBQVE2TixHQUM1RCxHQUFjLE1BQVY3TixFQUFnQixNQUFPLEdBQzNCLElBRUlFLEVBQUtMLEVBRkxELEVBQVMsR0FDVGtPLEVBQWF6UCxPQUFPVyxLQUFLZ0IsR0FHN0IsSUFBS0gsRUFBSSxFQUFHQSxFQUFJaU8sRUFBVy9OLE9BQVFGLElBQ2pDSyxFQUFNNE4sRUFBV2pPLEdBQ2JnTyxFQUFTekosUUFBUWxFLElBQVEsSUFDN0JOLEVBQU9NLEdBQU9GLEVBQU9FLElBR3ZCLE9BQU9OLEVBWlQsbUMsZ0NDQUEsK09BUUlELEVBQVEsQ0FDVm9PLE1BQU8sQ0FDTEMsTUFBTyxVQUNQQyxnQkFBaUIsV0FFbkJDLE9BQVEsQ0FBQyxDQUNQQyxNQUFPLENBQUMsU0FBVSxVQUFXLFVBQVcsU0FDeENDLE1BQU8sQ0FDTEosTUFBTyxzQkFFUixDQUNERyxNQUFPLENBQUMsV0FBWSxNQUFPLFVBQVcsU0FBVSxXQUFZLFVBQzVEQyxNQUFPLENBQUVKLE1BQU8sdUJBQ2YsQ0FDREcsTUFBTyxDQUFDLFlBQWEsU0FBVSxPQUFRLFVBQVcsYUFDbERDLE1BQU8sQ0FDTEosTUFBTyxzQkFFUixDQUNERyxNQUFPLENBQUMsV0FBWSxTQUFVLE1BQU8sU0FBVSxXQUFZLGdCQUMzREMsTUFBTyxDQUNMSixNQUFPLHNCQUVSLENBQ0RHLE1BQU8sQ0FBQyxXQUNSQyxNQUFPLENBQ0xKLE1BQU8scUJBRVIsQ0FDREcsTUFBTyxDQUFDLFVBQ1JDLE1BQU8sQ0FDTEMsVUFBVyxXQUVaLENBQ0RGLE1BQU8sQ0FBQyxZQUFhLFFBQ3JCQyxNQUFPLENBQ0xFLFdBQVksU0FFYixDQUNESCxNQUFPLENBQUMsUUFBUyxhQUNqQkMsTUFBTyxDQUNMSixNQUFPLFNBRVIsQ0FDREcsTUFBTyxDQUFDLFNBQVUsYUFBYyxXQUNoQ0MsTUFBTyxDQUNMSixNQUFPLHVCQUVSLENBQ0RHLE1BQU8sQ0FBQyxjQUFlLFVBQ3ZCQyxNQUFPLENBQ0xHLFFBQVMsVUFLWEMsRUFBNEIsbUJBQVhDLFFBQW9ELGlCQUFwQkEsT0FBT0MsU0FBd0IsU0FBVXhMLEdBQzVGLGNBQWNBLEdBQ1osU0FBVUEsR0FDWixPQUFPQSxHQUF5QixtQkFBWHVMLFFBQXlCdkwsRUFBSTNFLGNBQWdCa1EsUUFBVXZMLElBQVF1TCxPQUFPclEsVUFBWSxnQkFBa0I4RSxHQWF2SHlMLEVBQWlCLFNBQVVDLEVBQVVDLEdBQ3ZDLEtBQU1ELGFBQW9CQyxHQUN4QixNQUFNLElBQUlDLFVBQVUsc0NBWXBCQyxFQUFXMVEsT0FBT3lGLFFBQVUsU0FBVWxFLEdBQ3hDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJQyxVQUFVQyxPQUFRRixJQUFLLENBQ3pDLElBQUlHLEVBQVNGLFVBQVVELEdBRXZCLElBQUssSUFBSUssS0FBT0YsRUFDVjNCLE9BQU9ELFVBQVU0USxlQUFlNUwsS0FBS3BELEVBQVFFLEtBQy9DTixFQUFPTSxHQUFPRixFQUFPRSxJQUszQixPQUFPTixHQUtMcVAsRUFBVyxTQUFVL1EsRUFBVUMsR0FDakMsR0FBMEIsbUJBQWZBLEdBQTRDLE9BQWZBLEVBQ3RDLE1BQU0sSUFBSTJRLFVBQVUsa0VBQW9FM1EsR0FHMUZELEVBQVNFLFVBQVlDLE9BQU9DLE9BQU9ILEdBQWNBLEVBQVdDLFVBQVcsQ0FDckVHLFlBQWEsQ0FDWHFDLE1BQU8xQyxFQUNQb0IsWUFBWSxFQUNaNFAsVUFBVSxFQUNWQyxjQUFjLEtBR2RoUixJQUFZRSxPQUFPK1EsZUFBaUIvUSxPQUFPK1EsZUFBZWxSLEVBQVVDLEdBQWNELEVBQVNNLFVBQVlMLElBV3pHa1IsRUFBMEIsU0FBVW5NLEVBQUtsRSxHQUMzQyxJQUFJWSxFQUFTLEdBRWIsSUFBSyxJQUFJQyxLQUFLcUQsRUFDUmxFLEVBQUtvRixRQUFRdkUsSUFBTSxHQUNsQnhCLE9BQU9ELFVBQVU0USxlQUFlNUwsS0FBS0YsRUFBS3JELEtBQy9DRCxFQUFPQyxHQUFLcUQsRUFBSXJELElBR2xCLE9BQU9ELEdBR0wwUCxFQUE0QixTQUFVQyxFQUFNbk0sR0FDOUMsSUFBS21NLEVBQ0gsTUFBTSxJQUFJQyxlQUFlLDZEQUczQixPQUFPcE0sR0FBeUIsaUJBQVRBLEdBQXFDLG1CQUFUQSxFQUE4Qm1NLEVBQVBuTSxHQUd4RXFNLEVBQWEsU0FBVUMsR0FHekIsU0FBU0QsSUFDUCxJQUFJRSxFQUFPQyxFQUVYakIsRUFBZWpCLEtBQU0rQixHQUVyQixJQUFLLElBQUlySixFQUFPdEcsVUFBVUMsT0FBUXNHLEVBQU83QyxNQUFNNEMsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMzRUQsRUFBS0MsR0FBUXhHLFVBQVV3RyxHQUd6QixPQUFlcUosRUFBU0MsRUFBUU4sRUFBMEI1QixLQUFNZ0MsRUFBV3RNLEtBQUs1RCxNQUFNa1EsRUFBWSxDQUFDaEMsTUFBTWhMLE9BQU8yRCxLQUFpQnVKLEVBQU0vSyxNQUFRLENBQzdJZ0wsS0FBTSxJQUNMRCxFQUFNRSxjQUFnQixTQUFVRCxHQUNqQ0QsRUFBTXBILFNBQVMsQ0FBRXFILEtBQU1BLElBQVEsV0FDekJELEVBQU1uUCxNQUFNc1AsVUFDZEgsRUFBTW5QLE1BQU1zUCxTQUFTSCxFQUFNL0ssTUFBTWdMLFVBR3BDRCxFQUFNSSxjQUFnQixTQUFVSCxHQUNqQyxPQUFPLElBQU1uSixjQUNYLElBQ0EsQ0FDRXVKLE1BQU8sSUFDUEosS0FBTUEsRUFDTmxRLE1BQU9pUSxFQUFNblAsTUFBTWQsT0FBU0EsRUFDNUJ1USxTQUFVTixFQUFNblAsTUFBTXlQLFdBRXhCLFNBQVVqSSxHQUNSLElBQUlrSSxFQUFTbEksRUFBS2tJLE9BQ2RDLEVBQWVuSSxFQUFLbUksYUFDcEJDLEVBQWdCcEksRUFBS29JLGNBQ3pCLE9BQU8sSUFBTTNKLGNBQ1gsV0FDQSxLQUNBeUosRUFBT2xELEtBQUksU0FBVXFELEVBQU16USxHQUN6QixPQUVFLElBQU02RyxjQUNKLE1BQ0EwSixFQUFhLENBQUVFLEtBQU1BLEVBQU1wUSxJQUFLTCxJQUNoQ3lRLEVBQUtyRCxLQUFJLFNBQVVzRCxFQUFPclEsR0FDeEIsT0FFRSxJQUFNd0csY0FBYyxPQUFRMkosRUFBYyxDQUFFRSxNQUFPQSxFQUFPclEsSUFBS0EsaUJBU3RFb1AsRUFBMEJNLEVBQWxDRCxHQXFDTCxPQTFGQVYsRUFBU1EsRUFBWUMsR0F3RHJCRCxFQUFXZSx5QkFBMkIsU0FBa0MvUCxFQUFPb0UsR0FDN0UsT0FBSXBFLEVBQU1vUCxPQUFTaEwsRUFBTTRMLGFBQ2hCLENBQUVaLEtBQU1wUCxFQUFNb1AsS0FBTVksYUFBY2hRLEVBQU1vUCxNQUcxQyxNQUdUSixFQUFXclIsVUFBVXNTLE9BQVMsV0FFNUIsSUFBSWxKLEVBQVNrRyxLQUFLak4sTUFDZDJOLEVBQVE1RyxFQUFPNEcsTUFJZnVDLEdBSFFuSixFQUFPcUksS0FDSnJJLEVBQU91SSxTQUNQdkksRUFBTzBJLFNBQ1AxSSxFQUFPN0gsT0FDbEJpUixFQUFPdkIsRUFBd0I3SCxFQUFRLENBQUMsUUFBUyxPQUFRLFdBQVksV0FBWSxVQUNqRnFJLEVBQU9uQyxLQUFLN0ksTUFBTWdMLEtBR2xCZ0IsRUFBWUYsR0FBd0MsV0FBNUJuQyxFQUFRbUMsRUFBUzVDLE9BQXNCNEMsRUFBUzVDLE1BQVEsR0FFcEYsT0FBTyxJQUFNckgsY0FBYyxJQUFRcUksRUFBUyxDQUMxQ25PLE1BQU9pUCxFQUNQaUIsUUFBUyxHQUNUQyxVQUFXckQsS0FBS3NDLGNBQ2hCZ0IsY0FBZXRELEtBQUtvQyxjQUNwQjFCLE1BQU9XLEVBQVMsQ0FDZGtDLFdBQVksTUFDWkMsV0FBWSxhQUNYTCxFQUFXekMsSUFDYndDLEtBR0VuQixFQTNGUSxDQTRGZixhQUVFMEIsRUFBYyxJQUFjLElBRTVCQyxFQUFRLENBQUV0TixPQUFRLEVBQUFSLEdBRWxCK04sRUFBTyxDQUNUQyxhQUFjLGVBQ2RDLFdBQVksQ0FDVkMsZ0JBQWdCLEVBQ2hCQywrQkFBK0IsSUFJL0JDLEVBQWMsU0FBVzdCLEdBQzNCLE9BQU8sWUFBVUEsRUFBTXdCLEdBQU14QixNQUczQjhCLEVBQWdCLFNBQXVCQyxFQUFTQyxHQUNsRCxPQUFPLFNBQVVuQyxHQUdmLFNBQVNvQyxJQUVQLE9BREFuRCxFQUFlakIsS0FBTW9FLEdBQ2R4QyxFQUEwQjVCLEtBQU1nQyxFQUFXbFEsTUFBTWtPLEtBQU01TixZQVdoRSxPQWZBbVAsRUFBUzZDLEVBQWVwQyxHQU94Qm9DLEVBQWMxVCxVQUFVMlQsa0JBQW9CLFNBQTJCQyxHQUNyRUgsRUFBY0csSUFHaEJGLEVBQWMxVCxVQUFVc1MsT0FBUyxXQUMvQixNQUEwQixtQkFBWmtCLEVBQXlCLElBQU1sTCxjQUFja0wsRUFBUyxNQUFRQSxHQUd2RUUsRUFoQkYsQ0FpQkwsY0FHQUcsRUFBVyxTQUFrQnBDLEVBQU1xQyxHQUNyQyxJQUFJQyxFQUFZOVQsT0FBT1csS0FBS2tULEdBQ3hCRSxFQUFjRCxFQUFVbEYsS0FBSSxTQUFVL00sR0FDeEMsT0FBT2dTLEVBQU1oUyxNQUlmLE9BRFUsSUFBS3lOLFNBQVN2UCxVQUFVaVUsS0FBSzdTLE1BQU1tTyxTQUFVLENBQUMsTUFBTWpMLE9BQU8sQ0FBQyxRQUFTLFNBQVV5UCxFQUFXLENBQUN0QyxPQUMxRnJRLFdBQU0wQyxFQUFXLENBQUNrUCxFQUFPLEtBQU8xTyxPQUFPMFAsS0FHaERFLEVBQWtCLFNBQXlCckssRUFBTTRKLEdBQ25ELElBQUlVLEVBQVl0SyxFQUFLNEgsS0FDakJBLE9BQXFCM04sSUFBZHFRLEVBQTBCLEdBQUtBLEVBQ3RDQyxFQUFhdkssRUFBS2lLLE1BQ2xCQSxPQUF1QmhRLElBQWZzUSxFQUEyQixHQUFLQSxFQUd4Q0MsRUFBYzVDLEVBQUs2QyxPQUFPdEksUUFBUSxLQUFNLElBR3hDdUksRUFBY2pCLEVBQVksV0FBYWUsRUFBYyxLQUFLQyxPQUM5RCxPQUFPZixFQUFjTSxFQUFTVSxFQUFhVCxHQUFRTCxJQUdqRGUsRUFBcUIsU0FBNEJDLEVBQU9DLEVBQWdCakIsR0FHMUUsSUFBSWtCLEVBQWFGLEVBQU1oRCxLQUNuQkEsT0FBc0IzTixJQUFmNlEsRUFBMkIsR0FBS0EsRUFDdkNDLEVBQWNILEVBQU1YLE1BQ3BCQSxPQUF3QmhRLElBQWhCOFEsRUFBNEIsR0FBS0EsRUFVN0MsSUFBSyxjQUFjQyxLQUFLcEQsR0FDdEIsT0FBT2dDLEVBQWMsSUFBSXFCLFlBQVksOENBR3ZDakIsRUFBU1AsRUFBWTdCLEdBQU9kLEVBQVMsR0FBSW1ELEVBQU8sQ0FBRXhCLE9BWnJDLFNBQWdCeUMsUUFDSixJQUFaQSxFQUNUdEIsRUFBYyxJQUFJcUIsWUFBWSw0Q0FFOUJKLEVBQWVuQixFQUFjd0IsRUFBU3RCLFNBV3hDdUIsRUFBZSxTQUFVMUQsR0FHM0IsU0FBUzBELElBQ1AsSUFBSXpELEVBQU9DLEVBRVhqQixFQUFlakIsS0FBTTBGLEdBRXJCLElBQUssSUFBSWhOLEVBQU90RyxVQUFVQyxPQUFRc0csRUFBTzdDLE1BQU00QyxHQUFPRSxFQUFPLEVBQUdBLEVBQU9GLEVBQU1FLElBQzNFRCxFQUFLQyxHQUFReEcsVUFBVXdHLEdBR3pCLE9BQWVxSixFQUFTQyxFQUFRTixFQUEwQjVCLEtBQU1nQyxFQUFXdE0sS0FBSzVELE1BQU1rUSxFQUFZLENBQUNoQyxNQUFNaEwsT0FBTzJELEtBQWlCdUosRUFBTUcsU0FBVyxTQUFVRixHQUMxSixJQUFJd0QsRUFBY3pELEVBQU1uUCxNQUNwQnlSLEVBQVFtQixFQUFZbkIsTUFDcEJvQixFQUFnQkQsRUFBWUMsY0FDNUJDLEVBQVdGLEVBQVlFLFNBRTNCM0QsRUFBTTRELFVBQVUsQ0FBRTNELEtBQU1BLEVBQU1xQyxNQUFPQSxFQUFPb0IsY0FBZUEsRUFBZUMsU0FBVUEsS0FDbkYzRCxFQUFNNkQsUUFBVSxTQUFVekIsR0FDM0JwQyxFQUFNcEgsU0FBUyxDQUFFd0osTUFBT0EsRUFBTTFKLGNBQzdCc0gsRUFBTTRELFVBQVksU0FBVXZMLEdBQzdCLElBQUk0SCxFQUFPNUgsRUFBSzRILEtBQ1pxQyxFQUFRakssRUFBS2lLLE1BQ2JvQixFQUFnQnJMLEVBQUtxTCxjQUNyQkksRUFBZ0J6TCxFQUFLc0wsU0FDckJBLE9BQTZCclIsSUFBbEJ3UixHQUFzQ0EsRUFHakRDLEVBQVEsQ0FDVjlELEtBQU15RCxFQUFnQkEsRUFBY3pELEdBQVFBLEVBQzVDcUMsTUFBT0EsR0FHTEwsRUFBZ0IsU0FBdUIrQixHQUN6QyxPQUFPaEUsRUFBTXBILFNBQVMsQ0FBRTJLLGFBQVNqUixFQUFXOFAsTUFBTzRCLEVBQUl0TCxjQUVyRHVMLEVBQWdCLFNBQXVCVixHQUN6QyxPQUFPdkQsRUFBTXBILFNBQVN1RyxFQUFTLEdBQUlsSyxFQUFPLENBQUVzTyxRQUFTQSxNQUluRHRPLEVBQVEsQ0FBRWlQLHdCQUFvQjVSLEVBQVc4UCxXQUFPOVAsR0FFcEQsSUFDTXFSLEdBQ0YzRCxFQUFNcEgsU0FBU3VHLEVBQVMsR0FBSWxLLEVBQU8sQ0FBRXNPLFFBQVMsUUFDOUNQLEVBQW1CZSxFQUFPRSxFQUFlaEMsSUFFekNnQyxFQUFjdkIsRUFBZ0JxQixFQUFPOUIsSUFFdkMsTUFBT0csR0FDUHBDLEVBQU1wSCxTQUFTdUcsRUFBUyxHQUFJbEssRUFBTyxDQUFFbU4sTUFBT0EsRUFBTTFKLGdCQUUzQ2dILEVBQTBCTSxFQUFsQ0QsR0F3REwsT0E3R0FWLEVBQVNtRSxFQUFjMUQsR0F5RHZCMEQsRUFBYWhWLFVBQVUyViwwQkFBNEIsV0FDakQsSUFBSXZNLEVBQVNrRyxLQUFLak4sTUFDZG9QLEVBQU9ySSxFQUFPcUksS0FDZHFDLEVBQVExSyxFQUFPMEssTUFDZm9CLEVBQWdCOUwsRUFBTzhMLGNBQ3ZCQyxFQUFXL0wsRUFBTytMLFNBR3RCN0YsS0FBSzhGLFVBQVUsQ0FBRTNELEtBQU1BLEVBQU1xQyxNQUFPQSxFQUFPb0IsY0FBZUEsRUFBZUMsU0FBVUEsS0FHckZILEVBQWFoVixVQUFVNFYsbUJBQXFCLFNBQTRCbkIsR0FDdEUsSUFBSW9CLEVBQVdwQixFQUFNaEQsS0FDakJxRSxFQUFZckIsRUFBTVgsTUFDbEJpQyxFQUFldEIsRUFBTVUsU0FDckJhLEVBQW9CdkIsRUFBTVMsY0FDMUJlLEVBQVUzRyxLQUFLak4sTUFDZm9QLEVBQU93RSxFQUFReEUsS0FDZnFDLEVBQVFtQyxFQUFRbkMsTUFDaEJxQixFQUFXYyxFQUFRZCxTQUNuQkQsRUFBZ0JlLEVBQVFmLGNBRXhCekQsSUFBU29FLEdBQVkvQixJQUFVZ0MsR0FBYVgsSUFBYVksR0FBZ0JiLElBQWtCYyxHQUM3RjFHLEtBQUs4RixVQUFVLENBQUUzRCxLQUFNQSxFQUFNcUMsTUFBT0EsRUFBT29CLGNBQWVBLEVBQWVDLFNBQVVBLEtBSXZGSCxFQUFhaFYsVUFBVXNTLE9BQVMsV0FDOUIsSUFBSTRELEVBQVU1RyxLQUFLak4sTUFDZkksRUFBV3lULEVBQVF6VCxTQUNuQmdQLEVBQU95RSxFQUFRekUsS0FDZkssRUFBV29FLEVBQVFwRSxTQUNuQnZRLEVBQVEyVSxFQUFRM1UsTUFDaEI0VSxFQUFXRCxFQUFRQyxTQUd2QixPQUFPLElBQU03TixjQUNYeUssRUFBWXhRLFNBQ1osQ0FDRUMsTUFBT21PLEVBQVMsR0FBSXJCLEtBQUs3SSxNQUFPLENBQzlCZ0wsS0FBTUEsRUFDTkssU0FBVUEsRUFDVnZRLE1BQU9BLEVBQ1A0VSxTQUFVQSxFQUNWZCxRQUFTL0YsS0FBSytGLFFBQ2QxRCxTQUFVckMsS0FBS3FDLFlBR25CbFAsSUFJR3VTLEVBOUdVLENBK0dqQixhQVNGLFNBQVNvQixFQUFXL1QsR0FDbEIsT0FBTyxJQUFNaUcsY0FDWHlLLEVBQVl6USxTQUNaLE1BQ0EsU0FBVXVILEdBQ1IsSUFBSTRILEVBQU81SCxFQUFLNEgsS0FDWkssRUFBV2pJLEVBQUtpSSxTQUNoQnZRLEVBQVFzSSxFQUFLdEksTUFDYjRVLEVBQVd0TSxFQUFLc00sU0FDaEJ4RSxFQUFXOUgsRUFBSzhILFNBQ3BCLE9BQU8sSUFBTXJKLGNBQWMrSSxFQUFZVixFQUFTLENBQzlDcFAsTUFBT0EsRUFDUGtRLEtBQU1BLEVBQ05LLFNBQVVBLEVBQ1ZxRSxTQUFVQSxFQUNWeEUsU0FBVUEsR0FDVHRQLE9BS1QsU0FBU2dVLEVBQVVoVSxHQUNqQixPQUFPLElBQU1pRyxjQUNYeUssRUFBWXpRLFNBQ1osTUFDQSxTQUFVdUgsR0FDUixJQUFJK0osRUFBUS9KLEVBQUsrSixNQUNqQixPQUFPQSxFQUFRLElBQU10TCxjQUNuQixNQUNBakcsRUFDQXVSLEdBQ0UsUUFLVixTQUFTMEMsRUFBWXpNLEdBQ25CLElBQUkwTSxFQUFlMU0sRUFBS2xILFVBQ3BCNlAsRUFBT3ZCLEVBQXdCcEgsRUFBTSxDQUFDLGNBRTFDLE9BQU8sSUFBTXZCLGNBQ1hpTyxFQUNBL0QsRUFDQSxJQUFNbEssY0FDSnlLLEVBQVl6USxTQUNaLE1BQ0EsU0FBVW1TLEdBQ1IsSUFBSWpCLEVBQVVpQixFQUFNTSxRQUNwQixPQUFPdkIsR0FBVyxJQUFNbEwsY0FBY2tMLEVBQVMsVUF2RHZEd0IsRUFBYXdCLGFBQWUsQ0FDMUIvRSxLQUFNLEdBQ04wRCxVQUFVLEVBQ1ZyRCxTQUFVLE1BQ1ZxRSxVQUFVLEdBeURaRyxFQUFZRSxhQUFlLENBQ3pCN1QsVUFBVyxRLGdDQzNmYix3RkFFQSxTQUFTOFQsRUFBZ0IzUixFQUFLaEQsRUFBS1UsR0FZakMsT0FYSVYsS0FBT2dELEVBQ1Q3RSxPQUFPZ0MsZUFBZTZDLEVBQUtoRCxFQUFLLENBQzlCVSxNQUFPQSxFQUNQdEIsWUFBWSxFQUNaNlAsY0FBYyxFQUNkRCxVQUFVLElBR1poTSxFQUFJaEQsR0FBT1UsRUFHTnNDLEVBcUJULFNBQVNyRSxFQUFRQyxFQUFRQyxHQUN2QixJQUFJQyxFQUFPWCxPQUFPVyxLQUFLRixHQUV2QixHQUFJVCxPQUFPWSxzQkFBdUIsQ0FDaEMsSUFBSUMsRUFBVWIsT0FBT1ksc0JBQXNCSCxHQUN2Q0MsSUFBZ0JHLEVBQVVBLEVBQVFDLFFBQU8sU0FBVUMsR0FDckQsT0FBT2YsT0FBT2dCLHlCQUF5QlAsRUFBUU0sR0FBS0UsZUFFdEROLEVBQUtPLEtBQUtDLE1BQU1SLEVBQU1FLEdBR3hCLE9BQU9GLEVBR1QsU0FBUzhWLEVBQWVsVixHQUN0QixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUMsVUFBVUMsT0FBUUYsSUFBSyxDQUN6QyxJQUFJRyxFQUF5QixNQUFoQkYsVUFBVUQsR0FBYUMsVUFBVUQsR0FBSyxHQUUvQ0EsRUFBSSxFQUNOaEIsRUFBUVIsT0FBTzJCLElBQVMsR0FBTUMsU0FBUSxTQUFVQyxHQUM5QzJVLEVBQWdCalYsRUFBUU0sRUFBS0YsRUFBT0UsT0FFN0I3QixPQUFPOEIsMEJBQ2hCOUIsT0FBTytCLGlCQUFpQlIsRUFBUXZCLE9BQU84QiwwQkFBMEJILElBRWpFbkIsRUFBUVIsT0FBTzJCLElBQVNDLFNBQVEsU0FBVUMsR0FDeEM3QixPQUFPZ0MsZUFBZVQsRUFBUU0sRUFBSzdCLE9BQU9nQix5QkFBeUJXLEVBQVFFLE9BS2pGLE9BQU9OLEVBa0JULFNBQVNtVixFQUF5Qi9VLEVBQVE2TixHQUN4QyxHQUFjLE1BQVY3TixFQUFnQixNQUFPLEdBRTNCLElBRUlFLEVBQUtMLEVBRkxELEVBbEJOLFNBQXVDSSxFQUFRNk4sR0FDN0MsR0FBYyxNQUFWN04sRUFBZ0IsTUFBTyxHQUMzQixJQUVJRSxFQUFLTCxFQUZMRCxFQUFTLEdBQ1RrTyxFQUFhelAsT0FBT1csS0FBS2dCLEdBRzdCLElBQUtILEVBQUksRUFBR0EsRUFBSWlPLEVBQVcvTixPQUFRRixJQUNqQ0ssRUFBTTROLEVBQVdqTyxHQUNiZ08sRUFBU3pKLFFBQVFsRSxJQUFRLElBQzdCTixFQUFPTSxHQUFPRixFQUFPRSxJQUd2QixPQUFPTixFQU1NZ08sQ0FBOEI1TixFQUFRNk4sR0FJbkQsR0FBSXhQLE9BQU9ZLHNCQUF1QixDQUNoQyxJQUFJK1YsRUFBbUIzVyxPQUFPWSxzQkFBc0JlLEdBRXBELElBQUtILEVBQUksRUFBR0EsRUFBSW1WLEVBQWlCalYsT0FBUUYsSUFDdkNLLEVBQU04VSxFQUFpQm5WLEdBQ25CZ08sRUFBU3pKLFFBQVFsRSxJQUFRLEdBQ3hCN0IsT0FBT0QsVUFBVTZXLHFCQUFxQjdSLEtBQUtwRCxFQUFRRSxLQUN4RE4sRUFBT00sR0FBT0YsRUFBT0UsSUFJekIsT0FBT04sRUFHVCxJQUlJc1YsRUFBMEIsSUFBTUMsY0FBYyxJQVM5Q0MsRUFBbUIsU0FBMEJDLEdBQy9DLElBQUlDLEVBQW9CLElBQU1oVSxXQUFXNFQsR0FDckNLLEVBQWdCRCxFQU1wQixPQUpJRCxJQUNGRSxFQWpCb0IsbUJBaUJPRixFQUFjQSxFQUFXQyxHQUFxQlIsRUFBZUEsRUFBZSxHQUFJUSxHQUFvQkQsSUFHMUhFLEdBRUxDLEVBQWMsU0FBcUIvVSxHQUNyQyxJQUFJOFUsRUFBZ0JILEVBQWlCM1UsRUFBTTRVLFlBQzNDLE9BQW9CLElBQU0zTyxjQUFjd08sRUFBV3ZVLFNBQVUsQ0FDM0RDLE1BQU8yVSxHQUNOOVUsRUFBTUksV0FJUDRVLEVBQVcsQ0FDYkMsV0FBWSxPQUNaQyxRQUFTLFNBQWlCMU4sR0FDeEIsSUFBSXBILEVBQVdvSCxFQUFLcEgsU0FDcEIsT0FBb0IsSUFBTTZGLGNBQWMsSUFBTWtQLFNBQVUsR0FBSS9VLEtBRzVEZ1YsRUFBZ0MsSUFBTUMsWUFBVyxTQUFVclYsRUFBT1csR0FDcEUsSUFBSTJVLEVBQWlCdFYsRUFBTTRVLFdBQ3ZCVyxFQUFVdlYsRUFBTXVWLFFBQ2hCQyxFQUFleFYsRUFBTXdWLGFBQ3JCQyxFQUFhelYsRUFBTXlWLFdBQ25CQyxFQUFNcEIsRUFBeUJ0VSxFQUFPLENBQUMsYUFBYyxVQUFXLGVBQWdCLGVBRWhGNFUsRUFBYUQsRUFBaUJXLEdBQzlCSyxFQUFPSixFQUNQalYsRUFBWXNVLEVBQVcsR0FBRzNTLE9BQU93VCxFQUFZLEtBQUt4VCxPQUFPMFQsS0FBVWYsRUFBV2UsSUFBU1gsRUFBU1csSUFBU0gsRUFFN0csT0FBSUYsRUFDa0IsSUFBTXJQLGNBQWMzRixFQUFXK1QsRUFBZUEsRUFBZSxDQUMvRTFULElBQUtBLEdBQ0orVSxHQUFNLEdBQUksQ0FDWGQsV0FBWVUsS0FJSSxJQUFNclAsY0FBYzNGLEVBQVcrVCxFQUFlLENBQ2hFMVQsSUFBS0EsR0FDSitVLE9BR0wsU0FBU3pQLEVBQWUwUCxFQUFNM1YsR0FDNUIsSUFBSTRGLEVBQU92RyxVQUNQa1csRUFBVXZWLEdBQVNBLEVBQU11VixRQUU3QixHQUFvQixpQkFBVEksR0FBcUJKLEVBQVMsQ0FDdkMsSUFBSUssRUFBYWhRLEVBQUt0RyxPQUNsQnVXLEVBQXdCLElBQUk5UyxNQUFNNlMsR0FDdENDLEVBQXNCLEdBQUtULEVBQzNCLElBQUlVLEVBQVcsR0FFZixJQUFLLElBQUlyVyxLQUFPTyxFQUNWdU8sZUFBZTVMLEtBQUszQyxFQUFPUCxLQUM3QnFXLEVBQVNyVyxHQUFPTyxFQUFNUCxJQUkxQnFXLEVBQVNOLGFBQWVHLEVBQ3hCRyxFQUF1QixRQUFvQixpQkFBVEgsRUFBb0JBLEVBQU9KLEVBQzdETSxFQUFzQixHQUFLQyxFQUUzQixJQUFLLElBQUkxVyxFQUFJLEVBQUdBLEVBQUl3VyxFQUFZeFcsSUFDOUJ5VyxFQUFzQnpXLEdBQUt3RyxFQUFLeEcsR0FHbEMsT0FBTyxJQUFNNkcsY0FBY2xILE1BQU0sS0FBTThXLEdBR3pDLE9BQU8sSUFBTTVQLGNBQWNsSCxNQUFNLEtBQU02RyxHQTVCekN3UCxFQUFpQjVVLFlBQWMsb0IsaUJDcksvQixJQUFJdVYsRUFBU2pKLEVBQU9DLFFBQTJCLG9CQUFWaEgsUUFBeUJBLE9BQU80QixNQUFRQSxLQUN6RTVCLE9BQXdCLG9CQUFSK0ksTUFBdUJBLEtBQUtuSCxNQUFRQSxLQUFPbUgsS0FFM0Q1QixTQUFTLGNBQVRBLEdBQ2MsaUJBQVA4SSxNQUFpQkEsSUFBTUQsSSxpQkNMbEMsSUFBSUUsRUFBT25KLEVBQU9DLFFBQVUsQ0FBRW1KLFFBQVMsVUFDckIsaUJBQVBDLE1BQWlCQSxJQUFNRixJLG1CQ0FsQ25KLEVBQU9DLFNBQVcsRUFBUSxHQUFSLEVBQW9CLFdBQ3BDLE9BQStFLEdBQXhFblAsT0FBT2dDLGVBQWUsR0FBSSxJQUFLLENBQUV3VyxJQUFLLFdBQWMsT0FBTyxLQUFRdlQsTSxpQkNhNUVpSyxFQUFPQyxRQWZQLFNBQXlCdEssRUFBS2hELEVBQUtVLEdBWWpDLE9BWElWLEtBQU9nRCxFQUNUN0UsT0FBT2dDLGVBQWU2QyxFQUFLaEQsRUFBSyxDQUM5QlUsTUFBT0EsRUFDUHRCLFlBQVksRUFDWjZQLGNBQWMsRUFDZEQsVUFBVSxJQUdaaE0sRUFBSWhELEdBQU9VLEVBR05zQyxJLGdDQ1ZULElBQUk0VCxFQUFVLEVBQVEsSUFNbEJDLEVBQWdCLENBQ2xCQyxtQkFBbUIsRUFDbkJDLGFBQWEsRUFDYkMsY0FBYyxFQUNkdEMsY0FBYyxFQUNkM1QsYUFBYSxFQUNia1csaUJBQWlCLEVBQ2pCQywwQkFBMEIsRUFDMUI1RywwQkFBMEIsRUFDMUI2RyxRQUFRLEVBQ1JDLFdBQVcsRUFDWGxCLE1BQU0sR0FFSm1CLEVBQWdCLENBQ2xCclcsTUFBTSxFQUNObkIsUUFBUSxFQUNSM0IsV0FBVyxFQUNYb1osUUFBUSxFQUNSQyxRQUFRLEVBQ1IzWCxXQUFXLEVBQ1g0WCxPQUFPLEdBU0xDLEVBQWUsQ0FDakIsVUFBWSxFQUNaQyxTQUFTLEVBQ1RoRCxjQUFjLEVBQ2QzVCxhQUFhLEVBQ2JxVyxXQUFXLEVBQ1hsQixNQUFNLEdBRUp5QixFQUFlLEdBSW5CLFNBQVNDLEVBQVdDLEdBRWxCLE9BQUlqQixFQUFRa0IsT0FBT0QsR0FDVkosRUFJRkUsRUFBYUUsRUFBb0IsV0FBTWhCLEVBVmhEYyxFQUFhZixFQUFRbUIsWUFoQkssQ0FDeEIsVUFBWSxFQUNadkgsUUFBUSxFQUNSa0UsY0FBYyxFQUNkM1QsYUFBYSxFQUNicVcsV0FBVyxHQVliTyxFQUFhZixFQUFRb0IsTUFBUVAsRUFZN0IsSUFBSXRYLEVBQWlCaEMsT0FBT2dDLGVBQ3hCOFgsRUFBc0I5WixPQUFPOFosb0JBQzdCbFosRUFBd0JaLE9BQU9ZLHNCQUMvQkksRUFBMkJoQixPQUFPZ0IseUJBQ2xDK1ksRUFBaUIvWixPQUFPK1osZUFDeEJDLEVBQWtCaGEsT0FBT0QsVUFzQzdCbVAsRUFBT0MsUUFyQ1AsU0FBUzhLLEVBQXFCQyxFQUFpQkMsRUFBaUJDLEdBQzlELEdBQStCLGlCQUFwQkQsRUFBOEIsQ0FFdkMsR0FBSUgsRUFBaUIsQ0FDbkIsSUFBSUssRUFBcUJOLEVBQWVJLEdBRXBDRSxHQUFzQkEsSUFBdUJMLEdBQy9DQyxFQUFxQkMsRUFBaUJHLEVBQW9CRCxHQUk5RCxJQUFJelosRUFBT21aLEVBQW9CSyxHQUUzQnZaLElBQ0ZELEVBQU9BLEVBQUswRCxPQUFPekQsRUFBc0J1WixLQU0zQyxJQUhBLElBQUlHLEVBQWdCYixFQUFXUyxHQUMzQkssRUFBZ0JkLEVBQVdVLEdBRXRCM1ksRUFBSSxFQUFHQSxFQUFJYixFQUFLZSxTQUFVRixFQUFHLENBQ3BDLElBQUlLLEVBQU1sQixFQUFLYSxHQUVmLEtBQUswWCxFQUFjclgsSUFBVXVZLEdBQWFBLEVBQVV2WSxJQUFXMFksR0FBaUJBLEVBQWMxWSxJQUFXeVksR0FBaUJBLEVBQWN6WSxJQUFPLENBQzdJLElBQUkyWSxFQUFheFosRUFBeUJtWixFQUFpQnRZLEdBRTNELElBRUVHLEVBQWVrWSxFQUFpQnJZLEVBQUsyWSxHQUNyQyxNQUFPMVQsT0FLZixPQUFPb1QsSSxnSUMvRlQsU0FBU08sRUFBcUJDLEVBQU9DLEdBQ25DLFFBQXdDOVcsSUFBcEM2VyxFQUFNRSxTQUFTRCxFQUFXOVgsTUFDNUIsT0FBTzZYLEVBQU1HLE9BQU8sR0FBSUYsRUFBWUQsRUFBTUksT0FBTyxHQUlyRCxTQUFTQyxFQUFNQyxFQUFZQyxFQUFLQyxHQUM5QixJQUFJQyxFQUFtQixHQUNuQkMsRUFBZSxZQUFvQkosRUFBWUcsRUFBa0JELEdBRXJFLE9BQUlDLEVBQWlCelosT0FBUyxFQUNyQndaLEVBR0ZFLEVBQWVILEVBQUlFLEdBRzVCLElBNkVJRSxFQUFhLFNBQVNBLEVBQVdyVCxHQUduQyxJQUZBLElBQUlzVCxFQUFNLEdBRUQ5WixFQUFJLEVBQUdBLEVBQUl3RyxFQUFLdEcsT0FBUUYsSUFBSyxDQUNwQyxJQUFJK1osRUFBTXZULEVBQUt4RyxHQUNmLEdBQVcsTUFBUCtaLEVBQUosQ0FDQSxJQUFJQyxPQUFRLEVBRVosY0FBZUQsR0FDYixJQUFLLFVBQ0gsTUFFRixJQUFLLFNBRUQsR0FBSXBXLE1BQU1DLFFBQVFtVyxHQUNoQkMsRUFBUUgsRUFBV0UsUUFJbkIsSUFBSyxJQUFJL1gsS0FGVGdZLEVBQVEsR0FFTUQsRUFDUkEsRUFBSS9YLElBQU1BLElBQ1pnWSxJQUFVQSxHQUFTLEtBQ25CQSxHQUFTaFksR0FLZixNQUdKLFFBRUlnWSxFQUFRRCxFQUlWQyxJQUNGRixJQUFRQSxHQUFPLEtBQ2ZBLEdBQU9FLElBSVgsT0FBT0YsR0MxSUxHLEVEbUJnQixTQUF1QkMsR0FDekMsSUFBSWhCLEVBQVEsWUFBWWdCLEdBRXhCaEIsRUFBTUksTUFBTWEsT0FBUyxTQUFVcFosR0FLN0I4TSxLQUFLdU0sU0FBV3JaLEdBR2xCbVksRUFBTW1CLFFBQVMsRUFFZixJQUFJWixFQUFNLFdBQ1IsSUFBSyxJQUFJbFQsRUFBT3RHLFVBQVVDLE9BQVFzRyxFQUFPLElBQUk3QyxNQUFNNEMsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMvRUQsRUFBS0MsR0FBUXhHLFVBQVV3RyxHQUd6QixJQUFJMFMsRUFBYSxZQUFnQjNTLEVBQU0wUyxFQUFNTSxnQkFBWW5YLEdBRXpELE9BREEsWUFBYTZXLEVBQU9DLEdBQVksR0FDekJELEVBQU03WSxJQUFNLElBQU04WSxFQUFXOVgsTUFrQ3RDLE1BQU8sQ0FDTG9ZLElBQUtBLEVBQ0xhLEdBVk8sV0FDUCxJQUFLLElBQUlDLEVBQVF0YSxVQUFVQyxPQUFRc0csRUFBTyxJQUFJN0MsTUFBTTRXLEdBQVFDLEVBQVEsRUFBR0EsRUFBUUQsRUFBT0MsSUFDcEZoVSxFQUFLZ1UsR0FBU3ZhLFVBQVV1YSxHQUcxQixPQUFPakIsRUFBTUwsRUFBTU0sV0FBWUMsRUFBS0ksRUFBV3JULEtBTS9DaVUsYUFwQmlCLFdBQ2pCLElBQUssSUFBSUMsRUFBUXphLFVBQVVDLE9BQVFzRyxFQUFPLElBQUk3QyxNQUFNK1csR0FBUUMsRUFBUSxFQUFHQSxFQUFRRCxFQUFPQyxJQUNwRm5VLEVBQUttVSxHQUFTMWEsVUFBVTBhLEdBRzFCLElBQUl4QixFQUFhLFlBQWdCM1MsRUFBTTBTLEVBQU1NLFlBQzdDUCxFQUFxQkMsRUFBT0MsSUFlNUJ5QixVQW5DYyxXQUNkLElBQUssSUFBSUMsRUFBUTVhLFVBQVVDLE9BQVFzRyxFQUFPLElBQUk3QyxNQUFNa1gsR0FBUUMsRUFBUSxFQUFHQSxFQUFRRCxFQUFPQyxJQUNwRnRVLEVBQUtzVSxHQUFTN2EsVUFBVTZhLEdBRzFCLElBQUkzQixFQUFhLFlBQWdCM1MsRUFBTTBTLEVBQU1NLFlBQ3pDdUIsRUFBWSxhQUFlNUIsRUFBVzlYLEtBSzFDLE9BSkE0WCxFQUFxQkMsRUFBTyxDQUMxQjdYLEtBQU04WCxFQUFXOVgsS0FDakJnTixPQUFRLGNBQWdCME0sRUFBWSxJQUFNNUIsRUFBVzlLLE9BQVMsTUFFekQwTSxHQXlCUEMsUUFBUyxTQUFpQkMsR0FDeEJBLEVBQUk3YSxTQUFRLFNBQVVDLEdBQ3BCNlksRUFBTUUsU0FBUy9ZLElBQU8sTUFHMUI2YSxNQUFPLFdBQ0xoQyxFQUFNTSxXQUFhLEdBQ25CTixFQUFNRSxTQUFXLEdBQ2pCRixFQUFNSSxNQUFNNEIsU0FHZDVCLE1BQU9KLEVBQU1JLE1BQ2JKLE1BQU9BLEVBQ1BpQyxvQkFBcUIsSUFBb0IzSSxLQUFLLEtBQU0wRyxFQUFNTSxZQUMxREQsTUFBT0EsRUFBTS9HLEtBQUssS0FBTTBHLEVBQU1NLFdBQVlDLElDNUZ6QixHQU1qQixHQUxRUSxFQUFlaUIsTUFDYmpCLEVBQWVlLFFBQ3BCZixFQUFlSyxHQUNaTCxFQUFlVixNQUNEVSxFQUFla0Isb0JBQ3RCbEIsRUFBZVEsY0FFOUIsR0FEWVIsRUFBZVcsVUFDckJYLEVBQWVSLEtBQ2JRLEVBQWVYLE1BQ2ZXLEVBQWVmLE8saUJDWjNCeEwsRUFBT0MsUUFBVSxTQUFVeU4sR0FDekIsTUFBcUIsaUJBQVBBLEVBQXlCLE9BQVBBLEVBQTRCLG1CQUFQQSxJLGlCQ0R2RDFOLEVBQU9DLFFBQVUsU0FBVTBOLEdBQ3pCLElBQ0UsUUFBU0EsSUFDVCxNQUFPL1YsR0FDUCxPQUFPLEssZ0NDSlgsNEdBZUlnVyxFQUVKLFNBQVVDLEdBR1IsU0FBU0QsSUFHUCxJQUZBLElBQUl2TCxFQUVLeEosRUFBT3RHLFVBQVVDLE9BQVFzRyxFQUFPLElBQUk3QyxNQUFNNEMsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMvRUQsRUFBS0MsR0FBUXhHLFVBQVV3RyxHQUt6QixPQUZBc0osRUFBUXdMLEVBQWlCaFksS0FBSzVELE1BQU00YixFQUFrQixDQUFDMU4sTUFBTWhMLE9BQU8yRCxLQUFVcUgsTUFDeEUxRyxRQUFVLFlBQXFCNEksRUFBTW5QLE9BQ3BDbVAsRUFZVCxPQXZCQSxZQUFldUwsRUFBZUMsR0FjakJELEVBQWMvYyxVQUVwQnNTLE9BQVMsV0FDZCxPQUFPLElBQU1oSyxjQUFjLElBQVEsQ0FDakNNLFFBQVMwRyxLQUFLMUcsUUFDZG5HLFNBQVU2TSxLQUFLak4sTUFBTUksWUFJbEJzYSxFQXhCVCxDQXlCRSxJQUFNcGEsV0ErQ04sSUFBTUEsVUFlUixJQUFJc2EsRUFBb0IsU0FBMkJyWixFQUFJOEMsR0FDckQsTUFBcUIsbUJBQVA5QyxFQUFvQkEsRUFBRzhDLEdBQW1COUMsR0FFdERzWixFQUFzQixTQUE2QnRaLEVBQUk4QyxHQUN6RCxNQUFxQixpQkFBUDlDLEVBQWtCLFlBQWVBLEVBQUksS0FBTSxLQUFNOEMsR0FBbUI5QyxHQUdoRnVaLEVBQWlCLFNBQXdCQyxHQUMzQyxPQUFPQSxHQUdMMUYsRUFBYSxJQUFNQSxnQkFFRyxJQUFmQSxJQUNUQSxFQUFheUYsR0FPZixJQUFJRSxFQUFhM0YsR0FBVyxTQUFVN04sRUFBTXlULEdBQzFDLElBQUlDLEVBQVcxVCxFQUFLMFQsU0FDaEJDLEVBQVczVCxFQUFLMlQsU0FDaEJDLEVBQVc1VCxFQUFLNlQsUUFDaEJsTCxFQUFPLFlBQThCM0ksRUFBTSxDQUFDLFdBQVksV0FBWSxZQUVwRXJJLEVBQVNnUixFQUFLaFIsT0FFZGEsRUFBUSxZQUFTLEdBQUltUSxFQUFNLENBQzdCa0wsUUFBUyxTQUFpQm5ULEdBQ3hCLElBQ01rVCxHQUFVQSxFQUFTbFQsR0FDdkIsTUFBT29ULEdBRVAsTUFEQXBULEVBQU1xVCxpQkFDQUQsRUFHSHBULEVBQU1zVCxrQkFDTSxJQUFqQnRULEVBQU11VCxRQUNMdGMsR0FBcUIsVUFBWEEsR0F2QmpCLFNBQXlCK0ksR0FDdkIsU0FBVUEsRUFBTXdULFNBQVd4VCxFQUFNeVQsUUFBVXpULEVBQU0wVCxTQUFXMVQsRUFBTTJULFVBdUI3REMsQ0FBZ0I1VCxLQUViQSxFQUFNcVQsaUJBQ05KLFFBY1IsT0FQRW5iLEVBQU1XLElBREptYSxJQUFtQnpGLEdBQ1Q0RixHQUVBQyxFQUtQLElBQU1qVixjQUFjLElBQUtqRyxNQVdsQyxJQUFJK2IsRUFBTzFHLEdBQVcsU0FBVWpELEVBQU82SSxHQUNyQyxJQUFJZSxFQUFrQjVKLEVBQU1rRixVQUN4QkEsT0FBZ0MsSUFBcEIwRSxFQUE2QmhCLEVBQWFnQixFQUN0RHJTLEVBQVV5SSxFQUFNekksUUFDaEJwSSxFQUFLNlEsRUFBTTdRLEdBQ1gyWixFQUFXOUksRUFBTThJLFNBQ2pCL0ssRUFBTyxZQUE4QmlDLEVBQU8sQ0FBQyxZQUFhLFVBQVcsS0FBTSxhQUUvRSxPQUFPLElBQU1uTSxjQUFjLElBQWdCaEcsU0FBVSxNQUFNLFNBQVVnYyxHQUNsRUEsR0FBcUgsYUFBVSxHQUNoSSxJQUFJMVYsRUFBVTBWLEVBQVExVixRQUNsQnZDLEVBQVc2VyxFQUFvQkQsRUFBa0JyWixFQUFJMGEsRUFBUWpZLFVBQVdpWSxFQUFRalksVUFDaEZ1RixFQUFPdkYsRUFBV3VDLEVBQVEwQyxXQUFXakYsR0FBWSxHQUVqRGhFLEVBQVEsWUFBUyxHQUFJbVEsRUFBTSxDQUM3QjVHLEtBQU1BLEVBQ040UixTQUFVLFdBQ1IsSUFBSW5YLEVBQVc0VyxFQUFrQnJaLEVBQUkwYSxFQUFRalksV0FDaEMyRixFQUFVcEQsRUFBUW9ELFFBQVVwRCxFQUFRekgsTUFDMUNrRixNQVdYLE9BTkk4VyxJQUFtQnpGLEVBQ3JCclYsRUFBTVcsSUFBTXNhLEdBQWdCQyxFQUU1QmxiLEVBQU1rYixTQUFXQSxFQUdaLElBQU1qVixjQUFjcVIsRUFBV3RYLFNBbUJ0Q2tjLEVBQW1CLFNBQXdCbkIsR0FDN0MsT0FBT0EsR0FHTG9CLEVBQWUsSUFBTTlHLGdCQUVHLElBQWpCOEcsSUFDVEEsRUFBZUQsR0FpQkhDLEdBQWEsU0FBVTNVLEVBQU15VCxHQUN6QyxJQUFJbUIsRUFBbUI1VSxFQUFLLGdCQUN4QjZVLE9BQW1DLElBQXJCRCxFQUE4QixPQUFTQSxFQUNyREUsRUFBdUI5VSxFQUFLK1UsZ0JBQzVCQSxPQUEyQyxJQUF6QkQsRUFBa0MsU0FBV0EsRUFDL0RFLEVBQWNoVixFQUFLZ1YsWUFDbkJDLEVBQWdCalYsRUFBS3NSLFVBQ3JCNEQsRUFBUWxWLEVBQUtrVixNQUNiQyxFQUFlblYsRUFBS2hDLFNBQ3BCb1gsRUFBZXBWLEVBQUt4RCxTQUNwQjZZLEVBQVlyVixFQUFLcVYsVUFDakJDLEVBQVN0VixFQUFLc1YsT0FDZEMsRUFBWXZWLEVBQUttRyxNQUNqQnBNLEVBQUtpRyxFQUFLakcsR0FDVjJaLEVBQVcxVCxFQUFLMFQsU0FDaEIvSyxFQUFPLFlBQThCM0ksRUFBTSxDQUFDLGVBQWdCLGtCQUFtQixjQUFlLFlBQWEsUUFBUyxXQUFZLFdBQVksWUFBYSxTQUFVLFFBQVMsS0FBTSxhQUV0TCxPQUFPLElBQU12QixjQUFjLElBQWdCaEcsU0FBVSxNQUFNLFNBQVVnYyxHQUNsRUEsR0FBd0gsYUFBVSxHQUNuSSxJQUFJNVgsRUFBa0J1WSxHQUFnQlgsRUFBUWpZLFNBQzFDeUUsRUFBYW9TLEVBQW9CRCxFQUFrQnJaLEVBQUk4QyxHQUFrQkEsR0FDekVkLEVBQU9rRixFQUFXMUgsU0FFbEJpYyxFQUFjelosR0FBUUEsRUFBS29HLFFBQVEsNEJBQTZCLFFBQ2hFc1QsRUFBUUQsRUFBYyxZQUFVM1ksRUFBZ0J0RCxTQUFVLENBQzVEd0MsS0FBTXlaLEVBQ05OLE1BQU9BLEVBQ1BHLFVBQVdBLEVBQ1hDLE9BQVFBLElBQ0wsS0FDRHRYLEtBQWNtWCxFQUFlQSxFQUFhTSxFQUFPNVksR0FBbUI0WSxHQUNwRW5FLEVBQVl0VCxFQTdDcEIsV0FDRSxJQUFLLElBQUlHLEVBQU90RyxVQUFVQyxPQUFRMlosRUFBYSxJQUFJbFcsTUFBTTRDLEdBQU9FLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDckZvVCxFQUFXcFQsR0FBUXhHLFVBQVV3RyxHQUcvQixPQUFPb1QsRUFBV3ZhLFFBQU8sU0FBVVUsR0FDakMsT0FBT0EsS0FDTm1ELEtBQUssS0FzQ3FCMmEsQ0FBZVQsRUFBZUYsR0FBbUJFLEVBQ3hFOU8sRUFBUW5JLEVBQVcsWUFBUyxHQUFJdVgsRUFBVyxHQUFJUCxHQUFlTyxFQUU5RC9jLEVBQVEsWUFBUyxDQUNuQixlQUFnQndGLEdBQVk2VyxHQUFlLEtBQzNDdkQsVUFBV0EsRUFDWG5MLE1BQU9BLEVBQ1BwTSxHQUFJa0gsR0FDSDBILEdBU0gsT0FOSStMLElBQXFCQyxFQUN2Qm5jLEVBQU1XLElBQU1zYSxHQUFnQkMsRUFFNUJsYixFQUFNa2IsU0FBV0EsRUFHWixJQUFNalYsY0FBYzhWLEVBQU0vYixVLGlDQ3RTckMseURBS0ltZCxFQUF3QixXQUN4QkMsRUFBdUMsb0JBQWZDLFdBQTZCQSxXQUErQixvQkFBWHRYLE9BQXlCQSxZQUEyQixJQUFYZ1EsRUFBeUJBLEVBQVMsR0FleEosU0FBU3VILEVBQW1CbmQsR0FDMUIsSUFBSW9kLEVBQVcsR0FDZixNQUFPLENBQ0xDLEdBQUksU0FBWUMsR0FDZEYsRUFBU3plLEtBQUsyZSxJQUVoQkMsSUFBSyxTQUFhRCxHQUNoQkYsRUFBV0EsRUFBUzdlLFFBQU8sU0FBVWlmLEdBQ25DLE9BQU9BLElBQU1GLE1BR2pCckgsSUFBSyxXQUNILE9BQU9qVyxHQUVUeWQsSUFBSyxTQUFhQyxFQUFVQyxHQUMxQjNkLEVBQVEwZCxFQUNSTixFQUFTL2QsU0FBUSxTQUFVaWUsR0FDekIsT0FBT0EsRUFBUXRkLEVBQU8yZCxRQXVJOUIsSUFBSTNjLEVBQVEsSUFBTXVULGVBN0hsQixTQUE0QnFKLEVBQWNDLEdBQ3hDLElBQUlDLEVBQXVCQyxFQXhDdkJ6ZSxFQTBDQTBlLEVBQWMsNEJBekNYZixFQURIM2QsRUFBTSx5QkFDb0IyZCxFQUFlM2QsSUFBUSxHQUFLLEdBeUNJLE1BRTFEUyxFQUF3QixTQUFVK08sR0FHcEMsU0FBUy9PLElBQ1AsSUFBSWlQLEVBSUosT0FGQUEsRUFBUUYsRUFBV2xRLE1BQU1rTyxLQUFNNU4sWUFBYzROLE1BQ3ZDbVIsUUFBVWQsRUFBbUJuTyxFQUFNblAsTUFBTUcsT0FDeENnUCxFQVBULFlBQWVqUCxFQUFVK08sR0FVekIsSUFBSW9QLEVBQVNuZSxFQUFTdkMsVUFvQ3RCLE9BbENBMGdCLEVBQU9DLGdCQUFrQixXQUN2QixJQUFJOVcsRUFFSixPQUFPQSxFQUFPLElBQVMyVyxHQUFlbFIsS0FBS21SLFFBQVM1VyxHQUd0RDZXLEVBQU9FLDBCQUE0QixTQUFtQ0MsR0FDcEUsR0FBSXZSLEtBQUtqTixNQUFNRyxRQUFVcWUsRUFBVXJlLE1BQU8sQ0FDeEMsSUFFSTJkLEVBRkFXLEVBQVd4UixLQUFLak4sTUFBTUcsTUFDdEIwZCxFQUFXVyxFQUFVcmUsUUE5RGZ1ZSxFQWlFR0QsTUFqRUFFLEVBaUVVZCxHQS9EZCxJQUFOYSxHQUFXLEVBQUlBLEdBQU0sRUFBSUMsRUFFekJELEdBQU1BLEdBQUtDLEdBQU1BLEdBOERsQmIsRUFBYyxHQUVkQSxFQUE4QyxtQkFBekJFLEVBQXNDQSxFQUFxQlMsRUFBVVosR0FBWVYsRUFRbEYsS0FGcEJXLEdBQWUsSUFHYjdRLEtBQUttUixRQUFRUixJQUFJWSxFQUFVcmUsTUFBTzJkLElBN0U5QyxJQUFrQlksRUFBR0MsR0FtRmpCTixFQUFPcE8sT0FBUyxXQUNkLE9BQU9oRCxLQUFLak4sTUFBTUksVUFHYkYsRUEvQ21CLENBZ0QxQixhQUVGQSxFQUFTcVcsb0JBQXFCMEgsRUFBd0IsSUFBMEJFLEdBQWUsSUFBVTlmLE9BQU91Z0IsV0FBWVgsR0FFNUgsSUFBSWhlLEVBQXdCLFNBQVU0ZSxHQUdwQyxTQUFTNWUsSUFDUCxJQUFJNmUsRUFpQkosT0FmQUEsRUFBU0QsRUFBWTlmLE1BQU1rTyxLQUFNNU4sWUFBYzROLE1BQ3hDN0ksTUFBUSxDQUNiakUsTUFBTzJlLEVBQU9DLFlBR2hCRCxFQUFPRSxTQUFXLFNBQVVuQixFQUFVQyxHQUdDLEtBRkksRUFBdEJnQixFQUFPRyxjQUVObkIsSUFDbEJnQixFQUFPL1csU0FBUyxDQUNkNUgsTUFBTzJlLEVBQU9DLGNBS2JELEVBcEJULFlBQWU3ZSxFQUFVNGUsR0F1QnpCLElBQUlLLEVBQVVqZixFQUFTdEMsVUFrQ3ZCLE9BaENBdWhCLEVBQVFYLDBCQUE0QixTQUFtQ0MsR0FDckUsSUFBSVMsRUFBZVQsRUFBVVMsYUFDN0JoUyxLQUFLZ1MsYUFBZUEsUUFBc0Q5QixFQUF3QjhCLEdBR3BHQyxFQUFRQyxrQkFBb0IsV0FDdEJsUyxLQUFLZ1AsUUFBUWtDLElBQ2ZsUixLQUFLZ1AsUUFBUWtDLEdBQWFYLEdBQUd2USxLQUFLK1IsVUFHcEMsSUFBSUMsRUFBZWhTLEtBQUtqTixNQUFNaWYsYUFDOUJoUyxLQUFLZ1MsYUFBZUEsUUFBc0Q5QixFQUF3QjhCLEdBR3BHQyxFQUFRRSxxQkFBdUIsV0FDekJuUyxLQUFLZ1AsUUFBUWtDLElBQ2ZsUixLQUFLZ1AsUUFBUWtDLEdBQWFULElBQUl6USxLQUFLK1IsV0FJdkNFLEVBQVFILFNBQVcsV0FDakIsT0FBSTlSLEtBQUtnUCxRQUFRa0MsR0FDUmxSLEtBQUtnUCxRQUFRa0MsR0FBYS9ILE1BRTFCMkgsR0FJWG1CLEVBQVFqUCxPQUFTLFdBQ2YsT0FwSGE3UCxFQW9ISTZNLEtBQUtqTixNQUFNSSxTQW5IekIyQyxNQUFNQyxRQUFRNUMsR0FBWUEsRUFBUyxHQUFLQSxHQW1ITDZNLEtBQUs3SSxNQUFNakUsT0FwSHZELElBQW1CQyxHQXVIUkgsRUExRG1CLENBMkQxQixhQUdGLE9BREFBLEVBQVN3VyxlQUFnQnlILEVBQXdCLElBQTBCQyxHQUFlLElBQVU5ZixPQUFRNmYsR0FDckcsQ0FDTGhlLFNBQVVBLEVBQ1ZELFNBQVVBLElBTUMsUSxxQ0NzRGY2TSxFQUFnQixRQTdOSixTQUFVdVMsR0FFcEIsSUFBSXZRLEVBQU83QixLQUNQcVMsRUFBYSxFQUFRLElBQ3JCQyxFQUFXLEVBQVEsSUFDbkJDLEVBQWMsRUFBUSxJQVUxQjFRLEVBQUsyUSxNQUFRLFNBQVVDLEVBQU9DLEVBQVFDLEdBRXBDLE9BQU85USxFQUFLdVEsRUFBTXpYLE9BQU9pWSxhQURSLENBQUMsV0FBWSxVQUFXLFdBQVksT0FBUSxPQUFRLE9BQVEsWUFBYSxVQUFXLFNBQVUsU0FBVSxTQUFVLFdBQVksZUFDNUZILEVBQU9DLEVBQVFDLElBT3BFOVEsRUFBS2dSLE9BQVMsV0FDWixPQUFPVCxFQUFNVSxTQUFTRCxVQVd4QmhSLEVBQUtrUixTQUFXLFNBQVVOLEVBQU9DLEVBQVFNLEVBQVVMLEVBQVdNLEdBQzFELElBRUlDLEVBQVcsZUFDTSxJQUFWRCxJQUFtQyxJQUFWQSxJQUNsQ0MsRUFBVyxZQUViLElBQUl4VixFQUFNd1YsRUFBVyxpQkFOakJULEVBQVFBLEdBQVMsS0FNMEIsS0FMM0NDLEVBQVNBLEdBQVUsS0FjdkIsWUFSd0IsSUFBYk0sSUFDVHRWLEdBQU8sSUFBTXNWLEdBR1hMLElBQ0ZqVixHQUFPLElBQU0wVSxFQUFNelgsT0FBT3dZLFVBR3JCelYsR0FVWG1FLEVBQUt1UixTQUFXLFNBQVVYLEVBQU9DLEVBQVFDLEdBQ3ZDLE9BQU9QLEVBQU1JLE1BQU1PLFNBQVNOLEVBQU9DLEVBQVEsV0FBWUMsSUFVekQ5USxFQUFLd1IsUUFBVSxTQUFVWixFQUFPQyxFQUFRQyxHQUN0QyxPQUFPUCxFQUFNSSxNQUFNTyxTQUFTTixFQUFPQyxFQUFRLFVBQVdDLElBVXhEOVEsRUFBS3lSLFNBQVcsU0FBVWIsRUFBT0MsRUFBUUMsR0FDdkMsT0FBT1AsRUFBTUksTUFBTU8sU0FBU04sRUFBT0MsRUFBUSxXQUFZQyxJQVV6RDlRLEVBQUswUixLQUFPLFNBQVVkLEVBQU9DLEVBQVFDLEdBQ25DLE9BQU9QLEVBQU1JLE1BQU1PLFNBQVNOLEVBQU9DLEVBQVEsT0FBUUMsSUFVckQ5USxFQUFLMlIsS0FBTyxTQUFVZixFQUFPQyxFQUFRQyxHQUNuQyxPQUFPUCxFQUFNSSxNQUFNTyxTQUFTTixFQUFPQyxFQUFRLE9BQVFDLElBVXJEOVEsRUFBSzRSLEtBQU8sU0FBVWhCLEVBQU9DLEVBQVFDLEdBQ25DLE9BQU9QLEVBQU1JLE1BQU1PLFNBQVNOLEVBQU9DLEVBQVEsT0FBUUMsSUFVckQ5USxFQUFLNlIsVUFBWSxTQUFVakIsRUFBT0MsRUFBUUMsR0FDeEMsT0FBT1AsRUFBTUksTUFBTU8sU0FBU04sRUFBT0MsRUFBUSxZQUFhQyxJQVUxRDlRLEVBQUs4UixRQUFVLFNBQVVsQixFQUFPQyxFQUFRQyxHQUN0QyxPQUFPUCxFQUFNSSxNQUFNTyxTQUFTTixFQUFPQyxFQUFRLFVBQVdDLElBVXhEOVEsRUFBSytSLE9BQVMsU0FBVW5CLEVBQU9DLEVBQVFDLEdBQ3JDLE9BQU9QLEVBQU1JLE1BQU1PLFNBQVNOLEVBQU9DLEVBQVEsU0FBVUMsSUFVdkQ5USxFQUFLZ1MsT0FBUyxTQUFVcEIsRUFBT0MsRUFBUUMsR0FDckMsT0FBT1AsRUFBTUksTUFBTU8sU0FBU04sRUFBT0MsRUFBUSxTQUFVQyxJQVV2RDlRLEVBQUtpUyxPQUFTLFNBQVVyQixFQUFPQyxFQUFRQyxHQUNyQyxPQUFPUCxFQUFNSSxNQUFNTyxTQUFTTixFQUFPQyxFQUFRLFNBQVVDLElBVXZEOVEsRUFBS2tTLFNBQVcsU0FBVXRCLEVBQU9DLEVBQVFDLEdBQ3ZDLE9BQU9QLEVBQU1JLE1BQU1PLFNBQVNOLEVBQU9DLEVBQVEsV0FBWUMsSUFVekQ5USxFQUFLbVMsVUFBWSxTQUFVdkIsRUFBT0MsRUFBUUMsR0FDeEMsT0FBT1AsRUFBTUksTUFBTU8sU0FBU04sRUFBT0MsRUFBUSxZQUFhQyxJQVUxRDlRLEVBQUtvUyxRQUFVLFNBQVV4QixFQUFPQyxFQUFRcFMsR0FDdENBLEVBQVFBLEdBQVMsT0FHakIsTUFEZ0Isb0NBQ0c0VCxtQkFGSCxtRkFBcUZ6QixFQUFRLGFBQWVDLEVBQVMsNENBQThDcFMsRUFBUSxlQUFpQm1TLEVBQVEsRUFBSSxRQUFVQyxFQUFTLEVBQUksa0ZBQW9GRCxFQUFRLElBQU1DLEVBQVMsa0JBSzVWN1EsRUFBS3NTLFdBQWEsSUFBSTlCLEVBQVdELEdBQ2pDdlEsRUFBS3VTLFNBQVcsSUFBSTlCLEVBQVNGLEdBQzdCdlEsRUFBS3dTLFlBQWMsSUFBSTlCLEVBQVlILEssZ0NDdE5yQyxJQUFJN2dCLEVBQXdCWixPQUFPWSxzQkFDL0IrUCxFQUFpQjNRLE9BQU9ELFVBQVU0USxlQUNsQ2dULEVBQW1CM2pCLE9BQU9ELFVBQVU2VyxxQkFFeEMsU0FBU2dOLEVBQVNDLEdBQ2pCLEdBQUlBLFFBQ0gsTUFBTSxJQUFJcFQsVUFBVSx5REFHckIsT0FBT3pRLE9BQU82akIsR0ErQ2YzVSxFQUFPQyxRQTVDUCxXQUNDLElBQ0MsSUFBS25QLE9BQU95RixPQUNYLE9BQU8sRUFNUixJQUFJcWUsRUFBUSxJQUFJQyxPQUFPLE9BRXZCLEdBREFELEVBQU0sR0FBSyxLQUNrQyxNQUF6QzlqQixPQUFPOFosb0JBQW9CZ0ssR0FBTyxHQUNyQyxPQUFPLEVBS1IsSUFEQSxJQUFJRSxFQUFRLEdBQ0h4aUIsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQ3ZCd2lCLEVBQU0sSUFBTUQsT0FBT0UsYUFBYXppQixJQUFNQSxFQUt2QyxHQUF3QixlQUhYeEIsT0FBTzhaLG9CQUFvQmtLLEdBQU9wVixLQUFJLFNBQVVuTCxHQUM1RCxPQUFPdWdCLEVBQU12Z0IsTUFFSGtCLEtBQUssSUFDZixPQUFPLEVBSVIsSUFBSXVmLEVBQVEsR0FJWixNQUhBLHVCQUF1QmxnQixNQUFNLElBQUlwQyxTQUFRLFNBQVV1aUIsR0FDbERELEVBQU1DLEdBQVVBLEtBR2YseUJBREVua0IsT0FBT1csS0FBS1gsT0FBT3lGLE9BQU8sR0FBSXllLElBQVF2ZixLQUFLLElBTTlDLE1BQU80USxHQUVSLE9BQU8sR0FJUTZPLEdBQW9CcGtCLE9BQU95RixPQUFTLFNBQVVsRSxFQUFRSSxHQUt0RSxJQUpBLElBQUlpQyxFQUVBL0MsRUFEQThDLEVBQUtpZ0IsRUFBU3JpQixHQUdUOGlCLEVBQUksRUFBR0EsRUFBSTVpQixVQUFVQyxPQUFRMmlCLElBQUssQ0FHMUMsSUFBSyxJQUFJeGlCLEtBRlQrQixFQUFPNUQsT0FBT3lCLFVBQVU0aUIsSUFHbkIxVCxFQUFlNUwsS0FBS25CLEVBQU0vQixLQUM3QjhCLEVBQUc5QixHQUFPK0IsRUFBSy9CLElBSWpCLEdBQUlqQixFQUF1QixDQUMxQkMsRUFBVUQsRUFBc0JnRCxHQUNoQyxJQUFLLElBQUlwQyxFQUFJLEVBQUdBLEVBQUlYLEVBQVFhLE9BQVFGLElBQy9CbWlCLEVBQWlCNWUsS0FBS25CLEVBQU0vQyxFQUFRVyxNQUN2Q21DLEVBQUc5QyxFQUFRVyxJQUFNb0MsRUFBSy9DLEVBQVFXLE1BTWxDLE9BQU9tQyxJLGdDQ3JGTnVMLEVBQU9DLFFBQVUsRUFBUSxLLGlCQ0gzQkQsRUFBT0MsUUFBVSxTQUFTRCxHQW9CekIsT0FuQktBLEVBQU9vVixrQkFDWHBWLEVBQU9xVixVQUFZLGFBQ25CclYsRUFBT3NWLE1BQVEsR0FFVnRWLEVBQU8xTSxXQUFVME0sRUFBTzFNLFNBQVcsSUFDeEN4QyxPQUFPZ0MsZUFBZWtOLEVBQVEsU0FBVSxDQUN2Q2pPLFlBQVksRUFDWnVYLElBQUssV0FDSixPQUFPdEosRUFBT3VWLEtBR2hCemtCLE9BQU9nQyxlQUFla04sRUFBUSxLQUFNLENBQ25Dak8sWUFBWSxFQUNadVgsSUFBSyxXQUNKLE9BQU90SixFQUFPMU4sS0FHaEIwTixFQUFPb1YsZ0JBQWtCLEdBRW5CcFYsSSxtQkNwQlIsSUFBSXdWLEVBQUssRUFBUSxLQUNiQyxFQUFhLEVBQVEsS0FDekJ6VixFQUFPQyxRQUFVLEVBQVEsSUFBb0IsU0FBVTFPLEVBQVFvQixFQUFLVSxHQUNsRSxPQUFPbWlCLEVBQUdFLEVBQUVua0IsRUFBUW9CLEVBQUs4aUIsRUFBVyxFQUFHcGlCLEtBQ3JDLFNBQVU5QixFQUFRb0IsRUFBS1UsR0FFekIsT0FEQTlCLEVBQU9vQixHQUFPVSxFQUNQOUIsSSxpQkNOVCxJQUFJa1EsRUFBaUIsR0FBR0EsZUFDeEJ6QixFQUFPQyxRQUFVLFNBQVV5TixFQUFJL2EsR0FDN0IsT0FBTzhPLEVBQWU1TCxLQUFLNlgsRUFBSS9hLEssaUNDQWpDc04sRUFBUTBWLFdBdUNSLFNBQXFCQyxHQUNuQixJQUFJQyxFQUFPQyxFQUFRRixHQUNmRyxFQUFXRixFQUFLLEdBQ2hCRyxFQUFrQkgsRUFBSyxHQUMzQixPQUF1QyxHQUE5QkUsRUFBV0MsR0FBdUIsRUFBS0EsR0ExQ2xEL1YsRUFBUWdXLFlBaURSLFNBQXNCTCxHQUNwQixJQUFJTSxFQWNBNWpCLEVBYkF1akIsRUFBT0MsRUFBUUYsR0FDZkcsRUFBV0YsRUFBSyxHQUNoQkcsRUFBa0JILEVBQUssR0FFdkJNLEVBQU0sSUFBSUMsRUFWaEIsU0FBc0JSLEVBQUtHLEVBQVVDLEdBQ25DLE9BQXVDLEdBQTlCRCxFQUFXQyxHQUF1QixFQUFLQSxFQVM5QkssQ0FBWVQsRUFBS0csRUFBVUMsSUFFekNNLEVBQVUsRUFHVkMsRUFBTVAsRUFBa0IsRUFDeEJELEVBQVcsRUFDWEEsRUFHSixJQUFLempCLEVBQUksRUFBR0EsRUFBSWlrQixFQUFLamtCLEdBQUssRUFDeEI0akIsRUFDR00sRUFBVVosRUFBSWEsV0FBV25rQixLQUFPLEdBQ2hDa2tCLEVBQVVaLEVBQUlhLFdBQVdua0IsRUFBSSxLQUFPLEdBQ3BDa2tCLEVBQVVaLEVBQUlhLFdBQVdua0IsRUFBSSxLQUFPLEVBQ3JDa2tCLEVBQVVaLEVBQUlhLFdBQVdua0IsRUFBSSxJQUMvQjZqQixFQUFJRyxLQUFjSixHQUFPLEdBQU0sSUFDL0JDLEVBQUlHLEtBQWNKLEdBQU8sRUFBSyxJQUM5QkMsRUFBSUcsS0FBbUIsSUFBTkosRUFHSyxJQUFwQkYsSUFDRkUsRUFDR00sRUFBVVosRUFBSWEsV0FBV25rQixLQUFPLEVBQ2hDa2tCLEVBQVVaLEVBQUlhLFdBQVdua0IsRUFBSSxLQUFPLEVBQ3ZDNmpCLEVBQUlHLEtBQW1CLElBQU5KLEdBR0ssSUFBcEJGLElBQ0ZFLEVBQ0dNLEVBQVVaLEVBQUlhLFdBQVdua0IsS0FBTyxHQUNoQ2trQixFQUFVWixFQUFJYSxXQUFXbmtCLEVBQUksS0FBTyxFQUNwQ2trQixFQUFVWixFQUFJYSxXQUFXbmtCLEVBQUksS0FBTyxFQUN2QzZqQixFQUFJRyxLQUFjSixHQUFPLEVBQUssSUFDOUJDLEVBQUlHLEtBQW1CLElBQU5KLEdBR25CLE9BQU9DLEdBM0ZUbFcsRUFBUXlXLGNBa0hSLFNBQXdCQyxHQVF0QixJQVBBLElBQUlULEVBQ0FLLEVBQU1JLEVBQU1ua0IsT0FDWm9rQixFQUFhTCxFQUFNLEVBQ25CTSxFQUFRLEdBQ1JDLEVBQWlCLE1BR1p4a0IsRUFBSSxFQUFHeWtCLEVBQU9SLEVBQU1LLEVBQVl0a0IsRUFBSXlrQixFQUFNemtCLEdBQUt3a0IsRUFDdERELEVBQU03a0IsS0FBS2dsQixFQUNUTCxFQUFPcmtCLEVBQUlBLEVBQUl3a0IsRUFBa0JDLEVBQU9BLEVBQVF6a0IsRUFBSXdrQixJQUtyQyxJQUFmRixHQUNGVixFQUFNUyxFQUFNSixFQUFNLEdBQ2xCTSxFQUFNN2tCLEtBQ0ppbEIsRUFBT2YsR0FBTyxHQUNkZSxFQUFRZixHQUFPLEVBQUssSUFDcEIsT0FFc0IsSUFBZlUsSUFDVFYsR0FBT1MsRUFBTUosRUFBTSxJQUFNLEdBQUtJLEVBQU1KLEVBQU0sR0FDMUNNLEVBQU03a0IsS0FDSmlsQixFQUFPZixHQUFPLElBQ2RlLEVBQVFmLEdBQU8sRUFBSyxJQUNwQmUsRUFBUWYsR0FBTyxFQUFLLElBQ3BCLE1BSUosT0FBT1csRUFBTXBoQixLQUFLLEtBM0lwQixJQUxBLElBQUl3aEIsRUFBUyxHQUNUVCxFQUFZLEdBQ1pKLEVBQTRCLG9CQUFmYyxXQUE2QkEsV0FBYWpoQixNQUV2RHFNLEVBQU8sbUVBQ0ZoUSxFQUFJLEVBQUdpa0IsRUFBTWpVLEVBQUs5UCxPQUFRRixFQUFJaWtCLElBQU9qa0IsRUFDNUMya0IsRUFBTzNrQixHQUFLZ1EsRUFBS2hRLEdBQ2pCa2tCLEVBQVVsVSxFQUFLbVUsV0FBV25rQixJQUFNQSxFQVFsQyxTQUFTd2pCLEVBQVNGLEdBQ2hCLElBQUlXLEVBQU1YLEVBQUlwakIsT0FFZCxHQUFJK2pCLEVBQU0sRUFBSSxFQUNaLE1BQU0sSUFBSWxsQixNQUFNLGtEQUtsQixJQUFJMGtCLEVBQVdILEVBQUkvZSxRQUFRLEtBTzNCLE9BTmtCLElBQWRrZixJQUFpQkEsRUFBV1EsR0FNekIsQ0FBQ1IsRUFKY0EsSUFBYVEsRUFDL0IsRUFDQSxFQUFLUixFQUFXLEdBc0V0QixTQUFTaUIsRUFBYUwsRUFBT1EsRUFBT0MsR0FHbEMsSUFGQSxJQUFJbEIsRUFSb0JtQixFQVNwQkMsRUFBUyxHQUNKaGxCLEVBQUk2a0IsRUFBTzdrQixFQUFJOGtCLEVBQUs5a0IsR0FBSyxFQUNoQzRqQixHQUNJUyxFQUFNcmtCLElBQU0sR0FBTSxXQUNsQnFrQixFQUFNcmtCLEVBQUksSUFBTSxFQUFLLFFBQ1AsSUFBZnFrQixFQUFNcmtCLEVBQUksSUFDYmdsQixFQUFPdGxCLEtBZEZpbEIsR0FEaUJJLEVBZU1uQixJQWRULEdBQUssSUFDeEJlLEVBQU9JLEdBQU8sR0FBSyxJQUNuQkosRUFBT0ksR0FBTyxFQUFJLElBQ2xCSixFQUFhLEdBQU5JLElBYVQsT0FBT0MsRUFBTzdoQixLQUFLLElBakdyQitnQixFQUFVLElBQUlDLFdBQVcsSUFBTSxHQUMvQkQsRUFBVSxJQUFJQyxXQUFXLElBQU0sSSxrQkNuQi9CeFcsRUFBUXNYLEtBQU8sU0FBVUMsRUFBUUMsRUFBUUMsRUFBTUMsRUFBTUMsR0FDbkQsSUFBSWhnQixFQUFHaWdCLEVBQ0hDLEVBQWlCLEVBQVRGLEVBQWNELEVBQU8sRUFDN0JJLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkUsR0FBUyxFQUNUM2xCLEVBQUlvbEIsRUFBUUUsRUFBUyxFQUFLLEVBQzFCTSxFQUFJUixHQUFRLEVBQUksRUFDaEJ2QyxFQUFJcUMsRUFBT0MsRUFBU25sQixHQU94QixJQUxBQSxHQUFLNGxCLEVBRUx0Z0IsRUFBSXVkLEdBQU0sSUFBTzhDLEdBQVUsRUFDM0I5QyxLQUFROEMsRUFDUkEsR0FBU0gsRUFDRkcsRUFBUSxFQUFHcmdCLEVBQVMsSUFBSkEsRUFBVzRmLEVBQU9DLEVBQVNubEIsR0FBSUEsR0FBSzRsQixFQUFHRCxHQUFTLEdBS3ZFLElBSEFKLEVBQUlqZ0IsR0FBTSxJQUFPcWdCLEdBQVUsRUFDM0JyZ0IsS0FBUXFnQixFQUNSQSxHQUFTTixFQUNGTSxFQUFRLEVBQUdKLEVBQVMsSUFBSkEsRUFBV0wsRUFBT0MsRUFBU25sQixHQUFJQSxHQUFLNGxCLEVBQUdELEdBQVMsR0FFdkUsR0FBVSxJQUFOcmdCLEVBQ0ZBLEVBQUksRUFBSW9nQixNQUNILElBQUlwZ0IsSUFBTW1nQixFQUNmLE9BQU9GLEVBQUlNLElBQXNCQyxLQUFkakQsR0FBSyxFQUFJLEdBRTVCMEMsR0FBUWhkLEtBQUt3ZCxJQUFJLEVBQUdWLEdBQ3BCL2YsR0FBUW9nQixFQUVWLE9BQVE3QyxHQUFLLEVBQUksR0FBSzBDLEVBQUloZCxLQUFLd2QsSUFBSSxFQUFHemdCLEVBQUkrZixJQUc1QzFYLEVBQVFxWSxNQUFRLFNBQVVkLEVBQVFua0IsRUFBT29rQixFQUFRQyxFQUFNQyxFQUFNQyxHQUMzRCxJQUFJaGdCLEVBQUdpZ0IsRUFBR1UsRUFDTlQsRUFBaUIsRUFBVEYsRUFBY0QsRUFBTyxFQUM3QkksR0FBUSxHQUFLRCxHQUFRLEVBQ3JCRSxFQUFRRCxHQUFRLEVBQ2hCUyxFQUFlLEtBQVRiLEVBQWM5YyxLQUFLd2QsSUFBSSxHQUFJLElBQU14ZCxLQUFLd2QsSUFBSSxHQUFJLElBQU0sRUFDMUQvbEIsRUFBSW9sQixFQUFPLEVBQUtFLEVBQVMsRUFDekJNLEVBQUlSLEVBQU8sR0FBSyxFQUNoQnZDLEVBQUk5aEIsRUFBUSxHQUFnQixJQUFWQSxHQUFlLEVBQUlBLEVBQVEsRUFBSyxFQUFJLEVBbUMxRCxJQWpDQUEsRUFBUXdILEtBQUs0ZCxJQUFJcGxCLEdBRWJxbEIsTUFBTXJsQixJQUFVQSxJQUFVK2tCLEtBQzVCUCxFQUFJYSxNQUFNcmxCLEdBQVMsRUFBSSxFQUN2QnVFLEVBQUltZ0IsSUFFSm5nQixFQUFJaUQsS0FBSzhkLE1BQU05ZCxLQUFLK2QsSUFBSXZsQixHQUFTd0gsS0FBS2dlLEtBQ2xDeGxCLEdBQVNrbEIsRUFBSTFkLEtBQUt3ZCxJQUFJLEdBQUl6Z0IsSUFBTSxJQUNsQ0EsSUFDQTJnQixHQUFLLElBR0xsbEIsR0FERXVFLEVBQUlvZ0IsR0FBUyxFQUNOUSxFQUFLRCxFQUVMQyxFQUFLM2QsS0FBS3dkLElBQUksRUFBRyxFQUFJTCxJQUVwQk8sR0FBSyxJQUNmM2dCLElBQ0EyZ0IsR0FBSyxHQUdIM2dCLEVBQUlvZ0IsR0FBU0QsR0FDZkYsRUFBSSxFQUNKamdCLEVBQUltZ0IsR0FDS25nQixFQUFJb2dCLEdBQVMsR0FDdEJILEdBQU14a0IsRUFBUWtsQixFQUFLLEdBQUsxZCxLQUFLd2QsSUFBSSxFQUFHVixHQUNwQy9mLEdBQVFvZ0IsSUFFUkgsRUFBSXhrQixFQUFRd0gsS0FBS3dkLElBQUksRUFBR0wsRUFBUSxHQUFLbmQsS0FBS3dkLElBQUksRUFBR1YsR0FDakQvZixFQUFJLElBSUQrZixHQUFRLEVBQUdILEVBQU9DLEVBQVNubEIsR0FBUyxJQUFKdWxCLEVBQVV2bEIsR0FBSzRsQixFQUFHTCxHQUFLLElBQUtGLEdBQVEsR0FJM0UsSUFGQS9mLEVBQUtBLEdBQUsrZixFQUFRRSxFQUNsQkMsR0FBUUgsRUFDREcsRUFBTyxFQUFHTixFQUFPQyxFQUFTbmxCLEdBQVMsSUFBSnNGLEVBQVV0RixHQUFLNGxCLEVBQUd0Z0IsR0FBSyxJQUFLa2dCLEdBQVEsR0FFMUVOLEVBQU9DLEVBQVNubEIsRUFBSTRsQixJQUFVLElBQUovQyxJLGtCQ2xGNUIsSUFBSXBhLEVBQVcsR0FBR0EsU0FFbEJpRixFQUFPQyxRQUFVaEssTUFBTUMsU0FBVyxTQUFVaWdCLEdBQzFDLE1BQTZCLGtCQUF0QnBiLEVBQVNsRixLQUFLc2dCLEssb0JDRnZCLElBQUkyQyxFQUFVLEVBQVEsS0FFdEJBLEVBQVFBLEVBQVFDLEVBQUlELEVBQVFFLEVBQUcsU0FBVSxDQUFFemlCLE9BQVEsRUFBUSxRLG9CQ0gzRCxJQUFJMFMsRUFBUyxFQUFRLElBQ2pCRSxFQUFPLEVBQVEsSUFDZjhQLEVBQU8sRUFBUSxJQUNmQyxFQUFXLEVBQVEsS0FDbkJDLEVBQU0sRUFBUSxLQUdkTCxFQUFVLFNBQVVqUSxFQUFNbFYsRUFBTWxCLEdBQ2xDLElBUUlFLEVBQUt5bUIsRUFBS0MsRUFBS0MsRUFSZkMsRUFBWTFRLEVBQU9pUSxFQUFRRSxFQUMzQlEsRUFBWTNRLEVBQU9pUSxFQUFRVyxFQUMzQkMsRUFBWTdRLEVBQU9pUSxFQUFRQyxFQUMzQlksRUFBVzlRLEVBQU9pUSxFQUFRYyxFQUMxQkMsRUFBVWhSLEVBQU9pUSxFQUFRZ0IsRUFDekJ6bkIsRUFBU21uQixFQUFZdlEsRUFBU3lRLEVBQVl6USxFQUFPdFYsS0FBVXNWLEVBQU90VixHQUFRLEtBQU9zVixFQUFPdFYsSUFBUyxJQUFhLFVBQzlHc00sRUFBVXVaLEVBQVlyUSxFQUFPQSxFQUFLeFYsS0FBVXdWLEVBQUt4VixHQUFRLElBQ3pEb21CLEVBQVc5WixFQUFpQixZQUFNQSxFQUFpQixVQUFJLElBRzNELElBQUt0TixLQURENm1CLElBQVcvbUIsRUFBU2tCLEdBQ1psQixFQUlWNG1CLElBRkFELEdBQU9HLEdBQWFsbkIsUUFBMEJzQyxJQUFoQnRDLEVBQU9NLElBRXhCTixFQUFTSSxHQUFRRSxHQUU5QjJtQixFQUFNTyxHQUFXVCxFQUFNRCxFQUFJRSxFQUFLcFEsR0FBVTBRLEdBQTBCLG1CQUFQTixFQUFvQkYsRUFBSS9ZLFNBQVN2SyxLQUFNd2pCLEdBQU9BLEVBRXZHaG5CLEdBQVE2bUIsRUFBUzdtQixFQUFRTSxFQUFLMG1CLEVBQUt4USxFQUFPaVEsRUFBUWtCLEdBRWxEL1osRUFBUXROLElBQVEwbUIsR0FBS0osRUFBS2haLEVBQVN0TixFQUFLMm1CLEdBQ3hDSyxHQUFZSSxFQUFTcG5CLElBQVEwbUIsSUFBS1UsRUFBU3BuQixHQUFPMG1CLElBRzFEcFEsRUFBT0UsS0FBT0EsRUFFZDJQLEVBQVFFLEVBQUksRUFDWkYsRUFBUVcsRUFBSSxFQUNaWCxFQUFRQyxFQUFJLEVBQ1pELEVBQVFjLEVBQUksRUFDWmQsRUFBUWdCLEVBQUksR0FDWmhCLEVBQVFtQixFQUFJLEdBQ1puQixFQUFRa0IsRUFBSSxHQUNabEIsRUFBUW9CLEVBQUksSUFDWmxhLEVBQU9DLFFBQVU2WSxHLGlCQzFDakIsSUFBSXFCLEVBQUssRUFDTEMsRUFBS3ZmLEtBQUtDLFNBQ2RrRixFQUFPQyxRQUFVLFNBQVV0TixHQUN6QixNQUFPLFVBQVV3QyxZQUFlUixJQUFSaEMsRUFBb0IsR0FBS0EsRUFBSyxRQUFTd25CLEVBQUtDLEdBQUlyZixTQUFTLE8sb0JDSG5GLElBQUlzZixFQUFXLEVBQVEsS0FDbkJDLEVBQWlCLEVBQVEsS0FDekJDLEVBQWMsRUFBUSxLQUN0Qi9FLEVBQUsxa0IsT0FBT2dDLGVBRWhCbU4sRUFBUXlWLEVBQUksRUFBUSxJQUFvQjVrQixPQUFPZ0MsZUFBaUIsU0FBd0IwbkIsRUFBR1osRUFBR2EsR0FJNUYsR0FIQUosRUFBU0csR0FDVFosRUFBSVcsRUFBWVgsR0FBRyxHQUNuQlMsRUFBU0ksR0FDTEgsRUFBZ0IsSUFDbEIsT0FBTzlFLEVBQUdnRixFQUFHWixFQUFHYSxHQUNoQixNQUFPN2lCLElBQ1QsR0FBSSxRQUFTNmlCLEdBQWMsUUFBU0EsRUFBWSxNQUFNbFosVUFBVSw0QkFFaEUsTUFESSxVQUFXa1osSUFBWUQsRUFBRVosR0FBS2EsRUFBV3BuQixPQUN0Q21uQixJLG9CQ2RULElBQUlFLEVBQVcsRUFBUSxJQUN2QjFhLEVBQU9DLFFBQVUsU0FBVXlOLEdBQ3pCLElBQUtnTixFQUFTaE4sR0FBSyxNQUFNbk0sVUFBVW1NLEVBQUssc0JBQ3hDLE9BQU9BLEksb0JDSFQxTixFQUFPQyxTQUFXLEVBQVEsTUFBc0IsRUFBUSxHQUFSLEVBQW9CLFdBQ2xFLE9BQTRHLEdBQXJHblAsT0FBT2dDLGVBQWUsRUFBUSxJQUFSLENBQXlCLE9BQVEsSUFBSyxDQUFFd1csSUFBSyxXQUFjLE9BQU8sS0FBUXZULE0sb0JDRHpHLElBQUkya0IsRUFBVyxFQUFRLElBQ25CeGhCLEVBQVcsRUFBUSxJQUFhQSxTQUVoQ3loQixFQUFLRCxFQUFTeGhCLElBQWF3aEIsRUFBU3hoQixFQUFTQyxlQUNqRDZHLEVBQU9DLFFBQVUsU0FBVXlOLEdBQ3pCLE9BQU9pTixFQUFLemhCLEVBQVNDLGNBQWN1VSxHQUFNLEssb0JDSjNDLElBQUlnTixFQUFXLEVBQVEsSUFHdkIxYSxFQUFPQyxRQUFVLFNBQVV5TixFQUFJcUwsR0FDN0IsSUFBSzJCLEVBQVNoTixHQUFLLE9BQU9BLEVBQzFCLElBQUlqVixFQUFJa2MsRUFDUixHQUFJb0UsR0FBa0MsbUJBQXJCdGdCLEVBQUtpVixFQUFHM1MsWUFBNEIyZixFQUFTL0YsRUFBTWxjLEVBQUc1QyxLQUFLNlgsSUFBTSxPQUFPaUgsRUFDekYsR0FBZ0MsbUJBQXBCbGMsRUFBS2lWLEVBQUc5WCxXQUEyQjhrQixFQUFTL0YsRUFBTWxjLEVBQUc1QyxLQUFLNlgsSUFBTSxPQUFPaUgsRUFDbkYsSUFBS29FLEdBQWtDLG1CQUFyQnRnQixFQUFLaVYsRUFBRzNTLFlBQTRCMmYsRUFBUy9GLEVBQU1sYyxFQUFHNUMsS0FBSzZYLElBQU0sT0FBT2lILEVBQzFGLE1BQU1wVCxVQUFVLDZDLGtCQ1ZsQnZCLEVBQU9DLFFBQVUsU0FBVTJhLEVBQVF2bkIsR0FDakMsTUFBTyxDQUNMdEIsYUFBdUIsRUFBVDZvQixHQUNkaFosZUFBeUIsRUFBVGdaLEdBQ2hCalosV0FBcUIsRUFBVGlaLEdBQ1p2bkIsTUFBT0EsSyxvQkNMWCxJQUFJNFYsRUFBUyxFQUFRLElBQ2pCZ1EsRUFBTyxFQUFRLElBQ2Y0QixFQUFNLEVBQVEsSUFDZEMsRUFBTSxFQUFRLEdBQVIsQ0FBa0IsT0FDeEJDLEVBQVksRUFBUSxLQUNwQkMsRUFBWSxXQUNaQyxHQUFPLEdBQUtGLEdBQVdqbUIsTUFBTWttQixHQUVqQyxFQUFRLElBQVdFLGNBQWdCLFNBQVV4TixHQUMzQyxPQUFPcU4sRUFBVWxsQixLQUFLNlgsS0FHdkIxTixFQUFPQyxRQUFVLFNBQVV1YSxFQUFHN25CLEVBQUtnaUIsRUFBS3dHLEdBQ3ZDLElBQUlDLEVBQTJCLG1CQUFQekcsRUFDcEJ5RyxJQUFZUCxFQUFJbEcsRUFBSyxTQUFXc0UsRUFBS3RFLEVBQUssT0FBUWhpQixJQUNsRDZuQixFQUFFN25CLEtBQVNnaUIsSUFDWHlHLElBQVlQLEVBQUlsRyxFQUFLbUcsSUFBUTdCLEVBQUt0RSxFQUFLbUcsRUFBS04sRUFBRTduQixHQUFPLEdBQUs2bkIsRUFBRTduQixHQUFPc29CLEVBQUl4bEIsS0FBS29mLE9BQU9saUIsTUFDbkY2bkIsSUFBTXZSLEVBQ1J1UixFQUFFN25CLEdBQU9naUIsRUFDQ3dHLEVBR0RYLEVBQUU3bkIsR0FDWDZuQixFQUFFN25CLEdBQU9naUIsRUFFVHNFLEVBQUt1QixFQUFHN25CLEVBQUtnaUIsV0FMTjZGLEVBQUU3bkIsR0FDVHNtQixFQUFLdUIsRUFBRzduQixFQUFLZ2lCLE9BT2R2VSxTQUFTdlAsVUFBV21xQixHQUFXLFdBQ2hDLE1BQXNCLG1CQUFSN2EsTUFBc0JBLEtBQUsyYSxJQUFRQyxFQUFVbGxCLEtBQUtzSyxVLG9CQzdCbEVILEVBQU9DLFFBQVUsRUFBUSxHQUFSLENBQXFCLDRCQUE2QkcsU0FBU3JGLFcsa0JDQTVFaUYsRUFBT0MsU0FBVSxHLG9CQ0NqQixJQUFJb2IsRUFBWSxFQUFRLEtBQ3hCcmIsRUFBT0MsUUFBVSxTQUFVeEgsRUFBSTZpQixFQUFNOW9CLEdBRW5DLEdBREE2b0IsRUFBVTVpQixRQUNHOUQsSUFBVDJtQixFQUFvQixPQUFPN2lCLEVBQy9CLE9BQVFqRyxHQUNOLEtBQUssRUFBRyxPQUFPLFNBQVV1RCxHQUN2QixPQUFPMEMsRUFBRzVDLEtBQUt5bEIsRUFBTXZsQixJQUV2QixLQUFLLEVBQUcsT0FBTyxTQUFVQSxFQUFHQyxHQUMxQixPQUFPeUMsRUFBRzVDLEtBQUt5bEIsRUFBTXZsQixFQUFHQyxJQUUxQixLQUFLLEVBQUcsT0FBTyxTQUFVRCxFQUFHQyxFQUFHdWlCLEdBQzdCLE9BQU85ZixFQUFHNUMsS0FBS3lsQixFQUFNdmxCLEVBQUdDLEVBQUd1aUIsSUFHL0IsT0FBTyxXQUNMLE9BQU85ZixFQUFHeEcsTUFBTXFwQixFQUFNL29CLGMsbUJDakIxQixJQUFJNFcsRUFBTyxFQUFRLElBQ2ZGLEVBQVMsRUFBUSxJQUNqQnNTLEVBQVMscUJBQ1RDLEVBQVF2UyxFQUFPc1MsS0FBWXRTLEVBQU9zUyxHQUFVLEtBRS9DdmIsRUFBT0MsUUFBVSxTQUFVdE4sRUFBS1UsR0FDL0IsT0FBT21vQixFQUFNN29CLEtBQVM2b0IsRUFBTTdvQixRQUFpQmdDLElBQVZ0QixFQUFzQkEsRUFBUSxNQUNoRSxXQUFZLElBQUlyQixLQUFLLENBQ3RCb1gsUUFBU0QsRUFBS0MsUUFDZHFTLEtBQU0sRUFBUSxLQUFnQixPQUFTLFNBQ3ZDQyxVQUFXLDBDLGtCQ1ZiMWIsRUFBT0MsUUFBVSxTQUFVeU4sR0FDekIsR0FBaUIsbUJBQU5BLEVBQWtCLE1BQU1uTSxVQUFVbU0sRUFBSyx1QkFDbEQsT0FBT0EsSSxpQ0NBVCxJQUFJaU8sRUFBYyxFQUFRLElBQ3RCQyxFQUFVLEVBQVEsS0FDbEJDLEVBQU8sRUFBUSxLQUNmQyxFQUFNLEVBQVEsS0FDZHBILEVBQVcsRUFBUSxLQUNuQnFILEVBQVUsRUFBUSxJQUNsQkMsRUFBVWxyQixPQUFPeUYsT0FHckJ5SixFQUFPQyxTQUFXK2IsR0FBVyxFQUFRLEdBQVIsRUFBb0IsV0FDL0MsSUFBSUMsRUFBSSxHQUNKbkMsRUFBSSxHQUVKZixFQUFJN1gsU0FDSmdiLEVBQUksdUJBR1IsT0FGQUQsRUFBRWxELEdBQUssRUFDUG1ELEVBQUVwbkIsTUFBTSxJQUFJcEMsU0FBUSxTQUFVNEIsR0FBS3dsQixFQUFFeGxCLEdBQUtBLEtBQ2QsR0FBckIwbkIsRUFBUSxHQUFJQyxHQUFHbEQsSUFBV2pvQixPQUFPVyxLQUFLdXFCLEVBQVEsR0FBSWxDLElBQUlya0IsS0FBSyxLQUFPeW1CLEtBQ3RFLFNBQWdCN3BCLEVBQVFJLEdBTTNCLElBTEEsSUFBSTBwQixFQUFJekgsRUFBU3JpQixHQUNiK3BCLEVBQU83cEIsVUFBVUMsT0FDakI2QixFQUFRLEVBQ1Jnb0IsRUFBYVIsRUFBS25HLEVBQ2xCNEcsRUFBU1IsRUFBSXBHLEVBQ1YwRyxFQUFPL25CLEdBTVosSUFMQSxJQUlJMUIsRUFKQW9tQixFQUFJZ0QsRUFBUXhwQixVQUFVOEIsTUFDdEI1QyxFQUFPNHFCLEVBQWFULEVBQVE3QyxHQUFHNWpCLE9BQU9rbkIsRUFBV3RELElBQU02QyxFQUFRN0MsR0FDL0R2bUIsRUFBU2YsRUFBS2UsT0FDZCtwQixFQUFJLEVBRUQvcEIsRUFBUytwQixHQUNkNXBCLEVBQU1sQixFQUFLOHFCLEtBQ05aLElBQWVXLEVBQU96bUIsS0FBS2tqQixFQUFHcG1CLEtBQU13cEIsRUFBRXhwQixHQUFPb21CLEVBQUVwbUIsSUFFdEQsT0FBT3dwQixHQUNQSCxHLG9CQ3BDSixJQUFJUSxFQUFRLEVBQVEsS0FDaEJDLEVBQWMsRUFBUSxLQUUxQnpjLEVBQU9DLFFBQVVuUCxPQUFPVyxNQUFRLFNBQWMrb0IsR0FDNUMsT0FBT2dDLEVBQU1oQyxFQUFHaUMsSyxvQkNMbEIsSUFBSTVCLEVBQU0sRUFBUSxJQUNkNkIsRUFBWSxFQUFRLElBQ3BCQyxFQUFlLEVBQVEsSUFBUixFQUE2QixHQUM1Q0MsRUFBVyxFQUFRLElBQVIsQ0FBeUIsWUFFeEM1YyxFQUFPQyxRQUFVLFNBQVUxTyxFQUFRc3JCLEdBQ2pDLElBR0lscUIsRUFIQTZuQixFQUFJa0MsRUFBVW5yQixHQUNkZSxFQUFJLEVBQ0prRCxFQUFTLEdBRWIsSUFBSzdDLEtBQU82bkIsRUFBTzduQixHQUFPaXFCLEdBQVUvQixFQUFJTCxFQUFHN25CLElBQVE2QyxFQUFPeEQsS0FBS1csR0FFL0QsS0FBT2txQixFQUFNcnFCLE9BQVNGLEdBQU91b0IsRUFBSUwsRUFBRzduQixFQUFNa3FCLEVBQU12cUIsU0FDN0NxcUIsRUFBYW5uQixFQUFRN0MsSUFBUTZDLEVBQU94RCxLQUFLVyxJQUU1QyxPQUFPNkMsSSxrQkNmVCxJQUFJdUYsRUFBVyxHQUFHQSxTQUVsQmlGLEVBQU9DLFFBQVUsU0FBVXlOLEdBQ3pCLE9BQU8zUyxFQUFTbEYsS0FBSzZYLEdBQUkxVyxNQUFNLEdBQUksSyxvQkNEckMsSUFBSTBsQixFQUFZLEVBQVEsSUFDcEJJLEVBQVcsRUFBUSxLQUNuQkMsRUFBa0IsRUFBUSxLQUM5Qi9jLEVBQU9DLFFBQVUsU0FBVStjLEdBQ3pCLE9BQU8sU0FBVUMsRUFBT0MsRUFBSXBoQixHQUMxQixJQUdJekksRUFIQW1uQixFQUFJa0MsRUFBVU8sR0FDZHpxQixFQUFTc3FCLEVBQVN0QyxFQUFFaG9CLFFBQ3BCNkIsRUFBUTBvQixFQUFnQmpoQixFQUFXdEosR0FJdkMsR0FBSXdxQixHQUFlRSxHQUFNQSxHQUFJLEtBQU8xcUIsRUFBUzZCLEdBRzNDLElBRkFoQixFQUFRbW5CLEVBQUVubUIsT0FFR2hCLEVBQU8sT0FBTyxPQUV0QixLQUFNYixFQUFTNkIsRUFBT0EsSUFBUyxJQUFJMm9CLEdBQWUzb0IsS0FBU21tQixJQUM1REEsRUFBRW5tQixLQUFXNm9CLEVBQUksT0FBT0YsR0FBZTNvQixHQUFTLEVBQ3BELE9BQVEyb0IsSUFBZ0IsSyxvQkNuQjlCLElBQUlHLEVBQVksRUFBUSxJQUNwQmplLEVBQU1yRSxLQUFLcUUsSUFDZmMsRUFBT0MsUUFBVSxTQUFVeU4sR0FDekIsT0FBT0EsRUFBSyxFQUFJeE8sRUFBSWllLEVBQVV6UCxHQUFLLGtCQUFvQixJLG9CQ0p6RCxJQUFJeVAsRUFBWSxFQUFRLElBQ3BCaGUsRUFBTXRFLEtBQUtzRSxJQUNYRCxFQUFNckUsS0FBS3FFLElBQ2ZjLEVBQU9DLFFBQVUsU0FBVTVMLEVBQU83QixHQUVoQyxPQURBNkIsRUFBUThvQixFQUFVOW9CLElBQ0gsRUFBSThLLEVBQUk5SyxFQUFRN0IsRUFBUSxHQUFLME0sRUFBSTdLLEVBQU83QixLLG9CQ0x6RCxJQUFJNHFCLEVBQVMsRUFBUSxHQUFSLENBQXFCLFFBQzlCQyxFQUFNLEVBQVEsSUFDbEJyZCxFQUFPQyxRQUFVLFNBQVV0TixHQUN6QixPQUFPeXFCLEVBQU96cUIsS0FBU3lxQixFQUFPenFCLEdBQU8wcUIsRUFBSTFxQixNLGtCQ0YzQ3FOLEVBQU9DLFFBQVUsZ0dBRWZuTCxNQUFNLE0sbUJDRlIsSUFBSWluQixFQUFVLEVBQVEsSUFDbEJ1QixFQUFVLEVBQVEsSUFDdEJ0ZCxFQUFPQyxRQUFVLFNBQVV5TixHQUN6QixPQUFPcU8sRUFBUXVCLEVBQVE1UCxNLGtCQ0p6QnpOLEVBQVF5VixFQUFJNWtCLE9BQU9ZLHVCLGtCQ0FuQnVPLEVBQVF5VixFQUFJLEdBQUdoTyxzQixvQkNDZixJQUFJNFYsRUFBVSxFQUFRLElBQ3RCdGQsRUFBT0MsUUFBVSxTQUFVeU4sR0FDekIsT0FBTzVjLE9BQU93c0IsRUFBUTVQLE0sbUJDRnhCLElBQUk2UCxFQUFNLEVBQVEsS0FFbEJ2ZCxFQUFPQyxRQUFVblAsT0FBTyxLQUFLNFcscUJBQXFCLEdBQUs1VyxPQUFTLFNBQVU0YyxHQUN4RSxNQUFrQixVQUFYNlAsRUFBSTdQLEdBQWtCQSxFQUFHNVksTUFBTSxJQUFNaEUsT0FBTzRjLEssaUJDSHJEMU4sRUFBT0MsUUFBVSxTQUFVeU4sR0FDekIsR0FBVS9ZLE1BQU4rWSxFQUFpQixNQUFNbk0sVUFBVSx5QkFBMkJtTSxHQUNoRSxPQUFPQSxJLGlCQ0ZULElBQUk4UCxFQUFPM2lCLEtBQUsyaUIsS0FDWjdFLEVBQVE5ZCxLQUFLOGQsTUFDakIzWSxFQUFPQyxRQUFVLFNBQVV5TixHQUN6QixPQUFPZ0wsTUFBTWhMLEdBQU1BLEdBQU0sR0FBS0EsRUFBSyxFQUFJaUwsRUFBUTZFLEdBQU05UCxLLGlCQ0V2RDFOLEVBQU9DLFFBTlAsU0FBd0J0UCxFQUFVQyxHQUNoQ0QsRUFBU0UsVUFBWUMsT0FBT0MsT0FBT0gsRUFBV0MsV0FDOUNGLEVBQVNFLFVBQVVHLFlBQWNMLEVBQ2pDQSxFQUFTTSxVQUFZTCxJLGlCQ0h2QixTQUFTNFEsSUFlUCxPQWRBeEIsRUFBT0MsUUFBVXVCLEVBQVcxUSxPQUFPeUYsUUFBVSxTQUFVbEUsR0FDckQsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlDLFVBQVVDLE9BQVFGLElBQUssQ0FDekMsSUFBSUcsRUFBU0YsVUFBVUQsR0FFdkIsSUFBSyxJQUFJSyxLQUFPRixFQUNWM0IsT0FBT0QsVUFBVTRRLGVBQWU1TCxLQUFLcEQsRUFBUUUsS0FDL0NOLEVBQU9NLEdBQU9GLEVBQU9FLElBSzNCLE9BQU9OLEdBR0ZtUCxFQUFTdlAsTUFBTWtPLEtBQU01TixXQUc5QnlOLEVBQU9DLFFBQVV1QixHLGlDQ2xCakIsWUFFQTFRLE9BQU9nQyxlQUFlbU4sRUFBUyxhQUFjLENBQzNDNU0sT0FBTyxJQUdULElBQUltTyxFQUFXMVEsT0FBT3lGLFFBQVUsU0FBVWxFLEdBQVUsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlDLFVBQVVDLE9BQVFGLElBQUssQ0FBRSxJQUFJRyxFQUFTRixVQUFVRCxHQUFJLElBQUssSUFBSUssS0FBT0YsRUFBYzNCLE9BQU9ELFVBQVU0USxlQUFlNUwsS0FBS3BELEVBQVFFLEtBQVFOLEVBQU9NLEdBQU9GLEVBQU9FLElBQVksT0FBT04sR0FFblBvckIsRUFBZSxXQUFjLFNBQVM1cUIsRUFBaUJSLEVBQVFhLEdBQVMsSUFBSyxJQUFJWixFQUFJLEVBQUdBLEVBQUlZLEVBQU1WLE9BQVFGLElBQUssQ0FBRSxJQUFJZ1osRUFBYXBZLEVBQU1aLEdBQUlnWixFQUFXdlosV0FBYXVaLEVBQVd2WixhQUFjLEVBQU91WixFQUFXMUosY0FBZSxFQUFVLFVBQVcwSixJQUFZQSxFQUFXM0osVUFBVyxHQUFNN1EsT0FBT2dDLGVBQWVULEVBQVFpWixFQUFXM1ksSUFBSzJZLElBQWlCLE9BQU8sU0FBVWhLLEVBQWFvYyxFQUFZQyxHQUFpSixPQUE5SEQsR0FBWTdxQixFQUFpQnlPLEVBQVl6USxVQUFXNnNCLEdBQWlCQyxHQUFhOXFCLEVBQWlCeU8sRUFBYXFjLEdBQXFCcmMsR0FBN2dCLEdBSWZzYyxFQUVKLFNBQWlDam9CLEdBQU8sR0FBSUEsR0FBT0EsRUFBSWtvQixXQUFjLE9BQU9sb0IsRUFBYyxJQUFJbW9CLEVBQVMsR0FBSSxHQUFXLE1BQVBub0IsRUFBZSxJQUFLLElBQUloRCxLQUFPZ0QsRUFBVzdFLE9BQU9ELFVBQVU0USxlQUFlNUwsS0FBS0YsRUFBS2hELEtBQU1tckIsRUFBT25yQixHQUFPZ0QsRUFBSWhELElBQWdDLE9BQXRCbXJCLEVBQU9DLFFBQVVwb0IsRUFBWW1vQixFQUZ0UEUsQ0FGQyxFQUFRLElBUXJCLFNBQVNDLEVBQWdCNWMsRUFBVUMsR0FBZSxLQUFNRCxhQUFvQkMsR0FBZ0IsTUFBTSxJQUFJQyxVQUFVLHFDQUVoSCxTQUFTMmMsRUFBMkJsYyxFQUFNbk0sR0FBUSxJQUFLbU0sRUFBUSxNQUFNLElBQUlDLGVBQWUsNkRBQWdFLE9BQU9wTSxHQUF5QixpQkFBVEEsR0FBcUMsbUJBQVRBLEVBQThCbU0sRUFBUG5NLEVBS2xPLElBSUlzb0IsRUFBWSxHQUdaQyxFQUFtQixJQUNuQkMsRUFBZ0IsSUFDaEJDLEVBQXFCLElBR3JCQyxFQUFnQixJQUNoQkMsRUFBbUIsSUFFbkJDLEVBQVksY0FBZXhWLEdBQVUsT0FBT3ZELEtBQUs1TCxVQUFVNGtCLFVBQzNEQyxFQUFZLGNBQWUxVixHQUFVLDBCQUEwQnZELEtBQUs1TCxVQUFVNGtCLFVBRTlFMVMsRUFBWSwwQ0FJWjRTLEVBQVMsU0FBVS9RLEdBR3JCLFNBQVMrUSxJQUNQLElBQUlsa0IsRUFFQTBILEVBQU9DLEVBRVg0YixFQUFnQjlkLEtBQU15ZSxHQUV0QixJQUFLLElBQUkvbEIsRUFBT3RHLFVBQVVDLE9BQVFzRyxFQUFPN0MsTUFBTTRDLEdBQU9FLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDM0VELEVBQUtDLEdBQVF4RyxVQUFVd0csR0FHekIsT0FBZXFKLEVBQVNDLEVBQVE2YixFQUEyQi9kLE1BQU96RixFQUFPa2tCLEVBQU8zdEIsV0FBYUgsT0FBTytaLGVBQWUrVCxJQUFTL29CLEtBQUs1RCxNQUFNeUksRUFBTSxDQUFDeUYsTUFBTWhMLE9BQU8yRCxLQUFpQnVKLEVBQU0vSyxNQUFRLENBQ3hMdW5CLFNBQVMsR0FDUnhjLEVBQU15YyxvQkFBc0IsV0FDN0IsSUFBSTFZLEVBQVEvRCxFQUFNMGMsT0FFbEIsR0FBSzNZLEVBQUwsQ0FHQSxJQUFJL1MsRUFBUStTLEVBQU0vUyxNQUNkMnJCLEVBQWlCNVksRUFBTTRZLGVBQ3ZCQyxFQUFlN1ksRUFBTTZZLGFBR3pCNWMsRUFBTTZjLGNBQWMsQ0FDbEI3ckIsTUFBT0EsRUFDUDJyQixlQUFnQkEsRUFDaEJDLGFBQWNBLE1BRWY1YyxFQUFNOGMsVUFBWSxTQUFVQyxFQUFNQyxHQUNuQyxPQUFPRCxFQUFLcmhCLFVBQVUsRUFBR3NoQixHQUFVdnFCLE1BQU0sT0FDeEN1TixFQUFNNmMsY0FBZ0IsU0FBVUksR0FDakMsSUFBSUMsRUFBWWh0QixVQUFVQyxPQUFTLFFBQXNCbUMsSUFBakJwQyxVQUFVLElBQW1CQSxVQUFVLEdBQzNFaXRCLEVBQWlCbmQsRUFBTW9kLFNBQ3ZCQyxFQUFRRixFQUFlRSxNQUN2QmpJLEVBQVMrSCxFQUFlL0gsT0FHNUIsR0FBSWlJLEVBQU1sdEIsUUFBVWlsQixHQUFVLEVBQUcsQ0FFL0JwVixFQUFNb2QsU0FBU0MsTUFBUUEsRUFBTTFvQixNQUFNLEVBQUd5Z0IsRUFBUyxHQUcvQyxJQUFJa0ksRUFBUXRkLEVBQU1vZCxTQUFTQyxNQUFNbHRCLE9BRWpDLEdBQUltdEIsRUFBUXBCLEVBQWUsQ0FDekIsSUFBSXFCLEVBQVNELEVBQVFwQixFQUVyQmxjLEVBQU1vZCxTQUFTQyxNQUFRQSxFQUFNMW9CLE1BQU00b0IsRUFBUUQsR0FDM0N0ZCxFQUFNb2QsU0FBU2hJLE9BQVM1YyxLQUFLc0UsSUFBSWtELEVBQU1vZCxTQUFTaEksT0FBU21JLEVBQVEsSUFJckUsSUFBSUMsRUFBWUMsS0FBS0MsTUFFckIsR0FBSVIsRUFBVyxDQUNiLElBQUlucUIsRUFBT2lOLEVBQU1vZCxTQUFTQyxNQUFNcmQsRUFBTW9kLFNBQVNoSSxRQUUvQyxHQUFJcmlCLEdBQVF5cUIsRUFBWXpxQixFQUFLeXFCLFVBQVlyQixFQUFrQixDQUl6RCxJQUFJd0IsRUFBSyx5QkFHTEMsRUFBVzVkLEVBQU04YyxVQUFVL3BCLEVBQUsvQixNQUFPK0IsRUFBSzRwQixnQkFBZ0J4cUIsTUFBTTJiLE1BQU02UCxHQUd4RUUsRUFBVTdkLEVBQU04YyxVQUFVRyxFQUFPanNCLE1BQU9pc0IsRUFBT04sZ0JBQWdCeHFCLE1BQU0yYixNQUFNNlAsR0FFL0UsR0FBSUMsR0FBWUMsR0FBV0EsRUFBUSxHQUFHQyxXQUFXRixFQUFTLElBS3hELFlBRkE1ZCxFQUFNb2QsU0FBU0MsTUFBTXJkLEVBQU1vZCxTQUFTaEksUUFBVWpXLEVBQVMsR0FBSThkLEVBQVEsQ0FBRU8sVUFBV0EsTUFRdEZ4ZCxFQUFNb2QsU0FBU0MsTUFBTTF0QixLQUFLd1AsRUFBUyxHQUFJOGQsRUFBUSxDQUFFTyxVQUFXQSxLQUM1RHhkLEVBQU1vZCxTQUFTaEksVUFDZHBWLEVBQU0rZCxhQUFlLFNBQVVkLEdBQ2hDLElBQUlsWixFQUFRL0QsRUFBTTBjLE9BRWIzWSxJQUdMQSxFQUFNL1MsTUFBUWlzQixFQUFPanNCLE1BQ3JCK1MsRUFBTTRZLGVBQWlCTSxFQUFPTixlQUM5QjVZLEVBQU02WSxhQUFlSyxFQUFPTCxhQUU1QjVjLEVBQU1uUCxNQUFNdVEsY0FBYzZiLEVBQU9qc0IsU0FDaENnUCxFQUFNZ2UsWUFBYyxTQUFVZixHQUUvQixJQUFJbFosRUFBUS9ELEVBQU0wYyxPQUNkM3BCLEVBQU9pTixFQUFNb2QsU0FBU0MsTUFBTXJkLEVBQU1vZCxTQUFTaEksUUFFM0NyaUIsR0FBUWdSLElBQ1YvRCxFQUFNb2QsU0FBU0MsTUFBTXJkLEVBQU1vZCxTQUFTaEksUUFBVWpXLEVBQVMsR0FBSXBNLEVBQU0sQ0FDL0Q0cEIsZUFBZ0I1WSxFQUFNNFksZUFDdEJDLGFBQWM3WSxFQUFNNlksZ0JBS3hCNWMsRUFBTTZjLGNBQWNJLEdBQ3BCamQsRUFBTStkLGFBQWFkLElBQ2xCamQsRUFBTWllLFVBQVksV0FDbkIsSUFBSUMsRUFBa0JsZSxFQUFNb2QsU0FDeEJDLEVBQVFhLEVBQWdCYixNQUN4QmpJLEVBQVM4SSxFQUFnQjlJLE9BSXpCNkgsRUFBU0ksRUFBTWpJLEVBQVMsR0FFeEI2SCxJQUVGamQsRUFBTStkLGFBQWFkLEdBQ25CamQsRUFBTW9kLFNBQVNoSSxPQUFTNWMsS0FBS3NFLElBQUlzWSxFQUFTLEVBQUcsS0FFOUNwVixFQUFNbWUsVUFBWSxXQUNuQixJQUFJQyxFQUFrQnBlLEVBQU1vZCxTQUN4QkMsRUFBUWUsRUFBZ0JmLE1BQ3hCakksRUFBU2dKLEVBQWdCaEosT0FJekI2SCxFQUFTSSxFQUFNakksRUFBUyxHQUV4QjZILElBRUZqZCxFQUFNK2QsYUFBYWQsR0FDbkJqZCxFQUFNb2QsU0FBU2hJLE9BQVM1YyxLQUFLcUUsSUFBSXVZLEVBQVMsRUFBR2lJLEVBQU1sdEIsT0FBUyxLQUU3RDZQLEVBQU1xZSxlQUFpQixTQUFVOW9CLEdBQ2xDLElBQUlrTyxFQUFjekQsRUFBTW5QLE1BQ3BCeXRCLEVBQVU3YSxFQUFZNmEsUUFDdEJDLEVBQWU5YSxFQUFZOGEsYUFDM0JDLEVBQWUvYSxFQUFZK2EsYUFDM0JDLEVBQVloYixFQUFZZ2IsVUFHNUIsSUFBSUEsSUFDRkEsRUFBVWxwQixJQUVOQSxFQUFFOFcsa0JBSFIsQ0FoS2UsS0F3S1g5VyxFQUFFbXBCLFNBQ0pucEIsRUFBRXZGLE9BQU8ydUIsT0FHWCxJQUFJQyxFQUFZcnBCLEVBQUV2RixPQUNkZ0IsRUFBUTR0QixFQUFVNXRCLE1BQ2xCMnJCLEVBQWlCaUMsRUFBVWpDLGVBQzNCQyxFQUFlZ0MsRUFBVWhDLGFBR3pCaUMsR0FBZ0JOLEVBQWUsSUFBTSxNQUFNTyxPQUFPUixHQUV0RCxHQTdMWSxJQTZMUi9vQixFQUFFbXBCLFVBQTRCRixHQUFnQnhlLEVBQU0vSyxNQUFNdW5CLFFBSTVELEdBRkFqbkIsRUFBRTZXLGlCQUVFN1csRUFBRW1YLFNBQVUsQ0FFZCxJQUFJcVMsRUFBbUIvZSxFQUFNOGMsVUFBVTlyQixFQUFPMnJCLEdBQzFDcUMsRUFBWUQsRUFBaUI1dUIsT0FBUyxFQUN0Qzh1QixFQUFVamYsRUFBTThjLFVBQVU5ckIsRUFBTzRyQixHQUFjenNCLE9BQVMsRUFDeEQrdUIsRUFBWWx1QixFQUFNeUIsTUFBTSxNQUFNNEssS0FBSSxTQUFVcUQsRUFBTXpRLEdBQ3BELE9BQUlBLEdBQUsrdUIsR0FBYS91QixHQUFLZ3ZCLEdBQVd2ZSxFQUFLb2QsV0FBV2UsR0FDN0NuZSxFQUFLaEYsVUFBVW1qQixFQUFhMXVCLFFBRzlCdVEsS0FDTnROLEtBQUssTUFFUixHQUFJcEMsSUFBVWt1QixFQUFXLENBQ3ZCLElBQUlDLEVBQWdCSixFQUFpQkMsR0FFckNoZixFQUFNZ2UsWUFBWSxDQUNoQmh0QixNQUFPa3VCLEVBR1B2QyxlQUFnQndDLEVBQWNyQixXQUFXZSxHQUFnQmxDLEVBQWlCa0MsRUFBYTF1QixPQUFTd3NCLEVBRWhHQyxhQUFjQSxHQUFnQjVyQixFQUFNYixPQUFTK3VCLEVBQVUvdUIsZ0JBR3RELEdBQUl3c0IsSUFBbUJDLEVBQWMsQ0FFMUMsSUFBSXdDLEVBQW9CcGYsRUFBTThjLFVBQVU5ckIsRUFBTzJyQixHQUMzQzBDLEVBQWFELEVBQWtCanZCLE9BQVMsRUFDeENtdkIsRUFBV3RmLEVBQU04YyxVQUFVOXJCLEVBQU80ckIsR0FBY3pzQixPQUFTLEVBQ3pEb3ZCLEVBQWlCSCxFQUFrQkMsR0FFdkNyZixFQUFNZ2UsWUFBWSxDQUNoQmh0QixNQUFPQSxFQUFNeUIsTUFBTSxNQUFNNEssS0FBSSxTQUFVcUQsRUFBTXpRLEdBQzNDLE9BQUlBLEdBQUtvdkIsR0FBY3B2QixHQUFLcXZCLEVBQ25CVCxFQUFlbmUsRUFHakJBLEtBQ050TixLQUFLLE1BR1J1cEIsZUFBZ0IsS0FBS3RaLEtBQUtrYyxHQUFrQjVDLEVBQWlCa0MsRUFBYTF1QixPQUFTd3NCLEVBRW5GQyxhQUFjQSxFQUFlaUMsRUFBYTF1QixRQUFVbXZCLEVBQVdELEVBQWEsU0FFekUsQ0FDTCxJQUFJRyxFQUFtQjdDLEVBQWlCa0MsRUFBYTF1QixPQUVyRDZQLEVBQU1nZSxZQUFZLENBRWhCaHRCLE1BQU9BLEVBQU0wSyxVQUFVLEVBQUdpaEIsR0FBa0JrQyxFQUFlN3RCLEVBQU0wSyxVQUFVa2hCLEdBRTNFRCxlQUFnQjZDLEVBQ2hCNUMsYUFBYzRDLFNBR2IsR0F6UFcsSUF5UFBqcUIsRUFBRW1wQixRQUErQixDQUMxQyxJQUFJZSxFQUFlOUMsSUFBbUJDLEVBR3RDLEdBRnNCNXJCLEVBQU0wSyxVQUFVLEVBQUdpaEIsR0FFckIrQyxTQUFTYixLQUFrQlksRUFBYyxDQUUzRGxxQixFQUFFNlcsaUJBRUYsSUFBSXVULEVBQW9CaEQsRUFBaUJrQyxFQUFhMXVCLE9BRXRENlAsRUFBTWdlLFlBQVksQ0FFaEJodEIsTUFBT0EsRUFBTTBLLFVBQVUsRUFBR2loQixFQUFpQmtDLEVBQWExdUIsUUFBVWEsRUFBTTBLLFVBQVVraEIsR0FFbEZELGVBQWdCZ0QsRUFDaEIvQyxhQUFjK0MsVUFHYixHQTdRTyxLQTZRSHBxQixFQUFFbXBCLFNBRVgsR0FBSS9CLElBQW1CQyxFQUFjLENBRW5DLElBQ0lnRCxFQURPNWYsRUFBTThjLFVBQVU5ckIsRUFBTzJyQixHQUFnQnhxQixNQUMvQjJiLE1BQU0sUUFFekIsR0FBSThSLEdBQVdBLEVBQVEsR0FBSSxDQUN6QnJxQixFQUFFNlcsaUJBR0YsSUFBSXlULEVBQVMsS0FBT0QsRUFBUSxHQUN4QkUsRUFBcUJuRCxFQUFpQmtELEVBQU8xdkIsT0FFakQ2UCxFQUFNZ2UsWUFBWSxDQUVoQmh0QixNQUFPQSxFQUFNMEssVUFBVSxFQUFHaWhCLEdBQWtCa0QsRUFBUzd1QixFQUFNMEssVUFBVWtoQixHQUVyRUQsZUFBZ0JtRCxFQUNoQmxELGFBQWNrRCxXQUlmLEdBOVJRLEtBOFJKdnFCLEVBQUVtcEIsU0FBOEJucEIsRUFBRW1wQixVQUFZM0MsR0FBb0J4bUIsRUFBRW1wQixVQUFZMUMsR0FBaUJ6bUIsRUFBRW1wQixVQUFZekMsRUFBb0IsQ0FDNUksSUFBSThELE9BQVEsRUEvUkMsS0FpU1R4cUIsRUFBRW1wQixTQUE4Qm5wQixFQUFFbVgsU0FDcENxVCxFQUFRLENBQUMsSUFBSyxLQUNMeHFCLEVBQUVtcEIsVUFBWTNDLEVBRXJCZ0UsRUFERXhxQixFQUFFbVgsU0FDSSxDQUFDLElBQUssS0FFTixDQUFDLElBQUssS0FFUG5YLEVBQUVtcEIsVUFBWTFDLEVBRXJCK0QsRUFERXhxQixFQUFFbVgsU0FDSSxDQUFDLElBQUssS0FFTixDQUFDLElBQUssS0FFUG5YLEVBQUVtcEIsVUFBWXpDLEdBQXVCMW1CLEVBQUVtWCxXQUNoRHFULEVBQVEsQ0FBQyxJQUFLLE1BSVpwRCxJQUFtQkMsR0FBZ0JtRCxJQUNyQ3hxQixFQUFFNlcsaUJBRUZwTSxFQUFNZ2UsWUFBWSxDQUNoQmh0QixNQUFPQSxFQUFNMEssVUFBVSxFQUFHaWhCLEdBQWtCb0QsRUFBTSxHQUFLL3VCLEVBQU0wSyxVQUFVaWhCLEVBQWdCQyxHQUFnQm1ELEVBQU0sR0FBSy91QixFQUFNMEssVUFBVWtoQixHQUVsSUQsZUFBZ0JBLEVBQ2hCQyxhQUFjQSxFQUFlLFdBR3ZCTixFQUNaL21CLEVBQUVnWCxTQUFXaFgsRUFBRW1wQixVQUFZNUMsRUFDM0J2bUIsRUFBRWtYLFNBQVdsWCxFQUFFbXBCLFVBQVk1QyxJQUFldm1CLEVBQUVtWCxVQUFhblgsRUFBRWlYLFFBSS9DOFAsRUFDWi9tQixFQUFFZ1gsU0FBV2hYLEVBQUVtcEIsVUFBWTVDLEdBQWF2bUIsRUFBRW1YLFNBQVcwUCxFQUNyRDdtQixFQUFFa1gsU0F6VVEsS0F5VUdsWCxFQUFFbXBCLFFBQ2ZucEIsRUFBRWtYLFNBQVdsWCxFQUFFbXBCLFVBQVk1QyxHQUFhdm1CLEVBQUVtWCxZQUFjblgsRUFBRWlYLFFBQ3hEalgsRUFBRTZXLGlCQUVGcE0sRUFBTW1lLGFBM1VFLEtBNFVDNW9CLEVBQUVtcEIsVUFBeUJucEIsRUFBRWtYLFNBQVk2UCxJQUFZL21CLEVBQUVtWCxXQUNoRW5YLEVBQUU2VyxpQkFHRnBNLEVBQU1wSCxVQUFTLFNBQVUzRCxHQUN2QixNQUFPLENBQ0x1bkIsU0FBVXZuQixFQUFNdW5CLGNBaEJwQmpuQixFQUFFNlcsaUJBRUZwTSxFQUFNaWUsZUFrQlBqZSxFQUFNZ2dCLGNBQWdCLFNBQVV6cUIsR0FDakMsSUFBSTBxQixFQUFhMXFCLEVBQUV2RixPQUNmZ0IsRUFBUWl2QixFQUFXanZCLE1BQ25CMnJCLEVBQWlCc0QsRUFBV3RELGVBQzVCQyxFQUFlcUQsRUFBV3JELGFBRzlCNWMsRUFBTTZjLGNBQWMsQ0FDbEI3ckIsTUFBT0EsRUFDUDJyQixlQUFnQkEsRUFDaEJDLGFBQWNBLElBQ2IsR0FFSDVjLEVBQU1uUCxNQUFNdVEsY0FBY3BRLElBQ3pCZ1AsRUFBTW9kLFNBQVcsQ0FDbEJDLE1BQU8sR0FDUGpJLFFBQVMsR0FDQXlHLEVBQTJCN2IsRUFBbkNELEdBbUdMLE9BbGRGLFNBQW1CelIsRUFBVUMsR0FBYyxHQUEwQixtQkFBZkEsR0FBNEMsT0FBZkEsRUFBdUIsTUFBTSxJQUFJMlEsVUFBVSxrRUFBb0UzUSxHQUFlRCxFQUFTRSxVQUFZQyxPQUFPQyxPQUFPSCxHQUFjQSxFQUFXQyxVQUFXLENBQUVHLFlBQWEsQ0FBRXFDLE1BQU8xQyxFQUFVb0IsWUFBWSxFQUFPNFAsVUFBVSxFQUFNQyxjQUFjLEtBQWVoUixJQUFZRSxPQUFPK1EsZUFBaUIvUSxPQUFPK1EsZUFBZWxSLEVBQVVDLEdBQWNELEVBQVNNLFVBQVlMLEdBMEIvZDJ4QixDQUFVM0QsRUFBUS9RLEdBd1ZsQjRQLEVBQWFtQixFQUFRLENBQUMsQ0FDcEJqc0IsSUFBSyxvQkFDTFUsTUFBTyxXQUNMOE0sS0FBSzJlLHdCQUVOLENBQ0Ruc0IsSUFBSyxTQUNMVSxNQUFPLFdBQ0wsSUFBSTJlLEVBQVM3UixLQUVUbEcsRUFBU2tHLEtBQUtqTixNQUNkRyxFQUFRNEcsRUFBTzVHLE1BQ2Z3TixFQUFRNUcsRUFBTzRHLE1BQ2YwQyxFQUFVdEosRUFBT3NKLFFBQ2pCQyxFQUFZdkosRUFBT3VKLFVBQ25CZ2YsRUFBYXZvQixFQUFPdW9CLFdBQ3BCQyxFQUFZeG9CLEVBQU93b0IsVUFDbkJ6YixFQUFXL00sRUFBTytNLFNBQ2xCMGIsRUFBT3pvQixFQUFPeW9CLEtBQ2RDLEVBQVkxb0IsRUFBTzBvQixVQUNuQkMsRUFBWTNvQixFQUFPMm9CLFVBQ25CanZCLEVBQU9zRyxFQUFPdEcsS0FDZGt2QixFQUFjNW9CLEVBQU80b0IsWUFDckJDLEVBQVc3b0IsRUFBTzZvQixTQUNsQkMsRUFBVzlvQixFQUFPOG9CLFNBQ2xCeFUsRUFBVXRVLEVBQU9zVSxRQUNqQnlVLEVBQVUvb0IsRUFBTytvQixRQUNqQkMsRUFBU2hwQixFQUFPZ3BCLE9BQ2hCQyxFQUFVanBCLEVBQU9pcEIsUUFNakI3ZixHQUxZcEosRUFBTzZtQixVQUNIN21CLEVBQU93SixjQUNieEosRUFBTzBtQixRQUNGMW1CLEVBQU8ybUIsYUFDUDNtQixFQUFPNG1CLGFBelpoQyxTQUFrQ2xyQixFQUFLbEUsR0FBUSxJQUFJWSxFQUFTLEdBQUksSUFBSyxJQUFJQyxLQUFLcUQsRUFBV2xFLEVBQUtvRixRQUFRdkUsSUFBTSxHQUFrQnhCLE9BQU9ELFVBQVU0USxlQUFlNUwsS0FBS0YsRUFBS3JELEtBQWNELEVBQU9DLEdBQUtxRCxFQUFJckQsSUFBTSxPQUFPRCxFQTBabE1tVixDQUF5QnZOLEVBQVEsQ0FBQyxRQUFTLFFBQVMsVUFBVyxZQUFhLGFBQWMsWUFBYSxXQUFZLE9BQVEsWUFBYSxZQUFhLE9BQVEsY0FBZSxXQUFZLFdBQVksVUFBVyxVQUFXLFNBQVUsVUFBVyxZQUFhLGdCQUFpQixVQUFXLGVBQWdCLGtCQUUvU2twQixFQUFlLENBQ2pCQyxXQUFZN2YsRUFDWjhmLGFBQWM5ZixFQUNkK2YsY0FBZS9mLEVBQ2ZnZ0IsWUFBYWhnQixHQUdYaWdCLEVBQWNoZ0IsRUFBVW5RLEdBRTVCLE9BQU91cUIsRUFBTXprQixjQUNYLE1BQ0FxSSxFQUFTLEdBQUk2QixFQUFNLENBQUV4QyxNQUFPVyxFQUFTLEdBQUliLEVBQU84aUIsVUFBVzVpQixLQUMzRCtjLEVBQU16a0IsY0FBYyxXQUFZLENBQzlCdEYsSUFBSyxTQUFhMGtCLEdBQ2hCLE9BQU92RyxFQUFPK00sT0FBU3hHLEdBRXpCMVgsTUFBT1csRUFBUyxHQUFJYixFQUFPK2lCLE9BQVEvaUIsRUFBT2dqQixTQUFVUixHQUNwRG5YLFVBQVdBLEVBQ1htTyxHQUFJcUksRUFDSm52QixNQUFPQSxFQUNQbVAsU0FBVXJDLEtBQUtraUIsY0FDZnZCLFVBQVczZ0IsS0FBS3VnQixlQUNoQm5TLFFBQVNBLEVBQ1QyVSxRQUFTQSxFQUNURixRQUFTQSxFQUNUQyxPQUFRQSxFQUNSamMsU0FBVUEsRUFDVjBiLEtBQU1BLEVBQ05DLFVBQVdBLEVBQ1hDLFVBQVdBLEVBQ1hqdkIsS0FBTUEsRUFDTmt2QixZQUFhQSxFQUNiQyxTQUFVQSxFQUNWQyxTQUFVQSxFQUNWTixVQUFXQSxFQUNYbUIsZUFBZ0IsTUFDaEJDLGFBQWMsTUFDZEMsWUFBYSxNQUNiQyxZQUFZLEVBQ1osY0FBYyxJQUVoQm5HLEVBQU16a0IsY0FBYyxNQUFPcUksRUFBUyxDQUNsQyxjQUFlLE9BQ2ZYLE1BQU9XLEVBQVMsR0FBSWIsRUFBTytpQixPQUFRL2lCLEVBQU82QyxVQUFXMmYsSUFDN0IsaUJBQWhCSyxFQUEyQixDQUFFUSx3QkFBeUIsQ0FBRUMsT0FBUVQsRUFBYyxXQUFlLENBQUVsd0IsU0FBVWt3QixLQUNuSDVGLEVBQU16a0IsY0FBYyxRQUFTLENBQUUwUCxLQUFNLFdBQVltYix3QkFBeUIsQ0FBRUMsT0E1YTdELGt2QkErYWxCLENBQ0R0eEIsSUFBSyxVQUNMMlcsSUFBSyxXQUNILE1BQU8sQ0FDTDdQLFFBQVMwRyxLQUFLc2YsV0FHbEIzTyxJQUFLLFNBQWFvVCxHQUNoQi9qQixLQUFLc2YsU0FBV3lFLEVBQVF6cUIsWUFJckJtbEIsRUF6YkksQ0EwYlhoQixFQUFNcHFCLFdBRVJvckIsRUFBT3ZYLGFBQWUsQ0FDcEJzWixRQUFTLEVBQ1RDLGNBQWMsRUFDZEMsY0FBYyxFQUNkdGQsUUFBUyxHQUVYdEQsRUFBUThkLFFBQVVhLEVBR2xCLElBQUlqZSxFQUFTLENBQ1g4aUIsVUFBVyxDQUNUcEUsU0FBVSxXQUNWOEUsVUFBVyxPQUNYQyxVQUFXLGFBQ1g3Z0IsUUFBUyxFQUNUOGdCLFNBQVUsVUFFWlYsU0FBVSxDQUNSdEUsU0FBVSxXQUNWaUYsSUFBSyxFQUNMQyxLQUFNLEVBQ04xUixPQUFRLE9BQ1JELE1BQU8sT0FDUDRSLE9BQVEsT0FDUi9qQixNQUFPLFVBQ1A0akIsU0FBVSxTQUNWSSxvQkFBcUIsWUFDckJDLG9CQUFxQixjQUNyQkMsb0JBQXFCLGVBRXZCbmhCLFVBQVcsQ0FDVDZiLFNBQVUsV0FDVnVGLGNBQWUsUUFFakJsQixPQUFRLENBQ05tQixPQUFRLEVBQ1JDLE9BQVEsRUFDUkMsV0FBWSxPQUNaWCxVQUFXLFVBQ1hZLFFBQVMsVUFDVHJoQixXQUFZLFVBQ1pzaEIsU0FBVSxVQUNWbmtCLFVBQVcsVUFDWG9rQixxQkFBc0IsVUFDdEJua0IsV0FBWSxVQUNab2tCLGNBQWUsVUFDZkMsV0FBWSxVQUNaekUsUUFBUyxVQUNUMEUsV0FBWSxVQUNaQyxjQUFlLFVBQ2ZDLGNBQWUsVUFDZjdoQixXQUFZLFdBQ1o4aEIsVUFBVyxXQUNYQyxhQUFjLGlCLGtEQzloQmxCeGxCLEVBQVE0ZCxZQUFhLEVBRXJCLElBRUk2SCxFQUFVQyxFQUZELEVBQVEsSUFNakJDLEVBQW1CRCxFQUZELEVBQVEsS0FJOUIsU0FBU0EsRUFBdUJod0IsR0FBTyxPQUFPQSxHQUFPQSxFQUFJa29CLFdBQWFsb0IsRUFBTSxDQUFFb29CLFFBQVNwb0IsR0FFdkZzSyxFQUFROGQsUUFBVTJILEVBQVEzSCxRQUFRblcsZUFBaUJnZSxFQUFpQjdILFFBQ3BFL2QsRUFBT0MsUUFBVUEsRUFBaUIsUyxnQ0NibEMsTUFBTTRsQixFQUFXLEVBQVEsSUFBWUEsU0FDL0JDLEVBQVEsRUFBUSxJQUFlQSxNQUMvQkMsRUFBYSxFQUFRLEdBQ3JCQyxFQUF1QixFQUFRLElBQy9CQyxFQUE0QixFQUFRLElBQ3BDQyxFQUFhLEVBQVEsSUFDckJDLEVBQWMsRUFBUSxJQUl0QkMsRUFBY0wsSUFBYU0sU0FBUyxFQUFLLFNBT3pDQyxHQUpVUCxJQUFhTSxTQUFTLEVBQUssT0FJbkJELEVBQVlHLFFBQ2xDQyxPQUVBLEdBQ0EsR0FDQSxLQUNBLE9BR0lDLEVBQTZCLENBQUNDLEVBQVdDLEVBQVNDLElBQ25ERCxFQUNDQyxFQUNJVCxFQUFZVSxvQkFBb0J2ZCxJQUFJb2QsR0FFckNQLEVBQVlXLFFBQVF4ZCxJQUFJb2QsR0FFekJQLEVBQVlZLFFBQVF6ZCxJQUFJb2QsR0FPMUJNLEVBQTZCLENBQUNDLEVBQVU1ekIsS0FDN0MsTUFBTW9ELEVBQU9wRCxFQUNaLEdBQUk0ekIsS0FBYzV6QixJQUNsQixtQkFBb0I0ekIsRUFDckIsSUFDQyxPQUFPLE1BQVEsS0FBa0N4d0IsUUFDaEQsTUFBT3l3QixHQUNSLE1BQU0sSUFBSTcxQixNQUNULCtCQUFnQ2dDLHNCQUMxQjR6QixVQW1CSEUsRUFBOEIsQ0FBQzl6QixFQUFPK3pCLEtBQzNDLE1BQU12USxFQUFReGpCLEVBQU15QixNQUFNLEtBQ3BCdXlCLEVBQVl4USxFQUFNLEdBQ3hCLElBQUkvRixFQUNKLEdBQW9CLEdBQWhCK0YsRUFBTXJrQixPQUNUc2UsRUFuQjJDLENBQUN6ZCxJQUc3QyxJQUNDLE1BQU00ekIsRUFBVyxtQkFDWDlULEVBQVc4UyxFQUEwQmdCLEVBQVU1ekIsR0FDckQsT0FBTzJ6QixFQUEyQkMsRUFBVTlULEdBQzNDLE1BQU8rVCxJQUdULE1BQU1ELEVBQVdqQixFQUFxQjN5QixHQUN0QyxPQUFPMnpCLEVBQTJCQyxJQVEzQkssQ0FBcUNELE9BQ3JDLENBRU4sTUFBTUosRUFBV2pCLEVBQXFCcUIsR0FDaENoMEIsRUFBUTR5QixFQUEwQmdCLEVBQVVwUSxFQUFNLElBQ3hEL0YsRUFBTWtXLEVBQTJCQyxFQUFVNXpCLEdBRTVDLE9BQUkrekIsRUFDSWhCLEVBQVlHLFFBQVFDLE9BQU8xVixHQUU1QkEsRUFBSXlWLFNBS1pSLEVBQVdsMUIsVUFBVTAyQixXQUFhLFNBQVNyb0IsRUFBS0MsR0FDL0MsTUFBTThkLEVBQVE5YyxLQUNkLEVBQUcsQ0FDRixNQUFNcW5CLEVBQVNDLEVBQVN2b0IsR0FDcEJzb0IsR0FDSHZLLEVBQU15SyxJQUFJRixXQUVEdG9CLEdBQU9DLEdBQ2xCLE9BQU84ZCxHQUdSLE1BQU0wSyxFQUFTLENBQUN2eEIsRUFBTXd4QixLQUNyQixJQUFJQyxFQUFPL0IsRUFBTThCLEVBQVNFLEVBQU9DLGVBQWlCLElBQU0sSUFDeEQsT0FBUUYsRUFBS2hmLE1BQ1osSUFBSyxpQkFDTCxJQUFLLFFBQ0wsSUFBSyxRQUVKLE1BQ0QsUUFFQ2dmLEVBQU9HLEVBQUtILEVBQU1ELEdBRXBCOTJCLE9BQU95RixPQUFPSCxFQUFNeXhCLElBR2ZHLEVBQU8sQ0FBQ0gsRUFBTUQsS0FFWixDQUNOLEtBQVEsUUFDUixTQUFZLFNBQ1osS0FBUSxDQUFDQyxHQUNULElBQU8sTUFBT0QsT0FJVkgsRUFBWVEsR0FDVi9CLEVBQVc1YyxJQUFJMmUsS0FBYyxFQWlEL0JDLEVBQXVCLENBQUM5eEIsRUFBTS9CLFlBQzVCK0IsRUFBS3pDLEtBQ1p5QyxFQUFLK3hCLFdBQWE5ekIsR0FVYit6QixFQUFjLENBQUNoeUIsRUFBTWl5QixFQUFtQkMsS0FDN0MsT0FBUWx5QixFQUFLeVMsTUFDWixJQUFLLE1BQ0osR0FBSWlmLEVBQU9TLGNBQ1YsTUFDVVQsRUFBT25CLFFBQ2pCZ0IsRUFDQ3Z4QixHQTdKcUJveUIsRUE4SkpWLEVBQU9VLE9BN0pyQkEsRUFBU3BDLEVBQWNFLEdBNkpNdnJCLFNBQVNzdEIsSUFFaENQLEVBQU9VLFFBRWpCYixFQUFPdnhCLEVBQU0sWUFFZCxNQUNELElBQUssaUJBQ0pBLEVBMUUyQixFQUFDcXlCLEVBQW9CSixLQUNsRCxNQUFNdlgsRUFBTWlWLElBQ1osSUFBSyxNQUFNM3ZCLEtBQVFxeUIsRUFBbUJDLEtBQ3JDLE9BQVF0eUIsRUFBS3lTLE1BQ1osSUFBSyxRQUVKLEdBREFpSSxFQUFJNFcsSUFBSXR4QixFQUFLNnhCLFdBQ1RILEVBQU9sQixZQUFja0IsRUFBT25CLFVBQVltQixFQUFPQyxlQUFnQixDQUNsRSxNQUFNUCxFQUFTQyxFQUFTcnhCLEVBQUs2eEIsV0FDekJULEdBQ0gxVyxFQUFJNFcsSUFBSUYsR0FHVixNQUNELElBQUssc0JBQ0osTUFBTXRvQixFQUFNOUksRUFBSzhJLElBQUkrb0IsVUFDZjlvQixFQUFNL0ksRUFBSytJLElBQUk4b0IsVUFDckJuWCxFQUFJdVYsU0FBU25uQixFQUFLQyxHQUNkMm9CLEVBQU9sQixZQUFja0IsRUFBT25CLFVBQVltQixFQUFPQyxnQkFDbERqWCxFQUFJeVcsV0FBV3JvQixFQUFLQyxHQUVyQixNQUNELElBQUssdUJBQ0oyUixFQUFJNFcsSUFBSWpCLEVBQ1Byd0IsRUFBSy9DLE1BQ0x5MEIsRUFBT25CLFFBQ1BtQixFQUFPbEIsYUFFUixNQUNELElBQUssd0JBQ0o5VixFQUFJNFcsSUFBSVAsRUFBNEIvd0IsRUFBSy9DLE1BQU8rQyxFQUFLdXlCLFdBQ3JELE1BSUQsUUFDQyxNQUFNLElBQUl0M0IsTUFBTSxzQkFBdUIrRSxFQUFLeVMsTUFRL0MsT0FMSTRmLEVBQW1CRSxTQUN0QmhCLEVBQU9jLEVBQW9CLE1BQU0zWCxFQUFJL1YsU0FBU3N0QixlQUU5Q1YsRUFBT2MsRUFBb0IzWCxFQUFJL1YsU0FBU3N0QixJQUVsQ0ksR0ErQkVHLENBQXNCeHlCLEVBQU1peUIsR0FDbkMsTUFDRCxJQUFLLHdCQUNBUCxFQUFPZSx1QkFDVmxCLEVBQ0N2eEIsRUFDQSt3QixFQUE0Qi93QixFQUFLL0MsTUFBTytDLEVBQUt1eUIsVUFDM0M1dEIsU0FBU3N0QixJQUdiLE1BQ0QsSUFBSyx1QkFDSlYsRUFDQ3Z4QixFQUNBcXdCLEVBQ0Nyd0IsRUFBSy9DLE1BQ0x5MEIsRUFBT25CLFFBQ1BtQixFQUFPbEIsWUFDTjdyQixTQUFTc3RCLElBRVosTUFDRCxJQUFLLFFBSUosR0FIcUIsVUFBakJqeUIsRUFBSzB5QixVQUNSUixFQUFPUyxZQUVKM3lCLEVBQUt6QyxNQUFRbTBCLEVBQU9rQixXQUFZLENBQ25DLE1BQU1yMUIsRUFBT3lDLEVBQUt6QyxLQUFLTixNQUV2QixHQUFJaTFCLEVBQU96TCxNQUFNbHBCLEdBQ2hCLE1BQU0sSUFBSXRDLE1BQ1QsdUNBQXdDc0MsdUJBSTFDLE1BQU1VLEVBQVFpMEIsRUFBT1MsaUJBQ2QzeUIsRUFBS3pDLEtBRVoyMEIsRUFBT3pMLE1BQU1scEIsR0FBUVUsRUFDakJpMEIsRUFBT1csY0FDVlgsRUFBT1csYUFBYXB6QixLQUFLLEtBQU1sQyxFQUFNVSxHQUdsQ2kwQixFQUFPWSxvQkFBb0J2MUIsS0FDOUIyMEIsRUFBT1ksb0JBQW9CdjFCLEdBQU1qQixTQUFReTJCLElBQ3hDakIsRUFBcUJpQixFQUFXOTBCLGFBRTFCaTBCLEVBQU9ZLG9CQUFvQnYxQixJQUlyQyxJQUFLLGNBQ0wsSUFBSyxjQUNMLElBQUssYUFDSnlDLEVBQUtzeUIsS0FBT3R5QixFQUFLc3lCLEtBQUtocEIsS0FBSTBwQixHQUNsQmhCLEVBQVlnQixFQUFNZixFQUFtQkMsS0FFN0MsTUFDRCxJQUFLLFFBQ0osTUFBTUwsRUFBWTd4QixFQUFLNnhCLFVBQ2pCblgsRUFBTWlWLEVBQVdrQyxHQUN2QixHQUFJSCxFQUFPbEIsWUFBY2tCLEVBQU9uQixVQUFZbUIsRUFBT0MsZUFBZ0IsQ0FDbEUsTUFBTVAsRUFBU0MsRUFBU1EsR0FDcEJULEdBQ0gxVyxFQUFJNFcsSUFBSUYsR0FHVkcsRUFBT3Z4QixFQUFNMGEsRUFBSS9WLFNBQVNzdEIsSUFDMUIsTUFDRCxJQUFLLFlBQ0osR0FBSWp5QixFQUFLekMsS0FBTSxDQUNkLE1BQU1BLEVBQU95QyxFQUFLekMsS0FBS04sTUFDakJnQixFQUFRaTBCLEVBQU96TCxNQUFNbHBCLEdBQzNCLEdBQUlVLEVBQU8sQ0FDVjZ6QixFQUFxQjl4QixFQUFNL0IsR0FDM0IsTUFHSWkwQixFQUFPWSxvQkFBb0J2MUIsS0FDL0IyMEIsRUFBT1ksb0JBQW9CdjFCLEdBQVEsSUFHcEMyMEIsRUFBT1ksb0JBQW9CdjFCLEdBQU0zQixLQUFLb0UsR0FFdkMsTUFDRCxJQUFLLFNBQ0wsSUFBSyxRQUNMLElBQUssUUFFSixNQUlELFFBQ0MsTUFBTSxJQUFJL0UsTUFBTSxzQkFBdUIrRSxFQUFLeVMsTUFuUXRCLElBQUMyZixFQXFRekIsT0FBT3B5QixHQUdGMHhCLEVBQVMsQ0FDZCxZQUFjLEVBQ2QsU0FBVyxFQUNYLFFBQVUsRUFDVixlQUFpQixFQUNqQixnQkFBa0IsRUFDbEIsdUJBQXlCLEVBQ3pCLFlBQWMsR0FvQ2Y5bkIsRUFBT0MsUUFsQ2dCLENBQUMybkIsRUFBU3lCLEVBQU83YyxLQUN2Q3NiLEVBQU9uQixRQUFVMEMsR0FBU0EsRUFBTUMsU0FBUyxLQUN6QyxNQUFNQyxFQUFzQixDQUMzQixzQkFBeUJ6QixFQUFPbkIsUUFDaEMsYUFBZSxFQUNmLFdBQWNuYSxHQUFXQSxFQUFRZ2QsWUFFbEMxQixFQUFPbEIsV0FBYXlDLEdBQVNBLEVBQU1DLFNBQVMsS0FDNUMsTUFBTUcsRUFBb0JqZCxHQUFXQSxFQUFRa2QsV0FNN0MsR0FMQTVCLEVBQU9VLE9BQVNpQixHQUFxQkosR0FBU0EsRUFBTUMsU0FBUyxLQUM3RHhCLEVBQU9rQixXQUFheGMsR0FBV0EsRUFBUXdjLFdBQ3ZDbEIsRUFBT1MsY0FBZ0IvYixHQUFXQSxFQUFRK2IsY0FDMUNULEVBQU9DLGVBQWlCdmIsR0FBV0EsRUFBUXViLGVBQzNDRCxFQUFPZSxzQkFBd0JyYyxHQUFXQSxFQUFRcWMsc0JBQzlDWSxHQUFxQjNCLEVBQU9TLGNBQy9CLE1BQU0sSUFBSWwzQixNQUFNLHlEQUVqQixNQUFNZzNCLEVBQW9CLENBQ3pCLGVBQWtCUCxFQUFPQyxlQUN6QixTQUFZRCxFQUFPbkIsU0FFZDJCLEVBQVMsQ0FDZCxhQUFnQjliLEdBQVdBLEVBQVF5YyxhQUNuQyxVQUFhLEVBQ2IsTUFBU240QixPQUFPQyxPQUFPLE1BQ3ZCLG9CQUF1QkQsT0FBT0MsT0FBTyxPQUVoQzgyQixFQUFPL0IsRUFBTThCLEVBQVN5QixFQUFPRSxHQUluQyxPQUZBbkIsRUFBWVAsRUFBTVEsRUFBbUJDLEdBL0pGLENBQUNBLElBQ3BDLE1BQU1xQixFQUEyQjc0QixPQUFPVyxLQUFLNjJCLEVBQU9ZLHFCQUNwRCxHQUFJUyxFQUF5Qm4zQixPQUFTLEVBQ3JDLE1BQU0sSUFBSW5CLE1BQU0sd0JBQXdCczRCLElBNkp6Q0MsQ0FBNEJ0QixHQUNyQnpDLEVBQVNnQyxLLGdDQ3RWakIsa0NBRUEsSUFGQSxJQUFJZ0MsRUFBZ0IsR0FDaEJ6SCxFQUFRLG9FQUNIOXZCLEVBQUksRUFBR0EsRUFBSTh2QixFQUFNNXZCLE9BQVFGLElBQzlCdTNCLEVBQWN6SCxFQUFNM0wsV0FBV25rQixJQUFNQSxFQW9FekMsU0FBU3czQixFQUFPQyxHQU1aLElBTEEsSUFBSUMsRUFBa0IsRUFDbEJDLEVBQWlCLEVBQ2pCQyxFQUFtQixFQUNuQkMsRUFBWSxFQUNaQyxFQUFXLEdBQ045M0IsRUFBSSxFQUFHQSxFQUFJeTNCLEVBQVF2M0IsT0FBUUYsSUFBSyxDQUNyQyxJQUFJeVEsRUFBT2duQixFQUFRejNCLEdBR25CLEdBRklBLEVBQUksSUFDSjgzQixHQUFZLEtBQ0ksSUFBaEJybkIsRUFBS3ZRLE9BQVQsQ0FJQSxJQUZBLElBQUk2M0IsRUFBc0IsRUFDdEJDLEVBQWUsR0FDVkMsRUFBSyxFQUFHQyxFQUFTem5CLEVBQU13bkIsRUFBS0MsRUFBT2g0QixPQUFRKzNCLElBQU0sQ0FDdEQsSUFBSUUsRUFBVUQsRUFBT0QsR0FDakJHLEVBQWtCQyxFQUFjRixFQUFRLEdBQUtKLEdBQ2pEQSxFQUFzQkksRUFBUSxHQUMxQkEsRUFBUWo0QixPQUFTLElBQ2pCazRCLEdBQ0lDLEVBQWNGLEVBQVEsR0FBS1QsR0FDdkJXLEVBQWNGLEVBQVEsR0FBS1IsR0FDM0JVLEVBQWNGLEVBQVEsR0FBS1AsR0FDbkNGLEVBQWtCUyxFQUFRLEdBQzFCUixFQUFpQlEsRUFBUSxHQUN6QlAsRUFBbUJPLEVBQVEsSUFFUixJQUFuQkEsRUFBUWo0QixTQUNSazRCLEdBQW1CQyxFQUFjRixFQUFRLEdBQUtOLEdBQzlDQSxFQUFZTSxFQUFRLElBRXhCSCxFQUFhdDRCLEtBQUswNEIsR0FFdEJOLEdBQVlFLEVBQWE3MEIsS0FBSyxNQUVsQyxPQUFPMjBCLEVBRVgsU0FBU08sRUFBY3RULEdBQ25CLElBQUk3aEIsRUFBUyxHQUNiNmhCLEVBQU1BLEVBQU0sR0FBTUEsR0FBTyxFQUFLLEVBQUlBLEdBQU8sRUFDekMsRUFBRyxDQUNDLElBQUl1VCxFQUFnQixHQUFOdlQsR0FDZEEsS0FBUyxHQUNDLElBQ051VCxHQUFXLElBRWZwMUIsR0FBVTRzQixFQUFNd0ksU0FDWHZULEVBQU0sR0FDZixPQUFPN2hCLEksbUJDdkhYLEVBQVEsS0FDUndLLEVBQU9DLFFBQVUsRUFBUSxJQUF1Qm5QLE9BQU95RixRLCtCQ012RCxTQUFTczBCLEVBQU1DLEVBQUtDLEVBQU0xM0IsR0FDeEIsT0FBT3dILEtBQUtxRSxJQUFJckUsS0FBS3NFLElBQUkyckIsRUFBS3ozQixHQUFRMDNCLEdBUnhDLHdJQVdBLE1BQU1DLFVBQW1CMzVCLE1BQ3ZCLFlBQVlvUCxHQUNWd3FCLE1BQU0sMkJBQTJCeHFCLE9BV3JDLFNBQVN5cUIsRUFBWXpxQixHQUNuQixHQUFxQixpQkFBVkEsRUFBb0IsTUFBTSxJQUFJdXFCLEVBQVd2cUIsR0FDcEQsR0FBbUMsZ0JBQS9CQSxFQUFNMEUsT0FBT3ZPLGNBQWlDLE1BQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUNuRSxJQUFJdTBCLEVBQWtCMXFCLEVBQU0wRSxPQUM1QmdtQixFQUFrQkMsRUFBZ0IxbEIsS0FBS2pGLEdBMkR6QyxTQUFtQkEsR0FDakIsTUFBTTRxQixFQUFzQjVxQixFQUFNN0osY0FBY3VPLE9BQzFDM1AsRUFBUzgxQixFQTNCakIsU0FBY0MsR0FDWixJQUFJbjBCLEVBQU8sS0FDUDlFLEVBQUlpNUIsRUFBSS80QixPQUVaLEtBQU9GLEdBQ0w4RSxFQUFjLEdBQVBBLEVBQVltMEIsRUFBSTlVLGFBQWFua0IsR0FPdEMsT0FBUThFLElBQVMsR0FBSyxLQWVZQSxDQUFLaTBCLElBQ3ZDLElBQUs3MUIsRUFBUSxNQUFNLElBQUl3MUIsRUFBV3ZxQixHQUNsQyxNQUFPLElBQUlqTCxFQS9EcUNnMkIsQ0FBVS9xQixHQUFTQSxFQUNuRSxNQUFNZ3JCLEVBQWtCQyxFQUFnQi9kLEtBQUt3ZCxHQUU3QyxHQUFJTSxFQUFpQixDQUNuQixNQUFNdFYsRUFBTWxnQixNQUFNdkIsS0FBSysyQixHQUFpQnowQixNQUFNLEdBQzlDLE1BQU8sSUFBSW1mLEVBQUluZixNQUFNLEVBQUcsR0FBRzBJLEtBQUlrUyxHQUFLK1osU0FBU0MsRUFBRWhhLEVBQUcsR0FBSSxNQUFNK1osU0FBU0MsRUFBRXpWLEVBQUksSUFBTSxJQUFLLEdBQUksSUFBTSxLQUdsRyxNQUFNMFYsRUFBV0MsRUFBU25lLEtBQUt3ZCxHQUUvQixHQUFJVSxFQUFVLENBQ1osTUFBTTFWLEVBQU1sZ0IsTUFBTXZCLEtBQUttM0IsR0FBVTcwQixNQUFNLEdBQ3ZDLE1BQU8sSUFBSW1mLEVBQUluZixNQUFNLEVBQUcsR0FBRzBJLEtBQUlrUyxHQUFLK1osU0FBUy9aLEVBQUcsTUFBTStaLFNBQVN4VixFQUFJLElBQU0sS0FBTSxJQUFNLEtBR3ZGLE1BQU00VixFQUFZQyxFQUFVcmUsS0FBS3dkLEdBRWpDLEdBQUlZLEVBQVcsQ0FDYixNQUFNNVYsRUFBTWxnQixNQUFNdkIsS0FBS3EzQixHQUFXLzBCLE1BQU0sR0FDeEMsTUFBTyxJQUFJbWYsRUFBSW5mLE1BQU0sRUFBRyxHQUFHMEksS0FBSWtTLEdBQUsrWixTQUFTL1osRUFBRyxNQUFNcWEsV0FBVzlWLEVBQUksSUFBTSxNQUc3RSxNQUFNK1YsRUFBWUMsRUFBVXhlLEtBQUt3ZCxHQUVqQyxHQUFJZSxFQUFXLENBQ2IsTUFBT3JiLEVBQUdzRSxFQUFHSSxFQUFHeGYsR0FBS0UsTUFBTXZCLEtBQUt3M0IsR0FBV2wxQixNQUFNLEdBQUcwSSxJQUFJdXNCLFlBQ3hELEdBQUlwQixFQUFNLEVBQUcsSUFBSzFWLEtBQU9BLEVBQUcsTUFBTSxJQUFJNlYsRUFBV3ZxQixHQUNqRCxHQUFJb3FCLEVBQU0sRUFBRyxJQUFLdFYsS0FBT0EsRUFBRyxNQUFNLElBQUl5VixFQUFXdnFCLEdBQ2pELE1BQU8sSUFBSTJyQixFQUFTdmIsRUFBR3NFLEVBQUdJLEdBQUl4ZixHQUFLLEdBR3JDLE1BQU0sSUFBSWkxQixFQUFXdnFCLEdBa0J2QixNQUFNNHJCLEVBQWF6YSxHQUFLK1osU0FBUy9aLEVBQUUvVSxRQUFRLEtBQU0sSUFBSyxJQUVoRHl1QixFQUFxQixzekNBQXN6Q3gyQixNQUFNLEtBQUt3M0IsUUFBTyxDQUFDQyxFQUFLQyxLQUN2MkNELEVBQUlGLEVBQVdHLEVBQUt6dUIsVUFBVSxFQUFHLEtBQU9zdUIsRUFBV0csRUFBS3p1QixVQUFVLElBQUloRCxTQUFTLElBQUkweEIsU0FBUyxFQUFHLEtBQ3hGRixJQUNOLElBWUgsTUFBTVgsRUFBSSxDQUFDTCxFQUFLbUIsSUFBV3oyQixNQUFNdkIsS0FBS3VCLE1BQU15MkIsSUFBU2h0QixLQUFJLElBQU02ckIsSUFBSzkxQixLQUFLLElBRW5FaTJCLEVBQWtCLElBQUlpQixPQUFPLEtBQUtmLEVBQUUsYUFBYyxpQkFBa0IsS0FDcEVFLEVBQVcsSUFBSWEsT0FBTyxLQUFLZixFQUFFLGdCQUFpQixvQkFBcUIsS0FDbkVJLEVBQVksSUFBSVcsT0FBTywwQkFBMEJmLEVBQUUsa0JBQW1CLGdDQUFpQyxLQUN2R08sRUFBWSxpRkFDWmYsRUFBa0IsWUFFbEJ3QixFQUFhbnNCLEdBQ1Y1RixLQUFLZ3lCLE1BQWMsSUFBUnBzQixHQUdkMnJCLEVBQVcsQ0FBQ1UsRUFBS0MsRUFBWUMsS0FDakMsSUFBSXpYLEVBQUl5WCxFQUFZLElBRXBCLEdBQW1CLElBQWZELEVBRUYsTUFBTyxDQUFDeFgsRUFBR0EsRUFBR0EsR0FBRzdWLElBQUlrdEIsR0FJdkIsTUFBTUssR0FBWUgsRUFBTSxJQUFNLEtBQU8sSUFBTSxHQUNyQ0ksR0FBVSxFQUFJcnlCLEtBQUs0ZCxJQUFJLEVBQUlsRCxFQUFJLEtBQU93WCxFQUFhLEtBQ25ESSxFQUFrQkQsR0FBVSxFQUFJcnlCLEtBQUs0ZCxJQUFJd1UsRUFBVyxFQUFJLElBQzlELElBQUlHLEVBQU0sRUFDTkMsRUFBUSxFQUNSQyxFQUFPLEVBRVBMLEdBQVksR0FBS0EsRUFBVyxHQUM5QkcsRUFBTUYsRUFDTkcsRUFBUUYsR0FDQ0YsR0FBWSxHQUFLQSxFQUFXLEdBQ3JDRyxFQUFNRCxFQUNORSxFQUFRSCxHQUNDRCxHQUFZLEdBQUtBLEVBQVcsR0FDckNJLEVBQVFILEVBQ1JJLEVBQU9ILEdBQ0VGLEdBQVksR0FBS0EsRUFBVyxHQUNyQ0ksRUFBUUYsRUFDUkcsRUFBT0osR0FDRUQsR0FBWSxHQUFLQSxFQUFXLEdBQ3JDRyxFQUFNRCxFQUNORyxFQUFPSixHQUNFRCxHQUFZLEdBQUtBLEVBQVcsSUFDckNHLEVBQU1GLEVBQ05JLEVBQU9ILEdBR1QsTUFBTUksRUFBd0JoWSxFQUFJMlgsRUFBUyxFQUkzQyxNQUFPLENBSFVFLEVBQU1HLEVBQ0pGLEVBQVFFLEVBQ1RELEVBQU9DLEdBQ2dCN3RCLElBQUlrdEIsSUFXL0MsU0FBU1ksRUFBWS9zQixHQUNuQixNQUFPMnNCLEVBQUtDLEVBQU9DLEVBQU1HLEdBQVN2QyxFQUFZenFCLEdBQU9mLEtBQUksQ0FBQ3JNLEVBQU9nQixJQUN2RCxJQUFWQSxFQUFjaEIsRUFBUUEsRUFBUSxNQUN4QjhMLEVBQU10RSxLQUFLc0UsSUFBSWl1QixFQUFLQyxFQUFPQyxHQUMzQnB1QixFQUFNckUsS0FBS3FFLElBQUlrdUIsRUFBS0MsRUFBT0MsR0FDM0JOLEdBQWE3dEIsRUFBTUQsR0FBTyxFQUVoQyxHQUFJQyxJQUFRRCxFQUFLLE1BQU8sQ0FBQyxFQUFHLEVBQUc4dEIsRUFBV1MsR0FDMUMsTUFBTTF4QixFQUFRb0QsRUFBTUQsRUFHcEIsTUFBTyxDQURLLElBQU1rdUIsSUFBUWp1QixHQUFPa3VCLEVBQVFDLEdBQVF2eEIsR0FBU3N4QixFQUFRQyxFQUFPLEVBQUksR0FBS0QsSUFBVWx1QixHQUFPbXVCLEVBQU9GLEdBQU9yeEIsRUFBUSxHQUFLcXhCLEVBQU1DLEdBQVN0eEIsRUFBUSxHQURsSWl4QixFQUFZLEdBQU1qeEIsR0FBUyxFQUFJb0QsRUFBTUQsR0FBT25ELEdBQVNvRCxFQUFNRCxHQUVyRDh0QixFQUFXUyxHQVl0QyxTQUFTQyxFQUFLWixFQUFLQyxFQUFZQyxFQUFXUyxHQUN4QyxNQUFPLFNBQVNYLEVBQU0sS0FBS2EsY0FBYzlDLEVBQU0sRUFBRyxJQUFrQixJQUFia0MsR0FBa0JZLGVBQWU5QyxFQUFNLEVBQUcsSUFBaUIsSUFBWm1DLEdBQWlCVyxlQUFlMUIsV0FBV3BCLEVBQU0sRUFBRyxFQUFHNEMsR0FBT0UsUUFBUSxPQXdCOUssU0FBU0MsRUFBT250QixFQUFPaXNCLEdBQ3JCLE1BQU9JLEVBQUtDLEVBQVlDLEVBQVdTLEdBQVNELEVBQVkvc0IsR0FDeEQsT0FBT2l0QixFQUFLWixFQUFLQyxFQUFZQyxFQUFZTixFQUFRZSxHQXFCbkQsU0FBU0ksRUFBYXB0QixHQUNwQixHQUFjLGdCQUFWQSxFQUF5QixPQUFPLEVBRXBDLFNBQVNpVixFQUFFOUQsR0FDVCxNQUFNa2MsRUFBVWxjLEVBQUksSUFDcEIsT0FBT2tjLEdBQVcsT0FBVUEsRUFBVSxRQUFVQSxFQUFVLE1BQVMsUUFBVSxJQUcvRSxNQUFPbEMsRUFBRzFyQixFQUFHbEssR0FBS2sxQixFQUFZenFCLEdBQzlCLE1BQU8sTUFBU2lWLEVBQUVrVyxHQUFLLE1BQVNsVyxFQUFFeFYsR0FBSyxNQUFTd1YsRUFBRTFmLEdBd0JwRCxTQUFTKzNCLEVBQUtYLEVBQUtDLEVBQU9DLEVBQU1HLEdBQzlCLE1BQU8sUUFBUTVDLEVBQU0sRUFBRyxJQUFLdUMsR0FBS08sY0FBYzlDLEVBQU0sRUFBRyxJQUFLd0MsR0FBT00sY0FBYzlDLEVBQU0sRUFBRyxJQUFLeUMsR0FBTUssY0FBYzFCLFdBQVdwQixFQUFNLEVBQUcsRUFBRzRDLEdBQU9FLFFBQVEsT0F1RjdKLFNBQVNLLEVBQVF2dEIsRUFBT2lzQixHQUN0QixPQUFPa0IsRUFBT250QixHQUFRaXNCLEdBVXhCLFNBQVN1QixFQUFleHRCLEVBQU9pc0IsR0FDN0IsTUFBT2QsRUFBRzFyQixFQUFHbEssRUFBR0QsR0FBS20xQixFQUFZenFCLEdBQ2pDLE9BQU9zdEIsRUFBS25DLEVBQUcxckIsRUFBR2xLLEVBQUdELEVBQUkyMkIsR0FvQjNCLFNBQVN3QixFQUFxQnp0QixHQUM1QixPQUFPb3RCLEVBQWFwdEIsR0FBUyxPLGdDQzdYL0IsTUFBTTB0QixFQUFzQixDQUFDL25CLEdBQVEvVCxTQUFTNkcsU0FBU3d2QixNQUFRLE1BQzlELE1BQU05aUIsRUFBVTFNLFNBQVNDLGNBQWMsWUFDakNpMUIsRUFBMkJsMUIsU0FBU20xQixjQUUxQ3pvQixFQUFRdlMsTUFBUStTLEVBR2hCUixFQUFRMG9CLGFBQWEsV0FBWSxJQUVqQzFvQixFQUFRL0UsTUFBTTB0QixRQUFVLFNBQ3hCM29CLEVBQVEvRSxNQUFNd2UsU0FBVyxXQUN6QnpaLEVBQVEvRSxNQUFNMGpCLEtBQU8sVUFDckIzZSxFQUFRL0UsTUFBTW9rQixTQUFXLE9BRXpCLE1BQU11SixFQUFZdDFCLFNBQVN1MUIsZUFDM0IsSUFBSUMsR0FBZ0IsRUFDaEJGLEVBQVVHLFdBQWEsSUFDMUJELEVBQWdCRixFQUFVSSxXQUFXLElBR3RDdjhCLEVBQU93OEIsT0FBT2pwQixHQUNkQSxFQUFRa3BCLFNBR1JscEIsRUFBUW9aLGVBQWlCLEVBQ3pCcFosRUFBUXFaLGFBQWU3WSxFQUFNNVQsT0FFN0IsSUFBSXU4QixHQUFZLEVBQ2hCLElBQ0NBLEVBQVk3MUIsU0FBUzgxQixZQUFZLFFBQ2hDLE1BQU9DLElBY1QsT0FaQXJwQixFQUFRNGdCLFNBRUprSSxJQUNIRixFQUFVVSxrQkFDVlYsRUFBVW5JLFNBQVNxSSxJQUloQk4sR0FDSEEsRUFBeUJlLFFBR25CSixHQUdSL3VCLEVBQU9DLFFBQVVrdUIsRUFFakJudUIsRUFBT0MsUUFBUThkLFFBQVVvUSxHLGdDQzFDWixJQUFJNVksRUFBRSxFQUFRLElBQWlCaGhCLEVBQUUsbUJBQW9CMk0sUUFBUUEsT0FBT2t1QixJQUFJQyxFQUFFOTZCLEVBQUUyTSxPQUFPa3VCLElBQUksaUJBQWlCLE1BQU1FLEVBQUUvNkIsRUFBRTJNLE9BQU9rdUIsSUFBSSxnQkFBZ0IsTUFBTXhELEVBQUVyM0IsRUFBRTJNLE9BQU9rdUIsSUFBSSxrQkFBa0IsTUFBTUcsRUFBRWg3QixFQUFFMk0sT0FBT2t1QixJQUFJLHFCQUFxQixNQUFNSSxFQUFFajdCLEVBQUUyTSxPQUFPa3VCLElBQUksa0JBQWtCLE1BQU1LLEVBQUVsN0IsRUFBRTJNLE9BQU9rdUIsSUFBSSxrQkFBa0IsTUFBTU0sRUFBRW43QixFQUFFMk0sT0FBT2t1QixJQUFJLGlCQUFpQixNQUFNeGQsRUFBRXJkLEVBQUUyTSxPQUFPa3VCLElBQUkscUJBQXFCLE1BQU12ZCxFQUFFdGQsRUFBRTJNLE9BQU9rdUIsSUFBSSxrQkFBa0IsTUFBTU8sRUFBRXA3QixFQUFFMk0sT0FBT2t1QixJQUFJLGNBQWMsTUFBTW5ULEVBQUUxbkIsRUFBRTJNLE9BQU9rdUIsSUFBSSxjQUN4ZSxNQUFNdFYsRUFBRSxtQkFBb0I1WSxRQUFRQSxPQUFPQyxTQUFTLFNBQVM4TSxFQUFFbFksR0FBRyxJQUFJLElBQUlDLEVBQUUseURBQXlERCxFQUFFd2lCLEVBQUUsRUFBRUEsRUFBRWhtQixVQUFVQyxPQUFPK2xCLElBQUl2aUIsR0FBRyxXQUFXcWUsbUJBQW1COWhCLFVBQVVnbUIsSUFBSSxNQUFNLHlCQUF5QnhpQixFQUFFLFdBQVdDLEVBQUUsaUhBQy9QLElBQUk0NUIsRUFBRSxDQUFDQyxVQUFVLFdBQVcsT0FBTSxHQUFJQyxtQkFBbUIsYUFBYUMsb0JBQW9CLGFBQWFDLGdCQUFnQixjQUFjQyxFQUFFLEdBQUcsU0FBU2pYLEVBQUVqakIsRUFBRUMsRUFBRXVpQixHQUFHcFksS0FBS2pOLE1BQU02QyxFQUFFb0ssS0FBS2dQLFFBQVFuWixFQUFFbUssS0FBSyt2QixLQUFLRCxFQUFFOXZCLEtBQUtnd0IsUUFBUTVYLEdBQUdxWCxFQUNwTixTQUFTblcsS0FBNkIsU0FBUzJXLEVBQUVyNkIsRUFBRUMsRUFBRXVpQixHQUFHcFksS0FBS2pOLE1BQU02QyxFQUFFb0ssS0FBS2dQLFFBQVFuWixFQUFFbUssS0FBSyt2QixLQUFLRCxFQUFFOXZCLEtBQUtnd0IsUUFBUTVYLEdBQUdxWCxFQURzRzVXLEVBQUVub0IsVUFBVXcvQixpQkFBaUIsR0FBR3JYLEVBQUVub0IsVUFBVW9LLFNBQVMsU0FBU2xGLEVBQUVDLEdBQUcsR0FBRyxpQkFBa0JELEdBQUcsbUJBQW9CQSxHQUFHLE1BQU1BLEVBQUUsTUFBTTFFLE1BQU00YyxFQUFFLEtBQUs5TixLQUFLZ3dCLFFBQVFILGdCQUFnQjd2QixLQUFLcEssRUFBRUMsRUFBRSxhQUFhZ2pCLEVBQUVub0IsVUFBVXkvQixZQUFZLFNBQVN2NkIsR0FBR29LLEtBQUtnd0IsUUFBUUwsbUJBQW1CM3ZCLEtBQUtwSyxFQUFFLGdCQUNuZDBqQixFQUFFNW9CLFVBQVVtb0IsRUFBRW5vQixVQUFzRixJQUFJMC9CLEVBQUVILEVBQUV2L0IsVUFBVSxJQUFJNG9CLEVBQUU4VyxFQUFFdi9CLFlBQVlvL0IsRUFBRTdhLEVBQUVnYixFQUFFdlgsRUFBRW5vQixXQUFXMC9CLEVBQUVDLHNCQUFxQixFQUFHLElBQUlDLEVBQUUsQ0FBQ3ZRLFFBQVEsTUFBTWhFLEVBQUVwckIsT0FBT0QsVUFBVTRRLGVBQWVpdkIsRUFBRSxDQUFDLzlCLEtBQUksRUFBR2tCLEtBQUksRUFBRzg4QixRQUFPLEVBQUdDLFVBQVMsR0FDaFMsU0FBU0MsRUFBRTk2QixFQUFFQyxFQUFFdWlCLEdBQUcsSUFBSTNnQixFQUFFc2dCLEVBQUUsR0FBR2hZLEVBQUUsS0FBSzVMLEVBQUUsS0FBSyxHQUFHLE1BQU0wQixFQUFFLElBQUk0QixVQUFLLElBQVM1QixFQUFFbkMsTUFBTVMsRUFBRTBCLEVBQUVuQyxVQUFLLElBQVNtQyxFQUFFckQsTUFBTXVOLEVBQUUsR0FBR2xLLEVBQUVyRCxLQUFLcUQsRUFBRWttQixFQUFFcm1CLEtBQUtHLEVBQUU0QixLQUFLODRCLEVBQUVqdkIsZUFBZTdKLEtBQUtzZ0IsRUFBRXRnQixHQUFHNUIsRUFBRTRCLElBQUksSUFBSThkLEVBQUVuakIsVUFBVUMsT0FBTyxFQUFFLEdBQUcsSUFBSWtqQixFQUFFd0MsRUFBRTVrQixTQUFTaWxCLE9BQU8sR0FBRyxFQUFFN0MsRUFBRSxDQUFDLElBQUksSUFBSTdFLEVBQUU1YSxNQUFNeWYsR0FBR21DLEVBQUUsRUFBRUEsRUFBRW5DLEVBQUVtQyxJQUFJaEgsRUFBRWdILEdBQUd0bEIsVUFBVXNsQixFQUFFLEdBQUdLLEVBQUU1a0IsU0FBU3VkLEVBQUUsR0FBRzlhLEdBQUdBLEVBQUVzUixhQUFhLElBQUl6UCxLQUFLOGQsRUFBRTNmLEVBQUVzUixrQkFBZSxJQUFTNlEsRUFBRXRnQixLQUFLc2dCLEVBQUV0Z0IsR0FBRzhkLEVBQUU5ZCxJQUFJLE1BQU0sQ0FBQ2s1QixTQUFTekIsRUFBRXhtQixLQUFLOVMsRUFBRXBELElBQUl1TixFQUFFck0sSUFBSVMsRUFBRXBCLE1BQU1nbEIsRUFBRTZZLE9BQU9OLEVBQUV2USxTQUN4VSxTQUFTMUYsRUFBRXprQixHQUFHLE1BQU0saUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUUrNkIsV0FBV3pCLEVBQTBHLElBQUl6VixFQUFFLE9BQU9vWCxFQUFFLEdBQUcsU0FBUzlXLEVBQUVua0IsRUFBRUMsRUFBRXVpQixFQUFFM2dCLEdBQUcsR0FBR281QixFQUFFeCtCLE9BQU8sQ0FBQyxJQUFJMGxCLEVBQUU4WSxFQUFFeDhCLE1BQThELE9BQXhEMGpCLEVBQUUxaUIsT0FBT08sRUFBRW1pQixFQUFFK1ksVUFBVWo3QixFQUFFa2lCLEVBQUVnWixLQUFLM1ksRUFBRUwsRUFBRS9JLFFBQVF2WCxFQUFFc2dCLEVBQUV5SCxNQUFNLEVBQVN6SCxFQUFFLE1BQU0sQ0FBQzFpQixPQUFPTyxFQUFFazdCLFVBQVVqN0IsRUFBRWs3QixLQUFLM1ksRUFBRXBKLFFBQVF2WCxFQUFFK25CLE1BQU0sR0FDNWIsU0FBUzVHLEVBQUVoakIsR0FBR0EsRUFBRVAsT0FBTyxLQUFLTyxFQUFFazdCLFVBQVUsS0FBS2w3QixFQUFFbTdCLEtBQUssS0FBS243QixFQUFFb1osUUFBUSxLQUFLcFosRUFBRTRwQixNQUFNLEVBQUUsR0FBR3FSLEVBQUV4K0IsUUFBUXcrQixFQUFFaC9CLEtBQUsrRCxHQUN0RyxTQUFTb21CLEVBQUVwbUIsRUFBRUMsRUFBRXVpQixFQUFFM2dCLEdBQUcsSUFBSXNnQixTQUFTbmlCLEVBQUssY0FBY21pQixHQUFHLFlBQVlBLElBQUVuaUIsRUFBRSxNQUFLLElBQUltSyxHQUFFLEVBQUcsR0FBRyxPQUFPbkssRUFBRW1LLEdBQUUsT0FBUSxPQUFPZ1ksR0FBRyxJQUFLLFNBQVMsSUFBSyxTQUFTaFksR0FBRSxFQUFHLE1BQU0sSUFBSyxTQUFTLE9BQU9uSyxFQUFFKzZCLFVBQVUsS0FBS3pCLEVBQUUsS0FBS0MsRUFBRXB2QixHQUFFLEdBQUksR0FBR0EsRUFBRSxPQUFPcVksRUFBRTNnQixFQUFFN0IsRUFBRSxLQUFLQyxFQUFFLElBQUlna0IsRUFBRWprQixFQUFFLEdBQUdDLEdBQUcsRUFBeUIsR0FBdkJrSyxFQUFFLEVBQUVsSyxFQUFFLEtBQUtBLEVBQUUsSUFBSUEsRUFBRSxJQUFPQyxNQUFNQyxRQUFRSCxHQUFHLElBQUksSUFBSXpCLEVBQUUsRUFBRUEsRUFBRXlCLEVBQUV2RCxPQUFPOEIsSUFBSSxDQUFRLElBQUlvaEIsRUFBRTFmLEVBQUVna0IsRUFBZjlCLEVBQUVuaUIsRUFBRXpCLEdBQWVBLEdBQUc0TCxHQUFHaWMsRUFBRWpFLEVBQUV4QyxFQUFFNkMsRUFBRTNnQixRQUFRLEdBQUcsT0FBTzdCLEdBQUcsaUJBQWtCQSxFQUFFMmYsRUFBRSxLQUFpQ0EsRUFBRSxtQkFBN0JBLEVBQUVvRSxHQUFHL2pCLEVBQUUrakIsSUFBSS9qQixFQUFFLGVBQXNDMmYsRUFBRSxLQUFNLG1CQUFvQkEsRUFBRSxJQUFJM2YsRUFBRTJmLEVBQUU3ZixLQUFLRSxHQUFHekIsRUFDcGYsSUFBSTRqQixFQUFFbmlCLEVBQUV5MkIsUUFBUTJFLE1BQTZCanhCLEdBQUdpYyxFQUExQmpFLEVBQUVBLEVBQUU3a0IsTUFBTXFpQixFQUFFMWYsRUFBRWdrQixFQUFFOUIsRUFBRTVqQixLQUFjaWtCLEVBQUUzZ0IsUUFBUSxHQUFHLFdBQVdzZ0IsRUFBRSxNQUFNSyxFQUFFLEdBQUd4aUIsRUFBRTFFLE1BQU00YyxFQUFFLEdBQUcsb0JBQW9Cc0ssRUFBRSxxQkFBcUJ6bkIsT0FBT1csS0FBS3NFLEdBQUdOLEtBQUssTUFBTSxJQUFJOGlCLEVBQUUsS0FBSyxPQUFPclksRUFBRSxTQUFTa3hCLEVBQUVyN0IsRUFBRUMsRUFBRXVpQixHQUFHLE9BQU8sTUFBTXhpQixFQUFFLEVBQUVvbUIsRUFBRXBtQixFQUFFLEdBQUdDLEVBQUV1aUIsR0FBRyxTQUFTeUIsRUFBRWprQixFQUFFQyxHQUFHLE1BQU0saUJBQWtCRCxHQUFHLE9BQU9BLEdBQUcsTUFBTUEsRUFBRXBELElBSDlJLFNBQWdCb0QsR0FBRyxJQUFJQyxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksTUFBTSxNQUFNLEtBQUssR0FBR0QsR0FBRzhHLFFBQVEsU0FBUSxTQUFTOUcsR0FBRyxPQUFPQyxFQUFFRCxNQUcrQ3M3QixDQUFPdDdCLEVBQUVwRCxLQUFLcUQsRUFBRStFLFNBQVMsSUFBSSxTQUFTa2YsRUFBRWxrQixFQUFFQyxHQUFHRCxFQUFFbTdCLEtBQUtyN0IsS0FBS0UsRUFBRW9aLFFBQVFuWixFQUFFRCxFQUFFNHBCLFNBQ3hYLFNBQVMyUixFQUFHdjdCLEVBQUVDLEVBQUV1aUIsR0FBRyxJQUFJM2dCLEVBQUU3QixFQUFFUCxPQUFPMGlCLEVBQUVuaUIsRUFBRWs3QixVQUFVbDdCLEVBQUVBLEVBQUVtN0IsS0FBS3I3QixLQUFLRSxFQUFFb1osUUFBUW5aLEVBQUVELEVBQUU0cEIsU0FBUzFwQixNQUFNQyxRQUFRSCxHQUFHdzdCLEVBQUV4N0IsRUFBRTZCLEVBQUUyZ0IsR0FBRSxTQUFTeGlCLEdBQUcsT0FBT0EsS0FBSSxNQUFNQSxJQUFJeWtCLEVBQUV6a0IsS0FBS0EsRUFKdEosU0FBV0EsRUFBRUMsR0FBRyxNQUFNLENBQUM4NkIsU0FBU3pCLEVBQUV4bUIsS0FBSzlTLEVBQUU4UyxLQUFLbFcsSUFBSXFELEVBQUVuQyxJQUFJa0MsRUFBRWxDLElBQUlYLE1BQU02QyxFQUFFN0MsTUFBTTY5QixPQUFPaDdCLEVBQUVnN0IsUUFJbUVTLENBQUV6N0IsRUFBRW1pQixJQUFJbmlCLEVBQUVwRCxLQUFLcUQsR0FBR0EsRUFBRXJELE1BQU1vRCxFQUFFcEQsSUFBSSxJQUFJLEdBQUdvRCxFQUFFcEQsS0FBS2tLLFFBQVErYyxFQUFFLE9BQU8sS0FBS3JCLElBQUkzZ0IsRUFBRTVGLEtBQUsrRCxJQUFJLFNBQVN3N0IsRUFBRXg3QixFQUFFQyxFQUFFdWlCLEVBQUUzZ0IsRUFBRXNnQixHQUFHLElBQUloWSxFQUFFLEdBQUcsTUFBTXFZLElBQUlyWSxHQUFHLEdBQUdxWSxHQUFHMWIsUUFBUStjLEVBQUUsT0FBTyxLQUFrQndYLEVBQUVyN0IsRUFBRXU3QixFQUFqQnQ3QixFQUFFa2tCLEVBQUVsa0IsRUFBRWtLLEVBQUV0SSxFQUFFc2dCLElBQWFhLEVBQUUvaUIsR0FBRyxJQUFJeTdCLEVBQUUsQ0FBQ3ZSLFFBQVEsTUFBTSxTQUFTd1IsSUFBSSxJQUFJMzdCLEVBQUUwN0IsRUFBRXZSLFFBQVEsR0FBRyxPQUFPbnFCLEVBQUUsTUFBTTFFLE1BQU00YyxFQUFFLE1BQU0sT0FBT2xZLEVBQ3hhLElBQUk0N0IsRUFBRyxDQUFDQyx1QkFBdUJILEVBQUVJLHdCQUF3QixDQUFDQyxTQUFTLE1BQU1DLGtCQUFrQnRCLEVBQUV1QixxQkFBcUIsQ0FBQzlSLFNBQVEsR0FBSTNwQixPQUFPZ2YsR0FBR3RWLEVBQVFneUIsU0FBUyxDQUFDdnlCLElBQUksU0FBUzNKLEVBQUVDLEVBQUV1aUIsR0FBRyxHQUFHLE1BQU14aUIsRUFBRSxPQUFPQSxFQUFFLElBQUk2QixFQUFFLEdBQW1CLE9BQWhCMjVCLEVBQUV4N0IsRUFBRTZCLEVBQUUsS0FBSzVCLEVBQUV1aUIsR0FBVTNnQixHQUFHbEYsUUFBUSxTQUFTcUQsRUFBRUMsRUFBRXVpQixHQUFHLEdBQUcsTUFBTXhpQixFQUFFLE9BQU9BLEVBQXFCcTdCLEVBQUVyN0IsRUFBRWtrQixFQUF2QmprQixFQUFFa2tCLEVBQUUsS0FBSyxLQUFLbGtCLEVBQUV1aUIsSUFBWVEsRUFBRS9pQixJQUFJMnBCLE1BQU0sU0FBUzVwQixHQUFHLE9BQU9xN0IsRUFBRXI3QixHQUFFLFdBQVcsT0FBTyxPQUFNLE9BQU9tOEIsUUFBUSxTQUFTbjhCLEdBQUcsSUFBSUMsRUFBRSxHQUFxQyxPQUFsQ3U3QixFQUFFeDdCLEVBQUVDLEVBQUUsTUFBSyxTQUFTRCxHQUFHLE9BQU9BLEtBQVdDLEdBQUdtOEIsS0FBSyxTQUFTcDhCLEdBQUcsSUFBSXlrQixFQUFFemtCLEdBQUcsTUFBTTFFLE1BQU00YyxFQUFFLE1BQU0sT0FBT2xZLElBQzlla0ssRUFBUXpNLFVBQVV3bEIsRUFBRS9ZLEVBQVFvSSxTQUFTdWpCLEVBQUUzckIsRUFBUW15QixTQUFTNUMsRUFBRXZ2QixFQUFRb3lCLGNBQWNqQyxFQUFFbndCLEVBQVFxeUIsV0FBVy9DLEVBQUV0dkIsRUFBUXN5QixTQUFTMWdCLEVBQUU1UixFQUFRdXlCLG1EQUFtRGIsRUFDckwxeEIsRUFBUXd5QixhQUFhLFNBQVMxOEIsRUFBRUMsRUFBRXVpQixHQUFHLEdBQUcsTUFBT3hpQixFQUFjLE1BQU0xRSxNQUFNNGMsRUFBRSxJQUFJbFksSUFBSSxJQUFJNkIsRUFBRTJkLEVBQUUsR0FBR3hmLEVBQUU3QyxPQUFPZ2xCLEVBQUVuaUIsRUFBRXBELElBQUl1TixFQUFFbkssRUFBRWxDLElBQUlTLEVBQUV5QixFQUFFZzdCLE9BQU8sR0FBRyxNQUFNLzZCLEVBQUUsQ0FBb0UsUUFBbkUsSUFBU0EsRUFBRW5DLE1BQU1xTSxFQUFFbEssRUFBRW5DLElBQUlTLEVBQUVtOEIsRUFBRXZRLGNBQVMsSUFBU2xxQixFQUFFckQsTUFBTXVsQixFQUFFLEdBQUdsaUIsRUFBRXJELEtBQVFvRCxFQUFFOFMsTUFBTTlTLEVBQUU4UyxLQUFLeEIsYUFBYSxJQUFJcU8sRUFBRTNmLEVBQUU4UyxLQUFLeEIsYUFBYSxJQUFJd0osS0FBSzdhLEVBQUVrbUIsRUFBRXJtQixLQUFLRyxFQUFFNmEsS0FBSzZmLEVBQUVqdkIsZUFBZW9QLEtBQUtqWixFQUFFaVosUUFBRyxJQUFTN2EsRUFBRTZhLFNBQUksSUFBUzZFLEVBQUVBLEVBQUU3RSxHQUFHN2EsRUFBRTZhLElBQUksSUFBSUEsRUFBRXRlLFVBQVVDLE9BQU8sRUFBRSxHQUFHLElBQUlxZSxFQUFFalosRUFBRXRFLFNBQVNpbEIsT0FBTyxHQUFHLEVBQUUxSCxFQUFFLENBQUM2RSxFQUFFemYsTUFBTTRhLEdBQUcsSUFBSSxJQUFJZ0gsRUFBRSxFQUFFQSxFQUFFaEgsRUFBRWdILElBQUluQyxFQUFFbUMsR0FBR3RsQixVQUFVc2xCLEVBQUUsR0FBR2pnQixFQUFFdEUsU0FBU29pQixFQUFFLE1BQU0sQ0FBQ29iLFNBQVN6QixFQUFFeG1CLEtBQUs5UyxFQUFFOFMsS0FDeGZsVyxJQUFJdWxCLEVBQUVya0IsSUFBSXFNLEVBQUVoTixNQUFNMEUsRUFBRW01QixPQUFPejhCLElBQUkyTCxFQUFRMkgsY0FBYyxTQUFTN1IsRUFBRUMsR0FBOEssWUFBM0ssSUFBU0EsSUFBSUEsRUFBRSxPQUFNRCxFQUFFLENBQUMrNkIsU0FBU3BCLEVBQUVnRCxzQkFBc0IxOEIsRUFBRTI4QixjQUFjNThCLEVBQUU2OEIsZUFBZTc4QixFQUFFODhCLGFBQWEsRUFBRXovQixTQUFTLEtBQUtELFNBQVMsT0FBUUMsU0FBUyxDQUFDMDlCLFNBQVNyQixFQUFFcUQsU0FBUy84QixHQUFVQSxFQUFFNUMsU0FBUzRDLEdBQUdrSyxFQUFROUcsY0FBYzAzQixFQUFFNXdCLEVBQVE4eUIsY0FBYyxTQUFTaDlCLEdBQUcsSUFBSUMsRUFBRTY2QixFQUFFL3JCLEtBQUssS0FBSy9PLEdBQVksT0FBVEMsRUFBRTZTLEtBQUs5UyxFQUFTQyxHQUFHaUssRUFBUSt5QixVQUFVLFdBQVcsTUFBTSxDQUFDOVMsUUFBUSxPQUFPamdCLEVBQVFzSSxXQUFXLFNBQVN4UyxHQUFHLE1BQU0sQ0FBQys2QixTQUFTbGYsRUFBRXpPLE9BQU9wTixJQUFJa0ssRUFBUWd6QixlQUFlelksRUFDM2V2YSxFQUFRaXpCLEtBQUssU0FBU245QixHQUFHLE1BQU0sQ0FBQys2QixTQUFTN1UsRUFBRWtYLE1BQU1wOUIsRUFBRXE5QixTQUFTLEVBQUVDLFFBQVEsT0FBT3B6QixFQUFRcXpCLEtBQUssU0FBU3Y5QixFQUFFQyxHQUFHLE1BQU0sQ0FBQzg2QixTQUFTbkIsRUFBRTltQixLQUFLOVMsRUFBRXNVLGFBQVEsSUFBU3JVLEVBQUUsS0FBS0EsSUFBSWlLLEVBQVFzekIsWUFBWSxTQUFTeDlCLEVBQUVDLEdBQUcsT0FBTzA3QixJQUFJNkIsWUFBWXg5QixFQUFFQyxJQUFJaUssRUFBUWxNLFdBQVcsU0FBU2dDLEVBQUVDLEdBQUcsT0FBTzA3QixJQUFJMzlCLFdBQVdnQyxFQUFFQyxJQUFJaUssRUFBUXV6QixjQUFjLGFBQWF2ekIsRUFBUXd6QixVQUFVLFNBQVMxOUIsRUFBRUMsR0FBRyxPQUFPMDdCLElBQUkrQixVQUFVMTlCLEVBQUVDLElBQUlpSyxFQUFReXpCLG9CQUFvQixTQUFTMzlCLEVBQUVDLEVBQUV1aUIsR0FBRyxPQUFPbVosSUFBSWdDLG9CQUFvQjM5QixFQUFFQyxFQUFFdWlCLElBQ3RjdFksRUFBUTB6QixnQkFBZ0IsU0FBUzU5QixFQUFFQyxHQUFHLE9BQU8wN0IsSUFBSWlDLGdCQUFnQjU5QixFQUFFQyxJQUFJaUssRUFBUTJ6QixRQUFRLFNBQVM3OUIsRUFBRUMsR0FBRyxPQUFPMDdCLElBQUlrQyxRQUFRNzlCLEVBQUVDLElBQUlpSyxFQUFRNHpCLFdBQVcsU0FBUzk5QixFQUFFQyxFQUFFdWlCLEdBQUcsT0FBT21aLElBQUltQyxXQUFXOTlCLEVBQUVDLEVBQUV1aUIsSUFBSXRZLEVBQVE2ekIsT0FBTyxTQUFTLzlCLEdBQUcsT0FBTzI3QixJQUFJb0MsT0FBTy85QixJQUFJa0ssRUFBUTh6QixTQUFTLFNBQVNoK0IsR0FBRyxPQUFPMjdCLElBQUlxQyxTQUFTaCtCLElBQUlrSyxFQUFRbUosUUFBUSxXLGdDQ3JCblRwSixFQUFPQyxRQUFVLEVBQVEsSyxnQ0NNZCxJQUFJeVYsRUFBRXhWLEVBQUUyUSxFQUFFdmMsRUFBRWloQixFQUN6QixHQUFHLG9CQUFxQnRjLFFBQVEsbUJBQW9CKzZCLGVBQWUsQ0FBQyxJQUFJM0UsRUFBRSxLQUFLQyxFQUFFLEtBQUtDLEVBQUUsV0FBVyxHQUFHLE9BQU9GLEVBQUUsSUFBSSxJQUFJdDVCLEVBQUVrSyxFQUFRZzBCLGVBQWU1RSxHQUFFLEVBQUd0NUIsR0FBR3M1QixFQUFFLEtBQUssTUFBTXI1QixHQUFHLE1BQU1rK0IsV0FBVzNFLEVBQUUsR0FBR3Y1QixJQUFLdzVCLEVBQUUxUCxLQUFLQyxNQUFNOWYsRUFBUWcwQixhQUFhLFdBQVcsT0FBT25VLEtBQUtDLE1BQU15UCxHQUFHOVosRUFBRSxTQUFTM2YsR0FBRyxPQUFPczVCLEVBQUU2RSxXQUFXeGUsRUFBRSxFQUFFM2YsSUFBSXM1QixFQUFFdDVCLEVBQUVtK0IsV0FBVzNFLEVBQUUsS0FBS3J2QixFQUFFLFNBQVNuSyxFQUFFQyxHQUFHczVCLEVBQUU0RSxXQUFXbitCLEVBQUVDLElBQUk2YSxFQUFFLFdBQVdzakIsYUFBYTdFLElBQUloN0IsRUFBRSxXQUFXLE9BQU0sR0FBSWloQixFQUFFdFYsRUFBUW0wQix3QkFBd0IsaUJBQWlCLENBQUMsSUFBSTFFLEVBQUV6MkIsT0FBT283QixZQUFZemlCLEVBQUUzWSxPQUFPNm1CLEtBQ25mak8sRUFBRTVZLE9BQU9pN0IsV0FBV3ZFLEVBQUUxMkIsT0FBT2s3QixhQUFhLEdBQUcsb0JBQXFCRyxRQUFRLENBQUMsSUFBSXJZLEVBQUVoakIsT0FBT3M3QixxQkFBcUIsbUJBQW9CdDdCLE9BQU91N0IsdUJBQXVCRixRQUFRN3ZCLE1BQU0sMklBQTJJLG1CQUFvQndYLEdBQUdxWSxRQUFRN3ZCLE1BQU0sMElBQTBJLEdBQUcsaUJBQ25laXJCLEdBQUcsbUJBQW9CQSxFQUFFM1AsSUFBSTlmLEVBQVFnMEIsYUFBYSxXQUFXLE9BQU92RSxFQUFFM1AsV0FBVyxDQUFDLElBQUlqRyxFQUFFbEksRUFBRW1PLE1BQU05ZixFQUFRZzBCLGFBQWEsV0FBVyxPQUFPcmlCLEVBQUVtTyxNQUFNakcsR0FBRyxJQUFJN0wsR0FBRSxFQUFHMmhCLEVBQUUsS0FBS0ssR0FBRyxFQUFFalgsRUFBRSxFQUFFUyxFQUFFLEVBQUVubEIsRUFBRSxXQUFXLE9BQU8yTCxFQUFRZzBCLGdCQUFnQnhhLEdBQUdsRSxFQUFFLGFBQWF0VixFQUFRbTBCLHdCQUF3QixTQUFTcitCLEdBQUcsRUFBRUEsR0FBRyxJQUFJQSxFQUFFdStCLFFBQVE3dkIsTUFBTSxvSEFBb0h1VSxFQUFFLEVBQUVqakIsRUFBRThFLEtBQUs4ZCxNQUFNLElBQUk1aUIsR0FBRyxHQUFHLElBQUlxNkIsRUFBRSxJQUFJNEQsZUFBZXpELEVBQUVILEVBQUVxRSxNQUFNckUsRUFBRXNFLE1BQU1DLFVBQ25mLFdBQVcsR0FBRyxPQUFPL0UsRUFBRSxDQUFDLElBQUk3NUIsRUFBRWtLLEVBQVFnMEIsZUFBZXhhLEVBQUUxakIsRUFBRWlqQixFQUFFLElBQUk0VyxHQUFFLEVBQUc3NUIsR0FBR3c2QixFQUFFcUUsWUFBWSxPQUFPM21CLEdBQUUsRUFBRzJoQixFQUFFLE1BQU0sTUFBTTU1QixHQUFHLE1BQU11NkIsRUFBRXFFLFlBQVksTUFBTTUrQixRQUFTaVksR0FBRSxHQUFJeUgsRUFBRSxTQUFTM2YsR0FBRzY1QixFQUFFNzVCLEVBQUVrWSxJQUFJQSxHQUFFLEVBQUdzaUIsRUFBRXFFLFlBQVksUUFBUTEwQixFQUFFLFNBQVNuSyxFQUFFQyxHQUFHaTZCLEVBQUVwZSxHQUFFLFdBQVc5YixFQUFFa0ssRUFBUWcwQixrQkFBaUJqK0IsSUFBSTZhLEVBQUUsV0FBVzhlLEVBQUVNLEdBQUdBLEdBQUcsR0FBRyxTQUFTUSxFQUFFMTZCLEVBQUVDLEdBQUcsSUFBSXVpQixFQUFFeGlCLEVBQUV2RCxPQUFPdUQsRUFBRS9ELEtBQUtnRSxHQUFHRCxFQUFFLE9BQU8sQ0FBQyxJQUFJbWlCLEVBQUVLLEVBQUUsSUFBSSxFQUFFM2dCLEVBQUU3QixFQUFFbWlCLEdBQUcsVUFBRyxJQUFTdGdCLEdBQUcsRUFBRXNrQixFQUFFdGtCLEVBQUU1QixJQUEwQixNQUFNRCxFQUE3QkEsRUFBRW1pQixHQUFHbGlCLEVBQUVELEVBQUV3aUIsR0FBRzNnQixFQUFFMmdCLEVBQUVMLEdBQWdCLFNBQVN3WSxFQUFFMzZCLEdBQVUsWUFBTyxLQUFkQSxFQUFFQSxFQUFFLElBQXFCLEtBQUtBLEVBQzljLFNBQVM4NkIsRUFBRTk2QixHQUFHLElBQUlDLEVBQUVELEVBQUUsR0FBRyxRQUFHLElBQVNDLEVBQUUsQ0FBQyxJQUFJdWlCLEVBQUV4aUIsRUFBRXZCLE1BQU0sR0FBRytqQixJQUFJdmlCLEVBQUUsQ0FBQ0QsRUFBRSxHQUFHd2lCLEVBQUV4aUIsRUFBRSxJQUFJLElBQUltaUIsRUFBRSxFQUFFdGdCLEVBQUU3QixFQUFFdkQsT0FBTzBsQixFQUFFdGdCLEdBQUcsQ0FBQyxJQUFJaWdCLEVBQUUsR0FBR0ssRUFBRSxHQUFHLEVBQUUzakIsRUFBRXdCLEVBQUU4aEIsR0FBRzRYLEVBQUU1WCxFQUFFLEVBQUUrVCxFQUFFNzFCLEVBQUUwNUIsR0FBRyxRQUFHLElBQVNsN0IsR0FBRyxFQUFFMm5CLEVBQUUzbkIsRUFBRWdrQixRQUFHLElBQVNxVCxHQUFHLEVBQUUxUCxFQUFFMFAsRUFBRXIzQixJQUFJd0IsRUFBRW1pQixHQUFHMFQsRUFBRTcxQixFQUFFMDVCLEdBQUdsWCxFQUFFTCxFQUFFdVgsSUFBSTE1QixFQUFFbWlCLEdBQUczakIsRUFBRXdCLEVBQUU4aEIsR0FBR1UsRUFBRUwsRUFBRUwsT0FBUSxXQUFHLElBQVMrVCxHQUFHLEVBQUUxUCxFQUFFMFAsRUFBRXJULElBQTBCLE1BQU14aUIsRUFBN0JBLEVBQUVtaUIsR0FBRzBULEVBQUU3MUIsRUFBRTA1QixHQUFHbFgsRUFBRUwsRUFBRXVYLElBQWdCLE9BQU96NUIsRUFBRSxPQUFPLEtBQUssU0FBU2ttQixFQUFFbm1CLEVBQUVDLEdBQUcsSUFBSXVpQixFQUFFeGlCLEVBQUU4K0IsVUFBVTcrQixFQUFFNitCLFVBQVUsT0FBTyxJQUFJdGMsRUFBRUEsRUFBRXhpQixFQUFFb2tCLEdBQUdua0IsRUFBRW1rQixHQUFHLElBQUlxWCxFQUFFLEdBQUdoWCxFQUFFLEdBQUdaLEVBQUUsRUFBRW9YLEVBQUUsS0FBSzlXLEVBQUUsRUFBRW5CLEdBQUUsRUFBR29ELEdBQUUsRUFBR25DLEdBQUUsRUFDamEsU0FBU29YLEVBQUVyN0IsR0FBRyxJQUFJLElBQUlDLEVBQUUwNkIsRUFBRWxXLEdBQUcsT0FBT3hrQixHQUFHLENBQUMsR0FBRyxPQUFPQSxFQUFFdUMsU0FBU3M0QixFQUFFclcsT0FBUSxNQUFHeGtCLEVBQUU4K0IsV0FBVy8rQixHQUFnRCxNQUE5Qzg2QixFQUFFclcsR0FBR3hrQixFQUFFNitCLFVBQVU3K0IsRUFBRSsrQixlQUFldEUsRUFBRWUsRUFBRXg3QixHQUFjQSxFQUFFMDZCLEVBQUVsVyxJQUFJLFNBQVNQLEVBQUVsa0IsR0FBYSxHQUFWaWtCLEdBQUUsRUFBR29YLEVBQUVyN0IsSUFBT29tQixFQUFFLEdBQUcsT0FBT3VVLEVBQUVjLEdBQUdyVixHQUFFLEVBQUd6RyxFQUFFNmIsT0FBTyxDQUFDLElBQUl2N0IsRUFBRTA2QixFQUFFbFcsR0FBRyxPQUFPeGtCLEdBQUdrSyxFQUFFK1osRUFBRWprQixFQUFFOCtCLFVBQVUvK0IsSUFDdFAsU0FBU3c3QixFQUFFeDdCLEVBQUVDLEdBQUdtbUIsR0FBRSxFQUFHbkMsSUFBSUEsR0FBRSxFQUFHbkosS0FBS2tJLEdBQUUsRUFBRyxJQUFJUixFQUFFMkIsRUFBRSxJQUFTLElBQUxrWCxFQUFFcDdCLEdBQU9nN0IsRUFBRU4sRUFBRWMsR0FBRyxPQUFPUixNQUFNQSxFQUFFK0QsZUFBZS8rQixJQUFJRCxJQUFJekIsTUFBTSxDQUFDLElBQUk0akIsRUFBRThZLEVBQUV6NEIsU0FBUyxHQUFHLE9BQU8yZixFQUFFLENBQUM4WSxFQUFFejRCLFNBQVMsS0FBSzJoQixFQUFFOFcsRUFBRWdFLGNBQWMsSUFBSXA5QixFQUFFc2dCLEVBQUU4WSxFQUFFK0QsZ0JBQWdCLytCLEdBQUdBLEVBQUVpSyxFQUFRZzBCLGVBQWUsbUJBQW9CcjhCLEVBQUVvNUIsRUFBRXo0QixTQUFTWCxFQUFFbzVCLElBQUlOLEVBQUVjLElBQUlYLEVBQUVXLEdBQUdKLEVBQUVwN0IsUUFBUTY2QixFQUFFVyxHQUFHUixFQUFFTixFQUFFYyxHQUFHLEdBQUcsT0FBT1IsRUFBRSxJQUFJblosR0FBRSxNQUFPLENBQUMsSUFBSXRqQixFQUFFbThCLEVBQUVsVyxHQUFHLE9BQU9qbUIsR0FBRzJMLEVBQUUrWixFQUFFMWxCLEVBQUV1Z0MsVUFBVTkrQixHQUFHNmhCLEdBQUUsRUFBRyxPQUFPQSxFQUFFLFFBQVFtWixFQUFFLEtBQUs5VyxFQUFFM0IsRUFBRVEsR0FBRSxHQUNwWixTQUFTMFksRUFBRTE3QixHQUFHLE9BQU9BLEdBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxJQUFJLEtBQUssRUFBRSxPQUFPLFdBQVcsS0FBSyxFQUFFLE9BQU8sSUFBSSxRQUFRLE9BQU8sS0FBSyxJQUFJMjdCLEVBQUVuYyxFQUFFdFYsRUFBUWcxQixzQkFBc0IsRUFBRWgxQixFQUFRaTFCLDJCQUEyQixFQUFFajFCLEVBQVFrMUIscUJBQXFCLEVBQUVsMUIsRUFBUW0xQix3QkFBd0IsRUFBRW4xQixFQUFRbzFCLG1CQUFtQixLQUFLcDFCLEVBQVFxMUIsOEJBQThCLEVBQUVyMUIsRUFBUXMxQix3QkFBd0IsU0FBU3gvQixHQUFHQSxFQUFFd0MsU0FBUyxNQUFNMEgsRUFBUXUxQiwyQkFBMkIsV0FBV3JaLEdBQUdwRCxJQUFJb0QsR0FBRSxFQUFHekcsRUFBRTZiLEtBQ3hjdHhCLEVBQVF3MUIsaUNBQWlDLFdBQVcsT0FBT3ZiLEdBQUdqYSxFQUFReTFCLDhCQUE4QixXQUFXLE9BQU9oRixFQUFFYyxJQUFJdnhCLEVBQVEwMUIsY0FBYyxTQUFTNS9CLEdBQUcsT0FBT21rQixHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUlsa0IsRUFBRSxFQUFFLE1BQU0sUUFBUUEsRUFBRWtrQixFQUFFLElBQUkzQixFQUFFMkIsRUFBRUEsRUFBRWxrQixFQUFFLElBQUksT0FBT0QsSUFBSSxRQUFRbWtCLEVBQUUzQixJQUFJdFksRUFBUTIxQix3QkFBd0IsYUFBYTMxQixFQUFRNDFCLHNCQUFzQm5FLEVBQUV6eEIsRUFBUTYxQix5QkFBeUIsU0FBUy8vQixFQUFFQyxHQUFHLE9BQU9ELEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLFFBQVFBLEVBQUUsRUFBRSxJQUFJd2lCLEVBQUUyQixFQUFFQSxFQUFFbmtCLEVBQUUsSUFBSSxPQUFPQyxJQUFJLFFBQVFra0IsRUFBRTNCLElBQ2hldFksRUFBUTgxQiwwQkFBMEIsU0FBU2hnQyxFQUFFQyxFQUFFdWlCLEdBQUcsSUFBSUwsRUFBRWpZLEVBQVFnMEIsZUFBZSxHQUFHLGlCQUFrQjFiLEdBQUcsT0FBT0EsRUFBRSxDQUFDLElBQUkzZ0IsRUFBRTJnQixFQUFFeWQsTUFBTXArQixFQUFFLGlCQUFrQkEsR0FBRyxFQUFFQSxFQUFFc2dCLEVBQUV0Z0IsRUFBRXNnQixFQUFFSyxFQUFFLGlCQUFrQkEsRUFBRTBkLFFBQVExZCxFQUFFMGQsUUFBUXhFLEVBQUUxN0IsUUFBUXdpQixFQUFFa1osRUFBRTE3QixHQUFHNkIsRUFBRXNnQixFQUF5TSxPQUFqTW5pQixFQUFFLENBQUNva0IsR0FBR1AsSUFBSXJoQixTQUFTdkMsRUFBRWcvQixjQUFjai9CLEVBQUUrK0IsVUFBVWw5QixFQUFFbTlCLGVBQXZEeGMsRUFBRTNnQixFQUFFMmdCLEVBQW9Fc2MsV0FBVyxHQUFHajlCLEVBQUVzZ0IsR0FBR25pQixFQUFFOCtCLFVBQVVqOUIsRUFBRTY0QixFQUFFalcsRUFBRXprQixHQUFHLE9BQU8yNkIsRUFBRWMsSUFBSXo3QixJQUFJMjZCLEVBQUVsVyxLQUFLUixFQUFFbkosSUFBSW1KLEdBQUUsRUFBRzlaLEVBQUUrWixFQUFFcmlCLEVBQUVzZ0IsTUFBTW5pQixFQUFFOCtCLFVBQVV0YyxFQUFFa1ksRUFBRWUsRUFBRXo3QixHQUFHb21CLEdBQUdwRCxJQUFJb0QsR0FBRSxFQUFHekcsRUFBRTZiLEtBQVl4N0IsR0FDM2FrSyxFQUFRaTJCLHFCQUFxQixXQUFXLElBQUluZ0MsRUFBRWtLLEVBQVFnMEIsZUFBZTdDLEVBQUVyN0IsR0FBRyxJQUFJQyxFQUFFMDZCLEVBQUVjLEdBQUcsT0FBT3g3QixJQUFJZzdCLEdBQUcsT0FBT0EsR0FBRyxPQUFPaDdCLEdBQUcsT0FBT0EsRUFBRXVDLFVBQVV2QyxFQUFFOCtCLFdBQVcvK0IsR0FBR0MsRUFBRSsrQixlQUFlL0QsRUFBRStELGdCQUFnQnpnQyxLQUFLMkwsRUFBUWsyQixzQkFBc0IsU0FBU3BnQyxHQUFHLElBQUlDLEVBQUVra0IsRUFBRSxPQUFPLFdBQVcsSUFBSTNCLEVBQUUyQixFQUFFQSxFQUFFbGtCLEVBQUUsSUFBSSxPQUFPRCxFQUFFOUQsTUFBTWtPLEtBQUs1TixXQUFXLFFBQVEybkIsRUFBRTNCLE0sZ0NDWGxULElBQUl2aUIsRUFBRSxtQkFBb0JrTCxRQUFRQSxPQUFPa3VCLElBQUk3VyxFQUFFdmlCLEVBQUVrTCxPQUFPa3VCLElBQUksaUJBQWlCLE1BQU1sWCxFQUFFbGlCLEVBQUVrTCxPQUFPa3VCLElBQUksZ0JBQWdCLE1BQU14M0IsRUFBRTVCLEVBQUVrTCxPQUFPa3VCLElBQUksa0JBQWtCLE1BQU0xWixFQUFFMWYsRUFBRWtMLE9BQU9rdUIsSUFBSSxxQkFBcUIsTUFBTWx2QixFQUFFbEssRUFBRWtMLE9BQU9rdUIsSUFBSSxrQkFBa0IsTUFBTXZlLEVBQUU3YSxFQUFFa0wsT0FBT2t1QixJQUFJLGtCQUFrQixNQUFNOTZCLEVBQUUwQixFQUFFa0wsT0FBT2t1QixJQUFJLGlCQUFpQixNQUFNN1osRUFBRXZmLEVBQUVrTCxPQUFPa3VCLElBQUksb0JBQW9CLE1BQU12WCxFQUFFN2hCLEVBQUVrTCxPQUFPa3VCLElBQUkseUJBQXlCLE1BQU03NkIsRUFBRXlCLEVBQUVrTCxPQUFPa3VCLElBQUkscUJBQXFCLE1BQU1DLEVBQUVyNUIsRUFBRWtMLE9BQU9rdUIsSUFBSSxrQkFBa0IsTUFBTUUsRUFBRXQ1QixFQUNwZmtMLE9BQU9rdUIsSUFBSSx1QkFBdUIsTUFBTXhELEVBQUU1MUIsRUFBRWtMLE9BQU9rdUIsSUFBSSxjQUFjLE1BQU1HLEVBQUV2NUIsRUFBRWtMLE9BQU9rdUIsSUFBSSxjQUFjLE1BQU1LLEVBQUV6NUIsRUFBRWtMLE9BQU9rdUIsSUFBSSxlQUFlLE1BQU1NLEVBQUUxNUIsRUFBRWtMLE9BQU9rdUIsSUFBSSxxQkFBcUIsTUFBTXhkLEVBQUU1YixFQUFFa0wsT0FBT2t1QixJQUFJLG1CQUFtQixNQUFNdmQsRUFBRTdiLEVBQUVrTCxPQUFPa3VCLElBQUksZUFBZSxNQUNsUSxTQUFTTyxFQUFFNTVCLEdBQUcsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT0EsRUFBRSxDQUFDLElBQUl5NUIsRUFBRXo1QixFQUFFKzZCLFNBQVMsT0FBT3RCLEdBQUcsS0FBS2pYLEVBQUUsT0FBT3hpQixFQUFFQSxFQUFFOFMsTUFBUSxLQUFLME0sRUFBRSxLQUFLc0MsRUFBRSxLQUFLamdCLEVBQUUsS0FBS3NJLEVBQUUsS0FBS3dWLEVBQUUsS0FBSzJaLEVBQUUsT0FBT3Q1QixFQUFFLFFBQVEsT0FBT0EsRUFBRUEsR0FBR0EsRUFBRSs2QixVQUFZLEtBQUt4OEIsRUFBRSxLQUFLQyxFQUFFLEtBQUtnN0IsRUFBRSxLQUFLM0QsRUFBRSxLQUFLL2EsRUFBRSxPQUFPOWEsRUFBRSxRQUFRLE9BQU95NUIsR0FBRyxLQUFLdFgsRUFBRSxPQUFPc1gsSUFBSSxTQUFTdlQsRUFBRWxtQixHQUFHLE9BQU80NUIsRUFBRTU1QixLQUFLOGhCLEVBQUU1WCxFQUFRbTJCLFVBQVU3Z0IsRUFBRXRWLEVBQVFvMkIsZUFBZXhlLEVBQUU1WCxFQUFRcTJCLGdCQUFnQmhpQyxFQUFFMkwsRUFBUXMyQixnQkFBZ0IxbEIsRUFBRTVRLEVBQVFvRSxRQUFRa1UsRUFBRXRZLEVBQVF5SyxXQUFXblcsRUFBRTBMLEVBQVFvSSxTQUFTelEsRUFBRXFJLEVBQVF1MkIsS0FBS2pILEVBQUV0dkIsRUFBUTBLLEtBQUtpaEIsRUFBRTNyQixFQUFRdzJCLE9BQU92ZSxFQUNoZmpZLEVBQVFteUIsU0FBU2x5QixFQUFFRCxFQUFRcXlCLFdBQVc1YyxFQUFFelYsRUFBUXN5QixTQUFTbEQsRUFBRXB2QixFQUFReTJCLFlBQVksU0FBUzNnQyxHQUFHLE9BQU9rbUIsRUFBRWxtQixJQUFJNDVCLEVBQUU1NUIsS0FBS3dmLEdBQUd0VixFQUFRMDJCLGlCQUFpQjFhLEVBQUVoYyxFQUFRMjJCLGtCQUFrQixTQUFTN2dDLEdBQUcsT0FBTzQ1QixFQUFFNTVCLEtBQUt6QixHQUFHMkwsRUFBUTQyQixrQkFBa0IsU0FBUzlnQyxHQUFHLE9BQU80NUIsRUFBRTU1QixLQUFLOGEsR0FBRzVRLEVBQVE2MkIsVUFBVSxTQUFTL2dDLEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBR0EsRUFBRSs2QixXQUFXdlksR0FBR3RZLEVBQVE4MkIsYUFBYSxTQUFTaGhDLEdBQUcsT0FBTzQ1QixFQUFFNTVCLEtBQUt4QixHQUFHMEwsRUFBUSsyQixXQUFXLFNBQVNqaEMsR0FBRyxPQUFPNDVCLEVBQUU1NUIsS0FBSzZCLEdBQUdxSSxFQUFRZzNCLE9BQU8sU0FBU2xoQyxHQUFHLE9BQU80NUIsRUFBRTU1QixLQUFLdzVCLEdBQ3pkdHZCLEVBQVF3SyxPQUFPLFNBQVMxVSxHQUFHLE9BQU80NUIsRUFBRTU1QixLQUFLNjFCLEdBQUczckIsRUFBUWkzQixTQUFTLFNBQVNuaEMsR0FBRyxPQUFPNDVCLEVBQUU1NUIsS0FBS21pQixHQUFHalksRUFBUWszQixXQUFXLFNBQVNwaEMsR0FBRyxPQUFPNDVCLEVBQUU1NUIsS0FBS21LLEdBQUdELEVBQVFtM0IsYUFBYSxTQUFTcmhDLEdBQUcsT0FBTzQ1QixFQUFFNTVCLEtBQUsyZixHQUFHelYsRUFBUW8zQixXQUFXLFNBQVN0aEMsR0FBRyxPQUFPNDVCLEVBQUU1NUIsS0FBS3M1QixHQUN6T3B2QixFQUFRcTNCLG1CQUFtQixTQUFTdmhDLEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsbUJBQW9CQSxHQUFHQSxJQUFJNkIsR0FBRzdCLElBQUk4aEIsR0FBRzloQixJQUFJbUssR0FBR25LLElBQUkyZixHQUFHM2YsSUFBSXM1QixHQUFHdDVCLElBQUl1NUIsR0FBRyxpQkFBa0J2NUIsR0FBRyxPQUFPQSxJQUFJQSxFQUFFKzZCLFdBQVd2QixHQUFHeDVCLEVBQUUrNkIsV0FBV2xGLEdBQUc3MUIsRUFBRSs2QixXQUFXamdCLEdBQUc5YSxFQUFFKzZCLFdBQVd4OEIsR0FBR3lCLEVBQUUrNkIsV0FBV3Y4QixHQUFHd0IsRUFBRSs2QixXQUFXcEIsR0FBRzM1QixFQUFFKzZCLFdBQVdsZixHQUFHN2IsRUFBRSs2QixXQUFXamYsR0FBRzliLEVBQUUrNkIsV0FBV3JCLElBQUl4dkIsRUFBUXMzQixPQUFPNUgsRyxpQkN3TG5VM3ZCLEVBQWdCLFFBak1DLFNBQVV1UyxHQUV6QixJQUFJdlEsRUFBTzdCLEtBVVg2QixFQUFLMlEsTUFBUSxTQUFVQyxFQUFPQyxFQUFRQyxHQUVwQyxPQUFPOVEsRUFBS3VRLEVBQU16WCxPQUFPaVksYUFEUixDQUFDLFdBQVksVUFBVyxXQUFZLE9BQVEsT0FBUSxPQUFRLFlBQWEsVUFBVyxTQUFVLFNBQVUsU0FBVSxXQUFZLGVBQzVGSCxFQUFPQyxFQUFRQyxJQU9wRTlRLEVBQUtnUixPQUFTLFdBQ1osT0FBT1QsRUFBTVUsU0FBU0QsVUFXeEJoUixFQUFLa1IsU0FBVyxTQUFVTixFQUFPQyxFQUFRTSxFQUFVTCxHQUMvQyxJQUdJalYsRUFBSywyQkFITCtVLEVBQVFBLEdBQVMsS0FHd0IsS0FGekNDLEVBQVNBLEdBQVUsS0FXdkIsWUFSd0IsSUFBYk0sSUFDVHRWLEdBQU8sSUFBTXNWLEdBR1hMLElBQ0ZqVixHQUFPLElBQU0wVSxFQUFNelgsT0FBT3dZLFVBR3JCelYsR0FVWG1FLEVBQUt1UixTQUFXLFNBQVVYLEVBQU9DLEVBQVFDLEdBQ3ZDLE9BQU9QLEVBQU1JLE1BQU0yQixXQUFXcEIsU0FBU04sRUFBT0MsRUFBUSxXQUFZQyxJQVVwRTlRLEVBQUt3UixRQUFVLFNBQVVaLEVBQU9DLEVBQVFDLEdBQ3RDLE9BQU9QLEVBQU1JLE1BQU0yQixXQUFXcEIsU0FBU04sRUFBT0MsRUFBUSxVQUFXQyxJQVVuRTlRLEVBQUt5UixTQUFXLFNBQVViLEVBQU9DLEVBQVFDLEdBQ3ZDLE9BQU9QLEVBQU1JLE1BQU0yQixXQUFXcEIsU0FBU04sRUFBT0MsRUFBUSxXQUFZQyxJQVVwRTlRLEVBQUswUixLQUFPLFNBQVVkLEVBQU9DLEVBQVFDLEdBQ25DLE9BQU9QLEVBQU1JLE1BQU0yQixXQUFXcEIsU0FBU04sRUFBT0MsRUFBUSxPQUFRQyxJQVVoRTlRLEVBQUsyUixLQUFPLFNBQVVmLEVBQU9DLEVBQVFDLEdBQ25DLE9BQU9QLEVBQU1JLE1BQU0yQixXQUFXcEIsU0FBU04sRUFBT0MsRUFBUSxPQUFRQyxJQVVoRTlRLEVBQUs0UixLQUFPLFNBQVVoQixFQUFPQyxFQUFRQyxHQUNuQyxPQUFPUCxFQUFNSSxNQUFNMkIsV0FBV3BCLFNBQVNOLEVBQU9DLEVBQVEsT0FBUUMsSUFVaEU5USxFQUFLNlIsVUFBWSxTQUFVakIsRUFBT0MsRUFBUUMsR0FDeEMsT0FBT1AsRUFBTUksTUFBTTJCLFdBQVdwQixTQUFTTixFQUFPQyxFQUFRLFlBQWFDLElBVXJFOVEsRUFBSzhSLFFBQVUsU0FBVWxCLEVBQU9DLEVBQVFDLEdBQ3RDLE9BQU9QLEVBQU1JLE1BQU0yQixXQUFXcEIsU0FBU04sRUFBT0MsRUFBUSxVQUFXQyxJQVVuRTlRLEVBQUsrUixPQUFTLFNBQVVuQixFQUFPQyxFQUFRQyxHQUNyQyxPQUFPUCxFQUFNSSxNQUFNMkIsV0FBV3BCLFNBQVNOLEVBQU9DLEVBQVEsU0FBVUMsSUFVbEU5USxFQUFLZ1MsT0FBUyxTQUFVcEIsRUFBT0MsRUFBUUMsR0FDckMsT0FBT1AsRUFBTUksTUFBTTJCLFdBQVdwQixTQUFTTixFQUFPQyxFQUFRLFNBQVVDLElBVWxFOVEsRUFBS2lTLE9BQVMsU0FBVXJCLEVBQU9DLEVBQVFDLEdBQ3JDLE9BQU9QLEVBQU1JLE1BQU0yQixXQUFXcEIsU0FBU04sRUFBT0MsRUFBUSxTQUFVQyxJQVVsRTlRLEVBQUtrUyxTQUFXLFNBQVV0QixFQUFPQyxFQUFRQyxHQUN2QyxPQUFPUCxFQUFNSSxNQUFNMkIsV0FBV3BCLFNBQVNOLEVBQU9DLEVBQVEsV0FBWUMsSUFVcEU5USxFQUFLbVMsVUFBWSxTQUFVdkIsRUFBT0MsRUFBUUMsR0FDeEMsT0FBT1AsRUFBTUksTUFBTTJCLFdBQVdwQixTQUFTTixFQUFPQyxFQUFRLFlBQWFDLE0saUJDbEV2RTlTLEVBQWdCLFFBM0hELFNBQVV1UyxHQUV2QixJQUFJdlEsRUFBTzdCLEtBWVg2QixFQUFLMlEsTUFBUSxTQUFVQyxFQUFPQyxFQUFRMmtCLEdBQ3BDLE9BQU94MUIsRUFBS2tSLFNBQVNOLEVBQU9DLE9BQVFsZSxFQUFXNmlDLElBT2pEeDFCLEVBQUtnUixPQUFTLFdBQ1osT0FBT1QsRUFBTVUsU0FBU0QsVUFXeEJoUixFQUFLa1IsU0FBVyxTQUFVTixFQUFPQyxFQUFRTSxFQUFVcWtCLEdBQy9DLElBR0kzNUIsRUFBSyxvQ0FFZSxJQUFic1YsSUFDUHRWLEdBQU8sYUFBZXNWLEdBRzFCdFYsR0FBTyxLQVRIK1UsRUFBUUEsR0FBUyxLQVNBLEtBUmpCQyxFQUFTQSxHQUFVLFVBVUEsSUFBWjJrQixLQUNhLElBQUk3SyxPQUFPLG1EQUNiam5CLEtBQUs4eEIsS0FDckIzNUIsR0FBTyxJQUFNMjVCLElBSW5CLE9BQU8zNUIsR0FVWG1FLEVBQUs0UixLQUFPLFNBQVVoQixFQUFPQyxFQUFRMmtCLEdBQ25DLE9BQU9qbEIsRUFBTUksTUFBTTRCLFNBQVNyQixTQUFTTixFQUFPQyxFQUFRLE9BQVEya0IsSUFVOUR4MUIsRUFBSytSLE9BQVMsU0FBVW5CLEVBQU9DLEVBQVEya0IsR0FDckMsT0FBT2psQixFQUFNSSxNQUFNNEIsU0FBU3JCLFNBQVNOLEVBQU9DLEVBQVEsU0FBVTJrQixJQVVoRXgxQixFQUFLZ1MsT0FBUyxTQUFVcEIsRUFBT0MsRUFBUTJrQixHQUNyQyxPQUFPamxCLEVBQU1JLE1BQU00QixTQUFTckIsU0FBU04sRUFBT0MsRUFBUSxTQUFVMmtCLElBVWhFeDFCLEVBQUt5MUIsV0FBYSxTQUFVN2tCLEVBQU9DLEVBQVEya0IsR0FDekMsT0FBT2psQixFQUFNSSxNQUFNNEIsU0FBU3JCLFNBQVNOLEVBQU9DLEVBQVEsYUFBYzJrQixJQVVwRXgxQixFQUFLMDFCLFFBQVUsU0FBVTlrQixFQUFPQyxFQUFRMmtCLEdBQ3RDLE9BQU9qbEIsRUFBTUksTUFBTTRCLFNBQVNyQixTQUFTTixFQUFPQyxFQUFRLFVBQVcya0IsSUFVakV4MUIsRUFBSzIxQixVQUFZLFNBQVUva0IsRUFBT0MsRUFBUTJrQixHQUN4QyxPQUFPamxCLEVBQU1JLE1BQU00QixTQUFTckIsU0FBU04sRUFBT0MsRUFBUSxZQUFhMmtCLE0saUJDbEJuRXgzQixFQUFnQixRQXJHQSxTQUFVdVMsR0FFeEIsSUFBSXZRLEVBQU83QixLQVlYNkIsRUFBSzJRLE1BQVEsU0FBVUMsRUFBT0MsRUFBUStrQixFQUFXNVcsR0FDL0MsT0FBT2hmLEVBQUtrUixTQUFTTixFQUFPQyxFQUFRK2tCLEVBQVc1VyxJQVdqRGhmLEVBQUs2MUIsZUFBaUIsU0FBVWpsQixFQUFPQyxFQUFRK2tCLEdBQzdDLE9BQU81MUIsRUFBS2tSLFNBQVNOLEVBQU9DLEVBQVEra0IsSUFXdEM1MUIsRUFBSzgxQixhQUFlLFNBQVVsbEIsRUFBT0MsRUFBUW1PLEdBQzNDLE9BQU9oZixFQUFLa1IsU0FBU04sRUFBT0MsT0FBUWxlLEVBQVdxc0IsSUFhakRoZixFQUFLKzFCLGtCQUFvQixTQUFVbmxCLEVBQU9DLEVBQVEra0IsRUFBVzVXLEVBQU1nWCxHQUNqRSxPQUFPaDJCLEVBQUtrUixTQUFTTixFQUFPQyxFQUFRK2tCLEVBQVc1VyxFQUFNZ1gsSUFPdkRoMkIsRUFBS2dSLE9BQVMsV0FDWixPQUFPVCxFQUFNVSxTQUFTRCxVQVl4QmhSLEVBQUtrUixTQUFXLFNBQVVOLEVBQU9DLEVBQVEra0IsRUFBVzVXLEVBQU1nWCxHQUN0RCxJQUdJbjZCLEVBQU0sd0JBUVYsT0FOSW02QixJQUNGbjZCLEdBQU8sU0FBV202QixHQUdwQm42QixHQUFPLEtBVEgrVSxFQUFRQSxHQUFTLEtBU0EsS0FSakJDLEVBQVNBLEdBQVUsS0FVbkIra0IsR0FBYTVXLEVBQ1JuakIscUJBQWdDbWpCLEVBR3JDNFcsRUFDSy81QixFQUFNLGFBR1htakIsRUFDS25qQixFQUFNLFNBQVdtakIsRUFHbkJuakIsSyxnQ0M3RmYsSUFBSW82QixFQUF1QixFQUFRLElBRW5DLFNBQVNDLEtBQ1QsU0FBU0MsS0FDVEEsRUFBdUJDLGtCQUFvQkYsRUFFM0NsNEIsRUFBT0MsUUFBVSxXQUNmLFNBQVNvNEIsRUFBS25sQyxFQUFPb2xDLEVBQVU3a0MsRUFBZXlELEVBQVVxaEMsRUFBY0MsR0FDcEUsR0FBSUEsSUFBV1AsRUFBZixDQUlBLElBQUk1eEIsRUFBTSxJQUFJaFYsTUFDWixtTEFLRixNQURBZ1YsRUFBSTFTLEtBQU8sc0JBQ0wwUyxHQUdSLFNBQVNveUIsSUFDUCxPQUFPSixFQUZUQSxFQUFLdm1CLFdBQWF1bUIsRUFNbEIsSUFBSUssRUFBaUIsQ0FDbkJDLE1BQU9OLEVBQ1BPLEtBQU1QLEVBQ05uSCxLQUFNbUgsRUFDTi9rQixPQUFRK2tCLEVBQ1I5bUMsT0FBUThtQyxFQUNSUSxPQUFRUixFQUNSUyxPQUFRVCxFQUVSVSxJQUFLVixFQUNMVyxRQUFTUCxFQUNUN3lCLFFBQVN5eUIsRUFDVFksWUFBYVosRUFDYmEsV0FBWVQsRUFDWlUsS0FBTWQsRUFDTmUsU0FBVVgsRUFDVlksTUFBT1osRUFDUGEsVUFBV2IsRUFDWGMsTUFBT2QsRUFDUDdvQixNQUFPNm9CLEVBRVBlLGVBQWdCckIsRUFDaEJDLGtCQUFtQkYsR0FLckIsT0FGQVEsRUFBZWUsVUFBWWYsRUFFcEJBLEksZ0NDbkRUMTRCLEVBQU9DLFFBRm9CLGdELGdDQ1AzQkEsRUFBUTRkLFlBQWEsRUFFckIsSUFBSTZiLEVBQVMsRUFBUSxHQU1qQkMsR0FKVWhVLEVBQXVCK1QsR0FJbkIvVCxFQUZELEVBQVEsTUFNckJpVSxFQUFRalUsRUFGRCxFQUFRLEtBTUhBLEVBRkQsRUFBUSxLQUl2QixTQUFTQSxFQUF1Qmh3QixHQUFPLE9BQU9BLEdBQU9BLEVBQUlrb0IsV0FBYWxvQixFQUFNLENBQUVvb0IsUUFBU3BvQixHQUV2RixTQUFTc29CLEVBQWdCNWMsRUFBVUMsR0FBZSxLQUFNRCxhQUFvQkMsR0FBZ0IsTUFBTSxJQUFJQyxVQUFVLHFDQUVoSCxTQUFTMmMsRUFBMkJsYyxFQUFNbk0sR0FBUSxJQUFLbU0sRUFBUSxNQUFNLElBQUlDLGVBQWUsNkRBQWdFLE9BQU9wTSxHQUF5QixpQkFBVEEsR0FBcUMsbUJBQVRBLEVBQThCbU0sRUFBUG5NLEVBRWxPLFNBQVMwc0IsRUFBVTV4QixFQUFVQyxHQUFjLEdBQTBCLG1CQUFmQSxHQUE0QyxPQUFmQSxFQUF1QixNQUFNLElBQUkyUSxVQUFVLGtFQUFvRTNRLEdBQWVELEVBQVNFLFVBQVlDLE9BQU9DLE9BQU9ILEdBQWNBLEVBQVdDLFVBQVcsQ0FBRUcsWUFBYSxDQUFFcUMsTUFBTzFDLEVBQVVvQixZQUFZLEVBQU80UCxVQUFVLEVBQU1DLGNBQWMsS0FBZWhSLElBQVlFLE9BQU8rUSxlQUFpQi9RLE9BQU8rUSxlQUFlbFIsRUFBVUMsR0FBY0QsRUFBU00sVUFBWUwsR0FFamUsSUFBSXlmLEVBQXdCLFdBWTVCLFNBQVNHLEVBQW1CbmQsR0FDMUIsSUFBSW9kLEVBQVcsR0FDZixNQUFPLENBQ0xDLEdBQUksU0FBWUMsR0FDZEYsRUFBU3plLEtBQUsyZSxJQUVoQkMsSUFBSyxTQUFhRCxHQUNoQkYsRUFBV0EsRUFBUzdlLFFBQU8sU0FBVWlmLEdBQ25DLE9BQU9BLElBQU1GLE1BR2pCckgsSUFBSyxXQUNILE9BQU9qVyxHQUVUeWQsSUFBSyxTQUFhQyxFQUFVQyxHQUMxQjNkLEVBQVEwZCxFQUNSTixFQUFTL2QsU0FBUSxTQUFVaWUsR0FDekIsT0FBT0EsRUFBUXRkLEVBQU8yZCxRQXlJOUIvUSxFQUFROGQsUUEvSFIsU0FBNEI5TSxFQUFjQyxHQUN4QyxJQUFJQyxFQUF1QkMsRUFFdkJDLEVBQWMsMkJBQTRCLEVBQUl1b0IsRUFBTTdiLFdBQWEsS0FFakUzcUIsRUFBVyxTQUFVK08sR0FHdkIsU0FBUy9PLElBQ1AsSUFBSWdQLEVBQU9DLEVBRVg0YixFQUFnQjlkLEtBQU0vTSxHQUV0QixJQUFLLElBQUl5RixFQUFPdEcsVUFBVUMsT0FBUXNHLEVBQU83QyxNQUFNNEMsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMzRUQsRUFBS0MsR0FBUXhHLFVBQVV3RyxHQUd6QixPQUFlcUosRUFBU0MsRUFBUTZiLEVBQTJCL2QsS0FBTWdDLEVBQVd0TSxLQUFLNUQsTUFBTWtRLEVBQVksQ0FBQ2hDLE1BQU1oTCxPQUFPMkQsS0FBaUJ1SixFQUFNaVAsUUFBVWQsRUFBbUJuTyxFQUFNblAsTUFBTUcsT0FBZ0I2cUIsRUFBMkI3YixFQUFuQ0QsR0FvQzNMLE9BL0NBbWdCLEVBQVVudkIsRUFBVStPLEdBY3BCL08sRUFBU3ZDLFVBQVUyZ0IsZ0JBQWtCLFdBQ25DLElBQUk5VyxFQUVKLE9BQU9BLEVBQU8sSUFBUzJXLEdBQWVsUixLQUFLbVIsUUFBUzVXLEdBR3REdEgsRUFBU3ZDLFVBQVU0Z0IsMEJBQTRCLFNBQW1DQyxHQUNoRixHQUFJdlIsS0FBS2pOLE1BQU1HLFFBQVVxZSxFQUFVcmUsTUFBTyxDQUN4QyxJQUFJc2UsRUFBV3hSLEtBQUtqTixNQUFNRyxNQUN0QjBkLEVBQVdXLEVBQVVyZSxNQUNyQjJkLE9BQWMsSUFqRVJZLEVBbUVHRCxNQW5FQUUsRUFtRVVkLEdBakVkLElBQU5hLEdBQVcsRUFBSUEsR0FBTSxFQUFJQyxFQUV6QkQsR0FBTUEsR0FBS0MsR0FBTUEsR0FnRWxCYixFQUFjLEdBRWRBLEVBQThDLG1CQUF6QkUsRUFBc0NBLEVBQXFCUyxFQUFVWixHQUFZVixFQU9sRixLQUZwQlcsR0FBZSxJQUdiN1EsS0FBS21SLFFBQVFSLElBQUlZLEVBQVVyZSxNQUFPMmQsSUE5RTlDLElBQWtCWSxFQUFHQyxHQW9GakJ6ZSxFQUFTdkMsVUFBVXNTLE9BQVMsV0FDMUIsT0FBT2hELEtBQUtqTixNQUFNSSxVQUdiRixFQWhETSxDQWlEYnNtQyxFQUFPbG1DLFdBRVRKLEVBQVNxVyxvQkFBcUIwSCxFQUF3QixJQUEwQkUsR0FBZXNvQixFQUFZNWIsUUFBUXhzQixPQUFPdWdCLFdBQVlYLEdBRXRJLElBQUloZSxFQUFXLFNBQVU0ZSxHQUd2QixTQUFTNWUsSUFDUCxJQUFJMG1DLEVBQVE3bkIsRUFFWmlNLEVBQWdCOWQsS0FBTWhOLEdBRXRCLElBQUssSUFBSWdhLEVBQVE1YSxVQUFVQyxPQUFRc0csRUFBTzdDLE1BQU1rWCxHQUFRQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQ2hGdFUsRUFBS3NVLEdBQVM3YSxVQUFVNmEsR0FHMUIsT0FBZ0J5c0IsRUFBVTduQixFQUFTa00sRUFBMkIvZCxLQUFNNFIsRUFBWWxjLEtBQUs1RCxNQUFNOGYsRUFBYSxDQUFDNVIsTUFBTWhMLE9BQU8yRCxLQUFrQmtaLEVBQU8xYSxNQUFRLENBQ3JKakUsTUFBTzJlLEVBQU9DLFlBQ2JELEVBQU9FLFNBQVcsU0FBVW5CLEVBQVVDLEdBRUYsS0FESSxFQUF0QmdCLEVBQU9HLGNBQ05uQixJQUNsQmdCLEVBQU8vVyxTQUFTLENBQUU1SCxNQUFPMmUsRUFBT0MsY0FFeEJpTSxFQUEyQmxNLEVBQXBDNm5CLEdBc0NMLE9BeERBdFgsRUFBVXB2QixFQUFVNGUsR0FxQnBCNWUsRUFBU3RDLFVBQVU0Z0IsMEJBQTRCLFNBQW1DQyxHQUNoRixJQUFJUyxFQUFlVCxFQUFVUyxhQUU3QmhTLEtBQUtnUyxhQUFlQSxRQUFzRDlCLEVBQ3hFOEIsR0FHSmhmLEVBQVN0QyxVQUFVd2hCLGtCQUFvQixXQUNqQ2xTLEtBQUtnUCxRQUFRa0MsSUFDZmxSLEtBQUtnUCxRQUFRa0MsR0FBYVgsR0FBR3ZRLEtBQUsrUixVQUVwQyxJQUFJQyxFQUFlaFMsS0FBS2pOLE1BQU1pZixhQUU5QmhTLEtBQUtnUyxhQUFlQSxRQUFzRDlCLEVBQ3hFOEIsR0FHSmhmLEVBQVN0QyxVQUFVeWhCLHFCQUF1QixXQUNwQ25TLEtBQUtnUCxRQUFRa0MsSUFDZmxSLEtBQUtnUCxRQUFRa0MsR0FBYVQsSUFBSXpRLEtBQUsrUixXQUl2Qy9lLEVBQVN0QyxVQUFVb2hCLFNBQVcsV0FDNUIsT0FBSTlSLEtBQUtnUCxRQUFRa0MsR0FDUmxSLEtBQUtnUCxRQUFRa0MsR0FBYS9ILE1BRTFCMkgsR0FJWDlkLEVBQVN0QyxVQUFVc1MsT0FBUyxXQUMxQixPQXBIYTdQLEVBb0hJNk0sS0FBS2pOLE1BQU1JLFNBbkh6QjJDLE1BQU1DLFFBQVE1QyxHQUFZQSxFQUFTLEdBQUtBLEdBbUhMNk0sS0FBSzdJLE1BQU1qRSxPQXBIdkQsSUFBbUJDLEdBdUhSSCxFQXpETSxDQTBEYnVtQyxFQUFPbG1DLFdBS1QsT0FIQUwsRUFBU3dXLGVBQWdCeUgsRUFBd0IsSUFBMEJDLEdBQWVzb0IsRUFBWTViLFFBQVF4c0IsT0FBUTZmLEdBRy9HLENBQ0xoZSxTQUFVQSxFQUNWRCxTQUFVQSxJQUtkNk0sRUFBT0MsUUFBVUEsRUFBaUIsUyxpQ0NuTWxDLFlBR0EsSUFBSXROLEVBQU0sdUJBRVZxTixFQUFPQyxRQUFVLFdBQ2YsT0FBT2dKLEVBQU90VyxJQUFRc1csRUFBT3RXLElBQVEsR0FBSyxLLGtEQ0k1QyxJQVNJbW5DLEVBVGdCLEVBQVEsSUFtRDVCOTVCLEVBQU9DLFFBQVU2NUIsRyxnQ0NsRGpCLFNBQVNDLEVBQWtCMXRCLEdBQ3pCLE9BQU8sV0FDTCxPQUFPQSxHQVNYLElBQUk2ckIsRUFBZ0IsYUFFcEJBLEVBQWM4QixZQUFjRCxFQUM1QjdCLEVBQWMrQixpQkFBbUJGLEdBQWtCLEdBQ25EN0IsRUFBY2dDLGdCQUFrQkgsR0FBa0IsR0FDbEQ3QixFQUFjaUMsZ0JBQWtCSixFQUFrQixNQUNsRDdCLEVBQWNrQyxnQkFBa0IsV0FDOUIsT0FBT2o2QixNQUVUKzNCLEVBQWNtQyxvQkFBc0IsU0FBVWh1QixHQUM1QyxPQUFPQSxHQUdUck0sRUFBT0MsUUFBVWk0QixHLG9CQ25DakIscUJBS0UsV0FDQSxhQUdBLElBQUlvQyxFQUFjLENBQ2hCLFVBQVksRUFDWixRQUFVLEdBSVJDLEVBQVFELFNBQW1CcmhDLFNBQVdBLFFBQVdrSCxLQUdqRHE2QixFQUFjRixTQUFtQnI2QixJQUFZQSxJQUFZQSxFQUFRdzZCLFVBQVl4NkIsRUFHN0V5NkIsRUFBZ0JKLFNBQW1CdDZCLElBQVdBLElBQVdBLEVBQU95NkIsU0FHaEVFLEVBQWFILEdBQWVFLEdBQWtDLGlCQUFWenhCLEdBQXNCQSxHQUMxRTB4QixHQUFlQSxFQUFXMXhCLFNBQVcweEIsR0FBY0EsRUFBVzFoQyxTQUFXMGhDLEdBQWNBLEVBQVczNEIsT0FBUzI0QixJQUM3R0osRUFBT0ksR0FJVCxJQUFJbDVCLEVBQWlCM1EsT0FBT0QsVUFBVTRRLGVBTXRDLFNBQVNtNUIsSUFDUCxJQUFJM1MsRUFBWTRTLE9BQU90b0MsVUFBVSxJQUVqQyxJQUNHdW9DLFNBQVM3UyxJQUNWQSxFQUFZLEdBQ1pBLEVBQVksU0FDWnB0QixLQUFLOGQsTUFBTXNQLElBQWNBLEVBRXpCLE1BQU04UyxXQUFXLHVCQUF5QjlTLEdBRzVDLEdBQUlBLEdBQWEsTUFFZixPQUFPcFQsT0FBT0UsYUFBYWtULEdBSzNCLElBQUkrUyxFQUFvQyxRQUR4Qy9TLEdBQWEsUUFDcUIsSUFDOUJnVCxFQUFnQmhULEVBQVksS0FBUyxNQUN6QyxPQUFPcFQsT0FBT0UsYUFBYWltQixFQUFlQyxHQU85QyxJQUFJQyxFQUFxQixHQUN6QixTQUFTQyxFQUFXdHlCLEVBQU11eUIsR0FDeEIsSUFBOEIsR0FBMUJBLEVBQVN2a0MsUUFBUSxLQUFZLENBQy9CLEdBQUlnUyxHQUFRdXlCLEVBQ1YsT0FHRixNQUFNL3BDLE1BQU0sc0JBQXdCd1gsRUFBTyxvQkFBc0J1eUIsR0FPbkUsS0FKQUEsRUFBVzM1QixFQUFlNUwsS0FBS3FsQyxFQUFvQkUsR0FDL0NGLEVBQW1CRSxHQUNsQkYsRUFBbUJFLEdBQVl6TyxPQUFPLE9BQVN5TyxFQUFXLE9BRWxEMTFCLEtBQUttRCxHQUlsQixNQUFNeFgsTUFBTSxzQkFBd0J3WCxFQUFPLHFCQUF1QnV5QixHQU1wRSxTQUFTdlYsRUFBU3NULEdBQ2hCLElBQUl0d0IsRUFBT3N3QixFQUFLdHdCLEtBRWhCLEdBQUlwSCxFQUFlNUwsS0FBS3dsQyxFQUFZeHlCLEdBQ2xDLE9BQU93eUIsRUFBV3h5QixHQUFNc3dCLEdBRzFCLE1BQU05bkMsTUFBTSxzQkFBd0J3WCxHQUl0QyxTQUFTeXlCLEVBQWlCQyxFQUFXQyxHQU1uQyxJQUxBLElBR0lwUyxFQUhBOTJCLEdBQUssRUFDTEUsRUFBU2dwQyxFQUFNaHBDLE9BQ2ZnRCxFQUFTLEtBR0psRCxFQUFJRSxHQUNYNDJCLEVBQU9vUyxFQUFNbHBDLEdBS1hBLEVBQUksRUFBSUUsR0FDUyxTQUFqQmdwQyxFQUFNbHBDLEdBQUd1VyxNQUNRLFFBQWpCMnlCLEVBQU1scEMsR0FBR21wQyxNQUNZLFNBQXJCRCxFQUFNbHBDLEVBQUksR0FBR3VXLE1BQ1EsVUFBckIyeUIsRUFBTWxwQyxFQUFJLEdBQUdtcEMsTUFDYkQsRUFBTWxwQyxFQUFJLEdBQUcyMUIsV0FBYSxJQUMxQnVULEVBQU1scEMsRUFBSSxHQUFHMjFCLFdBQWEsR0FFMUJ6eUIsR0FBVSxRQUlaQSxHQUFVK2xDLEVBQVVuUyxHQUd0QixPQUFPNXpCLEVBOERULFNBQVNrbUMsRUFBa0J2QyxHQUd6QixPQUZBZ0MsRUFBV2hDLEVBQUt0d0IsS0FBTSw2REFFZmdkLEVBQVNzVCxHQThEbEIsU0FBU3dDLEVBQW1CeEMsR0FHMUIsT0FGQWdDLEVBQVdoQyxFQUFLdHdCLEtBQU0sY0FFZnN3QixFQUFLOWxDLE1BOENkLFNBQVN1b0MsRUFBYXpDLEdBR3BCLE9BRkFnQyxFQUFXaEMsRUFBS3R3QixLQUFNLCtHQUVmZ2QsRUFBU3NULEdBK0RsQixJQUFJa0MsRUFBYSxDQUNmLFlBOU9GLFNBQTZCbEMsR0FHM0IsT0FGQWdDLEVBQVdoQyxFQUFLdHdCLEtBQU0sZUFFZnl5QixFQUFpQk0sRUFBY3pDLEVBQUt6USxPQTRPM0MsT0F6T0YsU0FBd0J5USxHQUd0QixPQUZBZ0MsRUFBV2hDLEVBQUt0d0IsS0FBTSxVQUVkc3dCLEVBQUtzQyxNQUNYLElBQUssUUFDSCxNQUFPLElBQ1QsSUFBSyxNQUNILE1BQU8sSUFDVCxJQUFLLFdBQ0gsTUFBTyxNQUNULElBQUssZUFDSCxNQUFPLE1BQ1QsUUFDRSxNQUFNcHFDLE1BQU0sdUJBNk5oQixlQW5ORixTQUFnQzhuQyxHQUc5QixPQUZBZ0MsRUFBV2hDLEVBQUt0d0IsS0FBTSxrQkFFZixLQUNKc3dCLEVBQUt4USxTQUFXLElBQU0sSUFDdkIyUyxFQUFpQkksRUFBbUJ2QyxFQUFLelEsTUFDM0MsS0E4TUEscUJBM01GLFNBQXNDeVEsR0FHcEMsT0FGQWdDLEVBQVdoQyxFQUFLdHdCLEtBQU0sd0JBRWYsS0FBT3N3QixFQUFLOWxDLE9BeU1uQixvQkF0TUYsU0FBcUM4bEMsR0FDbkNnQyxFQUFXaEMsRUFBS3R3QixLQUFNLHVCQUV0QixJQUFJM0osRUFBTWk2QixFQUFLajZCLElBQ1hDLEVBQU1nNkIsRUFBS2g2QixJQUVmLEdBQWdCLHVCQUFaRCxFQUFJMkosTUFBNkMsdUJBQVoxSixFQUFJMEosS0FDM0MsTUFBTXhYLE1BQU0saUNBR2QsT0FBT3FxQyxFQUFrQng4QixHQUFPLElBQU13OEIsRUFBa0J2OEIsSUE2THhELFlBcExGLFNBQTZCZzZCLEdBQzNCZ0MsRUFBV2hDLEVBQUt0d0IsS0FBTSxlQU90QixJQUxBLElBQUk2ZixFQUFPeVEsRUFBS3pRLEtBQ1pwMkIsR0FBSyxFQUNMRSxFQUFTazJCLEVBQUtsMkIsT0FDZGdELEVBQVMsS0FFSmxELEVBQUlFLEdBQ0YsR0FBTEYsSUFDRmtELEdBQVUsS0FFWkEsR0FBVXF3QixFQUFTNkMsRUFBS3AyQixJQUcxQixPQUFPa0QsR0FzS1AsSUFuS0YsU0FBcUIyakMsR0FHbkIsT0FGQWdDLEVBQVdoQyxFQUFLdHdCLEtBQU0sT0FFZixLQWlLUCxNQTlKRixTQUF1QnN3QixHQUNyQmdDLEVBQVdoQyxFQUFLdHdCLEtBQU0sU0FFdEIsSUFBSXJULEVBQVMsR0FFYixPQUFRMmpDLEVBQUtyUSxVQUNYLElBQUssU0FDQ3FRLEVBQUt4bEMsT0FDUDZCLEdBQVUsS0FBT21tQyxFQUFtQnhDLEVBQUt4bEMsTUFBUSxLQUVuRCxNQUNGLElBQUssU0FDSDZCLEdBQVUsS0FDVixNQUNGLElBQUssWUFDSEEsR0FBVSxLQUNWLE1BQ0YsSUFBSyxvQkFDSEEsR0FBVSxLQUNWLE1BQ0YsSUFBSyxhQUNIQSxHQUFVLE1BQ1YsTUFDRixJQUFLLHFCQUNIQSxHQUFVLE1BQ1YsTUFDRixRQUNFLE1BQU1uRSxNQUFNLHNCQUF3QjhuQyxFQUFLMEMsV0FLN0MsTUFBTyxLQUZQcm1DLEdBQVU4bEMsRUFBaUJ6VixFQUFVc1QsRUFBS3pRLE9BRXBCLEtBK0h0QixXQXRIRixTQUE0QnlRLEdBQzFCZ0MsRUFBV2hDLEVBQUt0d0IsS0FBTSxjQUV0QixJQUFJaXpCLEVBQWEsR0FDYjU4QixFQUFNaTZCLEVBQUtqNkIsSUFDWEMsRUFBTWc2QixFQUFLaDZCLElBc0JmLE9BbEJJMjhCLEVBRk8sTUFBUDM4QixFQUNTLEdBQVBELEVBQ1csSUFDRyxHQUFQQSxFQUNJLElBRUEsSUFBTUEsRUFBTSxLQUVsQkEsR0FBT0MsRUFDSCxJQUFNRCxFQUFNLElBQ1QsR0FBUEEsR0FBbUIsR0FBUEMsRUFDUixJQUVBLElBQU1ELEVBQU0sSUFBTUMsRUFBTSxJQUdsQ2c2QixFQUFLNEMsU0FDUkQsR0FBYyxLQWpJbEIsU0FBc0IzQyxHQUdwQixPQUZBZ0MsRUFBV2hDLEVBQUt0d0IsS0FBTSx3RUFFZmdkLEVBQVNzVCxHQWlJVDZDLENBQWE3QyxFQUFLelEsS0FBSyxJQUFNb1QsR0E0RnBDLFVBekZGLFNBQTJCM0MsR0FHekIsR0FGQWdDLEVBQVdoQyxFQUFLdHdCLEtBQU0sYUFFbEJzd0IsRUFBS2hSLFdBQ1AsTUFBTyxLQUFPZ1IsRUFBS2hSLFdBRXJCLEdBQUlnUixFQUFLeGxDLEtBQ1AsTUFBTyxPQUFTZ29DLEVBQW1CeEMsRUFBS3hsQyxNQUFRLElBR2xELE1BQU0sSUFBSXRDLE1BQU0sMkJBZ0ZoQixzQkF2RUYsU0FBdUM4bkMsR0FHckMsT0FGQWdDLEVBQVdoQyxFQUFLdHdCLEtBQU0seUJBRWYsTUFBUXN3QixFQUFLeFEsU0FBVyxJQUFNLEtBQU8sSUFBTXdRLEVBQUs5bEMsTUFBUSxLQXFFL0QsTUFsRUYsU0FBdUI4bEMsR0FDckJnQyxFQUFXaEMsRUFBS3R3QixLQUFNLFNBRXRCLElBQUk0eUIsRUFBT3RDLEVBQUtzQyxLQUNaeFQsRUFBWWtSLEVBQUtsUixVQUVyQixHQUF3QixpQkFBYkEsRUFDVCxNQUFNLElBQUk1MkIsTUFBTSx1QkFBeUI0MkIsR0FHM0MsT0FBUXdULEdBQ04sSUFBSyxnQkFDSCxNQUFPLE1BQVFiLEVBQWMzUyxFQUFZLElBQzNDLElBQUssb0JBQ0gsTUFBTyxPQUFTLEtBQU9BLEVBQVVsdEIsU0FBUyxJQUFJa2hDLGVBQWVqbEMsT0FBTyxHQUN0RSxJQUFLLGFBQ0gsTUFBTyxLQUFPNGpDLEVBQWMzUyxHQUM5QixJQUFLLE9BQ0gsTUFBTyxLQUFPQSxFQUNoQixJQUFLLFFBQ0gsTUFBTyxNQUFRLE1BQVFBLEVBQVVsdEIsU0FBUyxJQUFJL0QsT0FBTyxHQUN2RCxJQUFLLGVBQ0gsT0FBUWl4QixHQUNOLEtBQUssRUFDSCxNQUFPLE1BQ1QsS0FBSyxFQUNILE1BQU8sTUFDVCxLQUFLLEdBQ0gsTUFBTyxNQUNULEtBQUssR0FDSCxNQUFPLE1BQ1QsS0FBSyxHQUNILE1BQU8sTUFDVCxLQUFLLEdBQ0gsTUFBTyxNQUNULEtBQUssR0FDSCxNQUFPLE1BQ1QsUUFDRSxNQUFNNTJCLE1BQU0sdUJBQXlCNDJCLEdBRTNDLElBQUssU0FDSCxPQUFPMlMsRUFBYzNTLEdBQ3ZCLElBQUssZ0JBQ0gsTUFBTyxPQUFTLE9BQVNBLEVBQVVsdEIsU0FBUyxJQUFJa2hDLGVBQWVqbEMsT0FBTyxHQUN4RSxJQUFLLHlCQUNILE1BQU8sT0FBU2l4QixFQUFVbHRCLFNBQVMsSUFBSWtoQyxjQUFnQixJQUN6RCxRQUNFLE1BQU01cUMsTUFBTSwwQkFBNEJvcUMsTUF5QjFDUyxFQUFXLENBQ2IsU0FBWXJXLFFBUVgsS0FGRCxhQUNFLE9BQU9xVyxHQUNSLDhCQUVEM0IsRUFBSzJCLFNBQVdBLElBV2xCcm1DLEtBQUtzSyxRLDBEQ3haUSxTQUFTcUIsSUFldEIsT0FkQUEsRUFBVzFRLE9BQU95RixRQUFVLFNBQVVsRSxHQUNwQyxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUMsVUFBVUMsT0FBUUYsSUFBSyxDQUN6QyxJQUFJRyxFQUFTRixVQUFVRCxHQUV2QixJQUFLLElBQUlLLEtBQU9GLEVBQ1YzQixPQUFPRCxVQUFVNFEsZUFBZTVMLEtBQUtwRCxFQUFRRSxLQUMvQ04sRUFBT00sR0FBT0YsRUFBT0UsSUFLM0IsT0FBT04sSUFHT0osTUFBTWtPLEtBQU01TixXQWY5QixtQyxnQ0NFQSxNQUFNNHBDLEVBQXNCLEVBQVEsSUFDOUJDLEVBQWtCLEVBQVEsSUFZaENwOEIsRUFBT0MsUUFWZSxTQUFTZ25CLEdBQzlCLEdBQUlrVixFQUFvQnRoQixJQUFJb00sR0FDM0IsT0FBT0EsRUFFUixHQUFJbVYsRUFBZ0J2aEIsSUFBSW9NLEdBQ3ZCLE9BQU9tVixFQUFnQjl5QixJQUFJMmQsR0FFNUIsTUFBTSxJQUFJNTFCLE1BQU0scUJBQXNCNDFCLEssaUJDWnZDam5CLEVBQU9DLFFBQVUsSUFBSW84QixJQUFJLENBRXhCLG1CQUNBLFNBQ0Esb0JBRUEsYUFDQSxNQUNBLFFBQ0Esa0JBQ0EsV0FDQSxlQUNBLGdCQUNBLGlCQUNBLFFBQ0EsMEJBQ0EsMEJBQ0EsMEJBQ0EsK0JBQ0EsMEJBQ0EsMEJBQ0EsT0FDQSwrQkFDQSxhQUNBLFlBQ0EsUUFDQSxrQkFDQSxpQkFDQSxzQkFDQSxxQkFDQSx3QkFDQSxXQUNBLGdCQUNBLGtCQUNBLFlBQ0EsY0FDQSxXQUNBLGNBQ0Esc0JBQ0EsdUJBQ0EsZUFDQSwwQkFDQSxZQUNBLE9BQ0EsMEJBQ0EsaUJBQ0Esc0JBQ0EsaUJBQ0EsVUFDQSxxQkFDQSxvQkFDQSxjQUNBLHVCQUNBLG9CQUNBLFlBQ0EscUJBQ0EsY0FDQSxlQUNBLGUsaUJDekREcjhCLEVBQU9DLFFBQVUsSUFBSXE4QixJQUFJLENBQ3hCLENBQUMsTUFBTyxxQkFDUixDQUFDLEtBQU0sVUFDUCxDQUFDLEtBQU0sb0JBQ1AsQ0FBQyxPQUFRLG1CQUNULENBQUMsUUFBUyxjQUNWLENBQUMsU0FBVSxnQkFDWCxDQUFDLFNBQVUsaUJBQ1gsQ0FBQyxRQUFTLFNBQ1YsQ0FBQyxLQUFNLGtCQUNQLENBQUMsT0FBUSwyQkFDVCxDQUFDLE9BQVEsMkJBQ1QsQ0FBQyxRQUFTLGdDQUNWLENBQUMsTUFBTywyQkFDUixDQUFDLE1BQU8sMkJBQ1IsQ0FBQyxNQUFPLDJCQUNSLENBQUMsT0FBUSxRQUNULENBQUMsTUFBTyxjQUNSLENBQUMsS0FBTSxnQ0FDUCxDQUFDLE1BQU8sYUFDUixDQUFDLFFBQVMsdUJBQ1YsQ0FBQyxRQUFTLG1CQUNWLENBQUMsT0FBUSxrQkFDVCxDQUFDLFFBQVMsU0FDVixDQUFDLFFBQVMsc0JBQ1YsQ0FBQyxNQUFPLFlBQ1IsQ0FBQyxVQUFXLHlCQUNaLENBQUMsVUFBVyxpQkFDWixDQUFDLFNBQVUsbUJBQ1gsQ0FBQyxNQUFPLGFBQ1IsQ0FBQyxNQUFPLGVBQ1IsQ0FBQyxPQUFRLGVBQ1QsQ0FBQyxNQUFPLFlBQ1IsQ0FBQyxPQUFRLHVCQUNULENBQUMsT0FBUSx3QkFDVCxDQUFDLFNBQVUsZ0JBQ1gsQ0FBQyxNQUFPLDJCQUNSLENBQUMsUUFBUyxhQUNWLENBQUMsT0FBUSxRQUNULENBQUMsUUFBUywyQkFDVixDQUFDLFVBQVcsa0JBQ1osQ0FBQyxTQUFVLHVCQUNYLENBQUMsUUFBUyxrQkFDVixDQUFDLFVBQVcsV0FDWixDQUFDLEtBQU0sc0JBQ1AsQ0FBQyxLQUFNLGVBQ1AsQ0FBQyxRQUFTLHFCQUNWLENBQUMsT0FBUSx3QkFDVCxDQUFDLFFBQVMscUJBQ1YsQ0FBQyxRQUFTLGFBQ1YsQ0FBQyxLQUFNLHNCQUNQLENBQUMsU0FBVSxlQUNYLENBQUMsUUFBUyxlQUNWLENBQUMsT0FBUSxnQkFDVCxDQUFDLE9BQVEsZ0IsZ0NDckRWLE1BQU1DLEVBQXlCLEVBQVEsSUFnQnZDdjhCLEVBQU9DLFFBZG9CLFNBQVNnbkIsRUFBVTV6QixHQUM3QyxNQUFNbXBDLEVBQWVELEVBQXVCanpCLElBQUkyZCxHQUNoRCxJQUFLdVYsRUFDSixNQUFNLElBQUluckMsTUFBTSxzQkFBdUI0MUIsUUFFeEMsTUFBTXdWLEVBQWlCRCxFQUFhbHpCLElBQUlqVyxHQUN4QyxHQUFJb3BDLEVBQ0gsT0FBT0EsRUFFUixNQUFNLElBQUlwckMsTUFDVCxtQkFBb0JnQyxzQkFBNEI0ekIsVSxpQkNkbERqbkIsRUFBT0MsUUFBVSxJQUFJcThCLElBQUksQ0FDeEIsQ0FBQyxtQkFBb0IsSUFBSUEsSUFBSSxDQUM1QixDQUFDLElBQUssU0FDTixDQUFDLEtBQU0sV0FDUCxDQUFDLFFBQVMsV0FDVixDQUFDLEtBQU0sVUFDUCxDQUFDLEtBQU0sY0FDUCxDQUFDLEtBQU0sZUFDUCxDQUFDLEtBQU0sYUFDUCxDQUFDLElBQUssVUFDTixDQUFDLEtBQU0sZ0JBQ1AsQ0FBQyxLQUFNLG9CQUNQLENBQUMsS0FBTSxtQkFDUCxDQUFDLEtBQU0sZ0JBQ1AsQ0FBQyxLQUFNLG9CQUNQLENBQUMsS0FBTSxvQkFDUCxDQUFDLElBQUssUUFDTixDQUFDLGlCQUFrQixRQUNuQixDQUFDLEtBQU0sZ0JBQ1AsQ0FBQyxLQUFNLGtCQUNQLENBQUMsS0FBTSxtQkFDUCxDQUFDLElBQUssVUFDTixDQUFDLEtBQU0sa0JBQ1AsQ0FBQyxRQUFTLGtCQUNWLENBQUMsS0FBTSxpQkFDUCxDQUFDLEtBQU0sZ0JBQ1AsQ0FBQyxJQUFLLGVBQ04sQ0FBQyxRQUFTLGVBQ1YsQ0FBQyxLQUFNLHlCQUNQLENBQUMsS0FBTSxvQkFDUCxDQUFDLEtBQU0scUJBQ1AsQ0FBQyxLQUFNLHFCQUNQLENBQUMsS0FBTSx1QkFDUCxDQUFDLEtBQU0scUJBQ1AsQ0FBQyxLQUFNLG9CQUNQLENBQUMsSUFBSyxVQUNOLENBQUMsS0FBTSxtQkFDUCxDQUFDLEtBQU0sbUJBQ1AsQ0FBQyxLQUFNLGVBQ1AsQ0FBQyxLQUFNLGdCQUNQLENBQUMsSUFBSyxhQUNOLENBQUMsS0FBTSxrQkFDUCxDQUFDLEtBQU0sdUJBQ1AsQ0FBQyxLQUFNLG1CQUNQLENBQUMsUUFBUyxTQUNWLENBQUMsVUFBVyxXQUNaLENBQUMsU0FBVSxVQUNYLENBQUMsYUFBYyxjQUNmLENBQUMsY0FBZSxlQUNoQixDQUFDLFlBQWEsYUFDZCxDQUFDLFNBQVUsVUFDWCxDQUFDLGVBQWdCLGdCQUNqQixDQUFDLG1CQUFvQixvQkFDckIsQ0FBQyxrQkFBbUIsbUJBQ3BCLENBQUMsZUFBZ0IsZ0JBQ2pCLENBQUMsbUJBQW9CLG9CQUNyQixDQUFDLG1CQUFvQixvQkFDckIsQ0FBQyxPQUFRLFFBQ1QsQ0FBQyxlQUFnQixnQkFDakIsQ0FBQyxpQkFBa0Isa0JBQ25CLENBQUMsa0JBQW1CLG1CQUNwQixDQUFDLFNBQVUsVUFDWCxDQUFDLGlCQUFrQixrQkFDbkIsQ0FBQyxnQkFBaUIsaUJBQ2xCLENBQUMsZUFBZ0IsZ0JBQ2pCLENBQUMsY0FBZSxlQUNoQixDQUFDLHdCQUF5Qix5QkFDMUIsQ0FBQyxtQkFBb0Isb0JBQ3JCLENBQUMsb0JBQXFCLHFCQUN0QixDQUFDLG9CQUFxQixxQkFDdEIsQ0FBQyxzQkFBdUIsdUJBQ3hCLENBQUMsb0JBQXFCLHFCQUN0QixDQUFDLG1CQUFvQixvQkFDckIsQ0FBQyxTQUFVLFVBQ1gsQ0FBQyxrQkFBbUIsbUJBQ3BCLENBQUMsa0JBQW1CLG1CQUNwQixDQUFDLGNBQWUsZUFDaEIsQ0FBQyxlQUFnQixnQkFDakIsQ0FBQyxZQUFhLGFBQ2QsQ0FBQyxpQkFBa0Isa0JBQ25CLENBQUMsc0JBQXVCLHVCQUN4QixDQUFDLGtCQUFtQixzQkFFckIsQ0FBQyxTQUFVLElBQUlBLElBQUksQ0FDbEIsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLHNCQUNULENBQUMsT0FBUSxRQUNULENBQUMsT0FBUSxVQUNULENBQUMsT0FBUSxvQkFDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsV0FDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsYUFDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsV0FDVCxDQUFDLE9BQVEsYUFDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsVUFDVCxDQUFDLE9BQVEsV0FDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsVUFDVCxDQUFDLE9BQVEsdUJBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFFBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLGNBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLGNBQ1QsQ0FBQyxPQUFRLGVBQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLHdCQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxZQUNULENBQUMsT0FBUSxZQUNULENBQUMsT0FBUSxjQUNULENBQUMsT0FBUSxpQkFDVCxDQUFDLE9BQVEsaUJBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLE9BQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLHlCQUNULENBQUMsT0FBUSxnQkFDVCxDQUFDLE9BQVEsMEJBQ1QsQ0FBQyxPQUFRLHdCQUNULENBQUMsT0FBUSxpQkFDVCxDQUFDLE9BQVEsY0FDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsY0FDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsVUFDVCxDQUFDLE9BQVEsdUJBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLE9BQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFFBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLGNBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLGVBQ1QsQ0FBQyxPQUFRLGlCQUNULENBQUMsT0FBUSxvQkFDVCxDQUFDLE9BQVEsd0JBQ1QsQ0FBQyxPQUFRLGFBQ1QsQ0FBQyxPQUFRLFFBQ1QsQ0FBQyxPQUFRLGFBQ1QsQ0FBQyxPQUFRLE9BQ1QsQ0FBQyxPQUFRLGdCQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxlQUNULENBQUMsT0FBUSxxQkFDVCxDQUFDLE9BQVEsYUFDVCxDQUFDLE9BQVEsUUFDVCxDQUFDLE9BQVEsT0FDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsY0FDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsV0FDVCxDQUFDLE9BQVEsYUFDVCxDQUFDLE9BQVEsZUFDVCxDQUFDLE9BQVEsY0FDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEseUJBQ1QsQ0FBQyxPQUFRLG1CQUNULENBQUMsT0FBUSxjQUNULENBQUMsT0FBUSxRQUNULENBQUMsT0FBUSwwQkFDVCxDQUFDLE9BQVEsVUFDVCxDQUFDLE9BQVEsbUJBQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLGFBQ1QsQ0FBQyxPQUFRLHFCQUNULENBQUMsT0FBUSxjQUNULENBQUMsT0FBUSxlQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxhQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxlQUNULENBQUMsT0FBUSxnQkFDVCxDQUFDLE9BQVEsV0FDVCxDQUFDLE9BQVEsYUFDVCxDQUFDLE9BQVEsZ0JBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLGVBQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFFBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLE9BQ1QsQ0FBQyxPQUFRLGVBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLGVBQ1QsQ0FBQyxPQUFRLGFBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLE1BQ1QsQ0FBQyxPQUFRLG9CQUNULENBQUMsT0FBUSxhQUNULENBQUMsT0FBUSxhQUNULENBQUMsT0FBUSxVQUNULENBQUMsT0FBUSxXQUNULENBQUMsUUFBUyxTQUNWLENBQUMscUJBQXNCLHNCQUN2QixDQUFDLFNBQVUsVUFDWCxDQUFDLG1CQUFvQixvQkFDckIsQ0FBQyxXQUFZLFlBQ2IsQ0FBQyxVQUFXLFdBQ1osQ0FBQyxXQUFZLFlBQ2IsQ0FBQyxRQUFTLFNBQ1YsQ0FBQyxZQUFhLGFBQ2QsQ0FBQyxRQUFTLFNBQ1YsQ0FBQyxVQUFXLFdBQ1osQ0FBQyxZQUFhLGFBQ2QsQ0FBQyxXQUFZLFlBQ2IsQ0FBQyxTQUFVLFVBQ1gsQ0FBQyxVQUFXLFdBQ1osQ0FBQyxXQUFZLFlBQ2IsQ0FBQyxRQUFTLFNBQ1YsQ0FBQyxTQUFVLFVBQ1gsQ0FBQyxzQkFBdUIsdUJBQ3hCLENBQUMsU0FBVSxVQUNYLENBQUMsV0FBWSxZQUNiLENBQUMsYUFBYyxjQUNmLENBQUMsU0FBVSxVQUNYLENBQUMsVUFBVyxXQUNaLENBQUMsV0FBWSxZQUNiLENBQUMsYUFBYyxjQUNmLENBQUMsY0FBZSxlQUNoQixDQUFDLFFBQVMsU0FDVixDQUFDLFVBQVcsV0FDWixDQUFDLFdBQVksWUFDYixDQUFDLHVCQUF3Qix3QkFDekIsQ0FBQyxVQUFXLFdBQ1osQ0FBQyxVQUFXLFdBQ1osQ0FBQyxXQUFZLFlBQ2IsQ0FBQyxXQUFZLFlBQ2IsQ0FBQyxhQUFjLGNBQ2YsQ0FBQyxnQkFBaUIsaUJBQ2xCLENBQUMsZ0JBQWlCLGlCQUNsQixDQUFDLFNBQVUsVUFDWCxDQUFDLFVBQVcsV0FDWixDQUFDLFFBQVMsU0FDVixDQUFDLFdBQVksWUFDYixDQUFDLFdBQVksWUFDYixDQUFDLFNBQVUsVUFDWCxDQUFDLE1BQU8sT0FDUixDQUFDLFVBQVcsV0FDWixDQUFDLFNBQVUsVUFDWCxDQUFDLFNBQVUsVUFDWCxDQUFDLFdBQVksWUFDYixDQUFDLHdCQUF5Qix5QkFDMUIsQ0FBQyxlQUFnQixnQkFDakIsQ0FBQyx5QkFBMEIsMEJBQzNCLENBQUMsdUJBQXdCLHdCQUN6QixDQUFDLGdCQUFpQixpQkFDbEIsQ0FBQyxhQUFjLGNBQ2YsQ0FBQyxXQUFZLFlBQ2IsQ0FBQyxXQUFZLFlBQ2IsQ0FBQyxXQUFZLFlBQ2IsQ0FBQyxhQUFjLGNBQ2YsQ0FBQyxRQUFTLFNBQ1YsQ0FBQyxTQUFVLFVBQ1gsQ0FBQyxzQkFBdUIsdUJBQ3hCLENBQUMsVUFBVyxXQUNaLENBQUMsU0FBVSxVQUNYLENBQUMsV0FBWSxZQUNiLENBQUMsTUFBTyxPQUNSLENBQUMsUUFBUyxTQUNWLENBQUMsU0FBVSxVQUNYLENBQUMsUUFBUyxTQUNWLENBQUMsV0FBWSxZQUNiLENBQUMsV0FBWSxZQUNiLENBQUMsU0FBVSxVQUNYLENBQUMsU0FBVSxVQUNYLENBQUMsV0FBWSxZQUNiLENBQUMsVUFBVyxXQUNaLENBQUMsVUFBVyxXQUNaLENBQUMsYUFBYyxjQUNmLENBQUMsVUFBVyxXQUNaLENBQUMsY0FBZSxlQUNoQixDQUFDLGdCQUFpQixpQkFDbEIsQ0FBQyxtQkFBb0Isb0JBQ3JCLENBQUMsdUJBQXdCLHdCQUN6QixDQUFDLFlBQWEsYUFDZCxDQUFDLFlBQWEsYUFDZCxDQUFDLE1BQU8sT0FDUixDQUFDLGVBQWdCLGdCQUNqQixDQUFDLFVBQVcsV0FDWixDQUFDLFVBQVcsV0FDWixDQUFDLGNBQWUsZUFDaEIsQ0FBQyxvQkFBcUIscUJBQ3RCLENBQUMsWUFBYSxhQUNkLENBQUMsTUFBTyxPQUNSLENBQUMsUUFBUyxTQUNWLENBQUMsUUFBUyxTQUNWLENBQUMsV0FBWSxZQUNiLENBQUMsYUFBYyxjQUNmLENBQUMsUUFBUyxTQUNWLENBQUMsUUFBUyxTQUNWLENBQUMsVUFBVyxXQUNaLENBQUMsWUFBYSxhQUNkLENBQUMsY0FBZSxlQUNoQixDQUFDLGFBQWMsY0FDZixDQUFDLFdBQVksWUFDYixDQUFDLHdCQUF5Qix5QkFDMUIsQ0FBQyxrQkFBbUIsbUJBQ3BCLENBQUMsYUFBYyxjQUNmLENBQUMsT0FBUSxRQUNULENBQUMseUJBQTBCLDBCQUMzQixDQUFDLFNBQVUsVUFDWCxDQUFDLGtCQUFtQixtQkFDcEIsQ0FBQyxRQUFTLFNBQ1YsQ0FBQyxZQUFhLGFBQ2QsQ0FBQyxvQkFBcUIscUJBQ3RCLENBQUMsYUFBYyxjQUNmLENBQUMsY0FBZSxlQUNoQixDQUFDLFVBQVcsV0FDWixDQUFDLFVBQVcsV0FDWixDQUFDLFVBQVcsV0FDWixDQUFDLFlBQWEsYUFDZCxDQUFDLFVBQVcsV0FDWixDQUFDLFVBQVcsV0FDWixDQUFDLGNBQWUsZUFDaEIsQ0FBQyxlQUFnQixnQkFDakIsQ0FBQyxVQUFXLFdBQ1osQ0FBQyxZQUFhLGFBQ2QsQ0FBQyxlQUFnQixnQkFDakIsQ0FBQyxTQUFVLFVBQ1gsQ0FBQyxXQUFZLFlBQ2IsQ0FBQyxRQUFTLFNBQ1YsQ0FBQyxTQUFVLFVBQ1gsQ0FBQyxjQUFlLGVBQ2hCLENBQUMsUUFBUyxTQUNWLENBQUMsU0FBVSxVQUNYLENBQUMsV0FBWSxZQUNiLENBQUMsU0FBVSxVQUNYLENBQUMsV0FBWSxZQUNiLENBQUMsVUFBVyxXQUNaLENBQUMsU0FBVSxVQUNYLENBQUMsVUFBVyxXQUNaLENBQUMsVUFBVyxXQUNaLENBQUMsV0FBWSxZQUNiLENBQUMsTUFBTyxPQUNSLENBQUMsY0FBZSxlQUNoQixDQUFDLFNBQVUsVUFDWCxDQUFDLGNBQWUsZUFDaEIsQ0FBQyxZQUFhLGFBQ2QsQ0FBQyxTQUFVLFVBQ1gsQ0FBQyxLQUFNLE1BQ1AsQ0FBQyxtQkFBb0Isb0JBQ3JCLENBQUMsWUFBYSxhQUNkLENBQUMsU0FBVSxVQUNYLENBQUMsVUFBVyxjQUViLENBQUMsb0JBQXFCLElBQUlBLElBQUksQ0FDN0IsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLHNCQUNULENBQUMsT0FBUSxRQUNULENBQUMsT0FBUSxVQUNULENBQUMsT0FBUSxvQkFDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsV0FDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsYUFDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsV0FDVCxDQUFDLE9BQVEsYUFDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsVUFDVCxDQUFDLE9BQVEsV0FDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsVUFDVCxDQUFDLE9BQVEsdUJBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFFBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLGNBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLGNBQ1QsQ0FBQyxPQUFRLGVBQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLHdCQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxZQUNULENBQUMsT0FBUSxZQUNULENBQUMsT0FBUSxjQUNULENBQUMsT0FBUSxpQkFDVCxDQUFDLE9BQVEsaUJBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLE9BQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLHlCQUNULENBQUMsT0FBUSxnQkFDVCxDQUFDLE9BQVEsMEJBQ1QsQ0FBQyxPQUFRLHdCQUNULENBQUMsT0FBUSxpQkFDVCxDQUFDLE9BQVEsY0FDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsY0FDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsVUFDVCxDQUFDLE9BQVEsdUJBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLE9BQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFFBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLGNBQ1QsQ0FBQyxPQUFRLFdBQ1QsQ0FBQyxPQUFRLGVBQ1QsQ0FBQyxPQUFRLGlCQUNULENBQUMsT0FBUSxvQkFDVCxDQUFDLE9BQVEsd0JBQ1QsQ0FBQyxPQUFRLGFBQ1QsQ0FBQyxPQUFRLFFBQ1QsQ0FBQyxPQUFRLGFBQ1QsQ0FBQyxPQUFRLE9BQ1QsQ0FBQyxPQUFRLGdCQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxlQUNULENBQUMsT0FBUSxxQkFDVCxDQUFDLE9BQVEsYUFDVCxDQUFDLE9BQVEsUUFDVCxDQUFDLE9BQVEsT0FDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEsY0FDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsU0FDVCxDQUFDLE9BQVEsV0FDVCxDQUFDLE9BQVEsYUFDVCxDQUFDLE9BQVEsZUFDVCxDQUFDLE9BQVEsY0FDVCxDQUFDLE9BQVEsWUFDVCxDQUFDLE9BQVEseUJBQ1QsQ0FBQyxPQUFRLG1CQUNULENBQUMsT0FBUSxjQUNULENBQUMsT0FBUSxRQUNULENBQUMsT0FBUSwwQkFDVCxDQUFDLE9BQVEsVUFDVCxDQUFDLE9BQVEsbUJBQ1QsQ0FBQyxPQUFRLFNBQ1QsQ0FBQyxPQUFRLGFBQ1QsQ0FBQyxPQUFRLHFCQUNULENBQUMsT0FBUSxjQUNULENBQUMsT0FBUSxlQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxhQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxXQUNULENBQUMsT0FBUSxlQUNULENBQUMsT0FBUSxnQkFDVCxDQUFDLE9BQVEsV0FDVCxDQUFDLE9BQVEsYUFDVCxDQUFDLE9BQVEsZ0JBQ1QsQ0FBQyxPQUFRLFVBQ1QsQ0FBQyxPQUFRLFlBQ1QsQ0FB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QUFNLE1BQ1AsQ0FBQyxtQkFBb0Isb0JBQ3JCLENBQUMsWUFBYSxhQUNkLENBQUMsU0FBVSxVQUNYLENBQUMsVUFBVyxpQixpQkNyc0JkdDhCLEVBQU9DLFFBQVUsSUFBSXE4QixJQUFJLENBQ3hCLENBQUMsR0FBTSxNQUNQLENBQUMsR0FBTSxLQUNQLENBQUMsSUFBTSxNQUNQLENBQUMsSUFBTSxLQUNQLENBQUMsSUFBTSxLQUNQLENBQUMsSUFBTSxNQUNQLENBQUMsSUFBTSxNQUNQLENBQUMsSUFBTSxNQUNQLENBQUMsSUFBTyxJQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxNQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxNQUNSLENBQUMsSUFBTyxNQUNSLENBQUMsSUFBTyxNQUNSLENBQUMsSUFBTyxNQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxNQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxNQUNSLENBQUMsSUFBTyxNQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxNQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxNQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsSUFBTyxLQUNSLENBQUMsS0FBTyxLQUNSLENBQUMsS0FBTyxLQUNSLENBQUMsS0FBTyxDQUNQLElBQ0EsSUFDQSxNQUVELENBQUMsS0FBTyxLQUNSLENBQUMsS0FBTyxNQUNSLENBQUMsS0FBTyxNQUNSLENBQUMsS0FBTyxNQUNSLENBQUMsS0FBTyxNQUNSLENBQUMsS0FBTyxNQUNSLENBQUMsS0FBTyxNQUNSLENBQUMsS0FBTyxNQUNSLENBQUMsS0FBUSxNQUNULENBQUMsS0FBUSxNQUNULENBQUMsS0FBUSxNQUNULENBQUMsS0FBUSxNQUNULENBQUMsS0FBUSxNQUNULENBQUMsS0FBUSxDQUNSLEtBQ0EsT0FFRCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsT0FDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsS0FDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsQ0FDUixJQUNBLE1BRUQsQ0FBQyxLQUFRLE1BQ1QsQ0FBQyxLQUFRLE1BQ1QsQ0FBQyxLQUFRLE1BQ1QsQ0FBQyxLQUFRLE1BQ1QsQ0FBQyxLQUFRLENBQ1IsSUFDQSxNQUVELENBQUMsS0FBUSxJQUNULENBQUMsS0FBUSxDQUNSLElBQ0EsTUFFRCxDQUFDLE1BQVEsTUFDVCxDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsVyxnQ0Nya0JYLE1BQU12VyxFQUFhLEVBQVEsR0FFM0I5bEIsRUFBUThtQixRQUFVLElBQUl1VixJQUFJLENBQ3pCLENBQUMsSUFBS3ZXLElBQ0pNLFNBQVMsR0FBTSxLQUNqQixDQUFDLElBQUtOLElBQ0pNLFNBQVMsRUFBSyxJQUNkQSxTQUFTLEdBQU0sUUFDakIsQ0FBQyxJQUFLTixFQUFXLEdBQU0sSUFBTSxLQUFRLEtBQVEsS0FBUSxNQUFRLE9BQzNETSxTQUFTLEVBQUssSUFDZEEsU0FBUyxLQUFRLE1BQ2pCQSxTQUFTLEtBQVEsT0FDbkIsQ0FBQyxJQUFLTixJQUNKTSxTQUFTLEVBQUssR0FDZEEsU0FBUyxHQUFLLElBQ2RBLFNBQVMsR0FBTSxLQUNmQSxTQUFTLElBQU0sTUFDZkEsU0FBUyxLQUFRLE1BQ2pCQSxTQUFTLEtBQVEsTUFDakJBLFNBQVMsS0FBUSxNQUNqQkEsU0FBUyxLQUFRLE1BQ2pCQSxTQUFTLEtBQVEsT0FDakJBLFNBQVMsTUFBUSxPQUNqQkEsU0FBUyxNQUFRLFFBQ25CLENBQUMsSUFBS04sRUFBVyxJQUNmTSxTQUFTLEdBQU0sSUFDZkEsU0FBUyxHQUFNLElBQ2ZBLFNBQVMsR0FBTSxNQUNqQixDQUFDLElBQUtOLEVBQVcsSUFDZk0sU0FBUyxFQUFLLElBQ2RBLFNBQVMsR0FBTSxJQUNmQSxTQUFTLEdBQU0sSUFDZkEsU0FBUyxJQUFNLFVBR2xCcG1CLEVBQVE2bUIsUUFBVSxJQUFJd1YsSUFBSSxDQUN6QixDQUFDLElBQUt2VyxJQUNKTSxTQUFTLEdBQU0sS0FDakIsQ0FBQyxJQUFLTixJQUNKTSxTQUFTLEVBQUssSUFDZEEsU0FBUyxHQUFNLFVBQ2pCLENBQUMsSUFBS04sRUFBVyxHQUFNLElBQU0sS0FBUSxLQUFRLEtBQVEsTUFBUSxPQUMzRE0sU0FBUyxFQUFLLElBQ2RBLFNBQVMsS0FBUSxNQUNqQkEsU0FBUyxLQUFRLE9BQ25CLENBQUMsSUFBS04sSUFDSk0sU0FBUyxFQUFLLEdBQ2RBLFNBQVMsR0FBSyxJQUNkQSxTQUFTLEdBQU0sS0FDZkEsU0FBUyxJQUFNLE1BQ2ZBLFNBQVMsS0FBUSxNQUNqQkEsU0FBUyxLQUFRLE1BQ2pCQSxTQUFTLEtBQVEsTUFDakJBLFNBQVMsS0FBUSxNQUNqQkEsU0FBUyxLQUFRLE9BQ2pCQSxTQUFTLE1BQVEsT0FDakJBLFNBQVMsTUFBUSxVQUNuQixDQUFDLElBQUtOLEVBQVcsSUFDZk0sU0FBUyxHQUFNLElBQ2ZBLFNBQVMsR0FBTSxJQUNmQSxTQUFTLEdBQU0sTUFDakIsQ0FBQyxJQUFLTixFQUFXLElBQ2ZNLFNBQVMsRUFBSyxJQUNkQSxTQUFTLEdBQU0sSUFDZkEsU0FBUyxHQUFNLElBQ2ZBLFNBQVMsSUFBTSxZQUdsQnBtQixFQUFRNG1CLG9CQUFzQixJQUFJeVYsSUFBSSxDQUNyQyxDQUFDLElBQUt2VyxJQUNKTSxTQUFTLEdBQU0sS0FDakIsQ0FBQyxJQUFLTixJQUNKTSxTQUFTLEVBQUssSUFDZEEsU0FBUyxHQUFNLFVBQ2pCLENBQUMsSUFBS04sRUFBVyxHQUFNLElBQU0sS0FBUSxLQUFRLEtBQVEsTUFBUSxPQUMzRE0sU0FBUyxFQUFLLElBQ2RBLFNBQVMsS0FBUSxNQUNqQkEsU0FBUyxLQUFRLE9BQ25CLENBQUMsSUFBS04sSUFDSk0sU0FBUyxFQUFLLEdBQ2RBLFNBQVMsR0FBSyxJQUNkQSxTQUFTLEdBQU0sS0FDZkEsU0FBUyxJQUFNLE1BQ2ZBLFNBQVMsS0FBUSxNQUNqQkEsU0FBUyxLQUFRLE1BQ2pCQSxTQUFTLEtBQVEsTUFDakJBLFNBQVMsS0FBUSxNQUNqQkEsU0FBUyxLQUFRLE9BQ2pCQSxTQUFTLE1BQVEsT0FDakJBLFNBQVMsTUFBUSxVQUNuQixDQUFDLElBQUtOLEVBQVcsR0FBTSxJQUFPLE1BQzVCTSxTQUFTLEdBQU0sSUFDZkEsU0FBUyxHQUFNLElBQ2ZBLFNBQVMsR0FBTSxNQUNqQixDQUFDLElBQUtOLEVBQVcsSUFDZk0sU0FBUyxFQUFLLElBQ2RBLFNBQVMsR0FBTSxJQUNmQSxTQUFTLEdBQU0sSUFDZkEsU0FBUyxJQUFNLEtBQ2ZBLFNBQVMsSUFBTyxNQUNoQkEsU0FBUyxLQUFRIiwiZmlsZSI6InZlbmRvcnN+bWFpbi5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBSZWFjdF9fZGVmYXVsdCwgeyBjcmVhdGVFbGVtZW50LCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVGhlbWVDb250ZXh0IH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgd2Vha01lbW9pemUgZnJvbSAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09IG51bGwgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLiB0aGVtZT17KCkgPT4gKHt9KX0hJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKHRoZW1lID09IG51bGwgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBvdXRlclRoZW1lLCB7fSwgdGhlbWUpO1xufTtcblxudmFyIGNyZWF0ZUNhY2hlV2l0aFRoZW1lID0gd2Vha01lbW9pemUoZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgcmV0dXJuIHdlYWtNZW1vaXplKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH0pO1xufSk7XG5cbnZhciBUaGVtZVByb3ZpZGVyID0gZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICByZXR1cm4gY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIGlmIChwcm9wcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICAgIHRoZW1lID0gY3JlYXRlQ2FjaGVXaXRoVGhlbWUodGhlbWUpKHByb3BzLnRoZW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGVtZVxuICAgIH0sIHByb3BzLmNoaWxkcmVuKTtcbiAgfSk7XG59O1xuXG4vLyBzaG91bGQgd2UgY2hhbmdlIHRoaXMgdG8gYmUgZm9yd2FyZFJlZi93aXRoQ1NTQ29udGV4dCBzdHlsZSBzbyBpdCBkb2Vzbid0IG1lcmdlIHdpdGggcHJvcHM/XG5mdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFRoZW1lQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICByZWY6IHJlZlxuICAgICAgfSwgcHJvcHMpKTtcbiAgICB9KTtcbiAgfTsgLy8gJEZsb3dGaXhNZVxuXG5cbiAgdmFyIFdpdGhUaGVtZSA9IGZvcndhcmRSZWYocmVuZGVyKTtcbiAgV2l0aFRoZW1lLmRpc3BsYXlOYW1lID0gXCJXaXRoVGhlbWUoXCIgKyBjb21wb25lbnROYW1lICsgXCIpXCI7XG4gIHJldHVybiBob2lzdE5vblJlYWN0U3RhdGljcyhXaXRoVGhlbWUsIENvbXBvbmVudCk7XG59XG5cbmZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gUmVhY3RfX2RlZmF1bHQudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufVxuXG5leHBvcnQgeyBUaGVtZVByb3ZpZGVyLCB1c2VUaGVtZSwgd2l0aFRoZW1lIH07XG4iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEVkaXRvciBmcm9tICdyZWFjdC1zaW1wbGUtY29kZS1lZGl0b3InO1xuaW1wb3J0IEhpZ2hsaWdodCwgeyBQcmlzbSB9IGZyb20gJ3ByaXNtLXJlYWN0LXJlbmRlcmVyJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ2NyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCB7IHRyYW5zZm9ybSB9IGZyb20gJ2J1YmxlJztcbmltcG9ydCBhc3NpZ24gZnJvbSAnY29yZS1qcy9mbi9vYmplY3QvYXNzaWduJztcblxudmFyIHRoZW1lID0ge1xuICBwbGFpbjoge1xuICAgIGNvbG9yOiAnI0M1QzhDNicsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnIzFEMUYyMSdcbiAgfSxcbiAgc3R5bGVzOiBbe1xuICAgIHR5cGVzOiBbJ3Byb2xvZycsICdjb21tZW50JywgJ2RvY3R5cGUnLCAnY2RhdGEnXSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6ICdoc2woMzAsIDIwJSwgNTAlKSdcbiAgICB9XG4gIH0sIHtcbiAgICB0eXBlczogWydwcm9wZXJ0eScsICd0YWcnLCAnYm9vbGVhbicsICdudW1iZXInLCAnY29uc3RhbnQnLCAnc3ltYm9sJ10sXG4gICAgc3R5bGU6IHsgY29sb3I6ICdoc2woMzUwLCA0MCUsIDcwJSknIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbJ2F0dHItbmFtZScsICdzdHJpbmcnLCAnY2hhcicsICdidWlsdGluJywgJ2luc3RlcnRlZCddLFxuICAgIHN0eWxlOiB7XG4gICAgICBjb2xvcjogJ2hzbCg3NSwgNzAlLCA2MCUpJ1xuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbJ29wZXJhdG9yJywgJ2VudGl0eScsICd1cmwnLCAnc3RyaW5nJywgJ3ZhcmlhYmxlJywgJ2xhbmd1YWdlLWNzcyddLFxuICAgIHN0eWxlOiB7XG4gICAgICBjb2xvcjogJ2hzbCg0MCwgOTAlLCA2MCUpJ1xuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbJ2RlbGV0ZWQnXSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6ICdyZ2IoMjU1LCA4NSwgODUpJ1xuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbJ2l0YWxpYyddLFxuICAgIHN0eWxlOiB7XG4gICAgICBmb250U3R5bGU6ICdpdGFsaWMnXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFsnaW1wb3J0YW50JywgJ2JvbGQnXSxcbiAgICBzdHlsZToge1xuICAgICAgZm9udFdlaWdodDogJ2JvbGQnXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFsncmVnZXgnLCAnaW1wb3J0YW50J10sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiAnI2U5MCdcbiAgICB9XG4gIH0sIHtcbiAgICB0eXBlczogWydhdHJ1bGUnLCAnYXR0ci12YWx1ZScsICdrZXl3b3JkJ10sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiAnaHNsKDM1MCwgNDAlLCA3MCUpJ1xuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbJ3B1bmN0dWF0aW9uJywgJ3N5bWJvbCddLFxuICAgIHN0eWxlOiB7XG4gICAgICBvcGFjaXR5OiAnMC43J1xuICAgIH1cbiAgfV1cbn07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG5cblxuXG5cblxuXG5cblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG5cblxuXG5cblxuXG5cblxudmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xuICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO1xuICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxudmFyIENvZGVFZGl0b3IgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBpbmhlcml0cyhDb2RlRWRpdG9yLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDb2RlRWRpdG9yKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBDb2RlRWRpdG9yKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgY29kZTogJydcbiAgICB9LCBfdGhpcy51cGRhdGVDb250ZW50ID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgY29kZTogY29kZSB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNoYW5nZSkge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKF90aGlzLnN0YXRlLmNvZGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBfdGhpcy5oaWdobGlnaHRDb2RlID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBIaWdobGlnaHQsXG4gICAgICAgIHtcbiAgICAgICAgICBQcmlzbTogUHJpc20sXG4gICAgICAgICAgY29kZTogY29kZSxcbiAgICAgICAgICB0aGVtZTogX3RoaXMucHJvcHMudGhlbWUgfHwgdGhlbWUsXG4gICAgICAgICAgbGFuZ3VhZ2U6IF90aGlzLnByb3BzLmxhbmd1YWdlXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIHRva2VucyA9IF9yZWYudG9rZW5zLFxuICAgICAgICAgICAgICBnZXRMaW5lUHJvcHMgPSBfcmVmLmdldExpbmVQcm9wcyxcbiAgICAgICAgICAgICAgZ2V0VG9rZW5Qcm9wcyA9IF9yZWYuZ2V0VG9rZW5Qcm9wcztcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIEZyYWdtZW50LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRva2Vucy5tYXAoZnVuY3Rpb24gKGxpbmUsIGkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvanN4LWtleVxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgIGdldExpbmVQcm9wcyh7IGxpbmU6IGxpbmUsIGtleTogaSB9KSxcbiAgICAgICAgICAgICAgICAgIGxpbmUubWFwKGZ1bmN0aW9uICh0b2tlbiwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1rZXlcbiAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgZ2V0VG9rZW5Qcm9wcyh7IHRva2VuOiB0b2tlbiwga2V5OiBrZXkgfSkpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9LCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQ29kZUVkaXRvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgaWYgKHByb3BzLmNvZGUgIT09IHN0YXRlLnByZXZDb2RlUHJvcCkge1xuICAgICAgcmV0dXJuIHsgY29kZTogcHJvcHMuY29kZSwgcHJldkNvZGVQcm9wOiBwcm9wcy5jb2RlIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgQ29kZUVkaXRvci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgX2NvZGUgPSBfcHJvcHMuY29kZSxcbiAgICAgICAgb25DaGFuZ2UgPSBfcHJvcHMub25DaGFuZ2UsXG4gICAgICAgIGxhbmd1YWdlID0gX3Byb3BzLmxhbmd1YWdlLFxuICAgICAgICB0aGVtZSQkMSA9IF9wcm9wcy50aGVtZSxcbiAgICAgICAgcmVzdCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydzdHlsZScsICdjb2RlJywgJ29uQ2hhbmdlJywgJ2xhbmd1YWdlJywgJ3RoZW1lJ10pO1xuICAgIHZhciBjb2RlID0gdGhpcy5zdGF0ZS5jb2RlO1xuXG5cbiAgICB2YXIgYmFzZVRoZW1lID0gdGhlbWUkJDEgJiYgX3R5cGVvZih0aGVtZSQkMS5wbGFpbikgPT09ICdvYmplY3QnID8gdGhlbWUkJDEucGxhaW4gOiB7fTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRvciwgX2V4dGVuZHMoe1xuICAgICAgdmFsdWU6IGNvZGUsXG4gICAgICBwYWRkaW5nOiAxMCxcbiAgICAgIGhpZ2hsaWdodDogdGhpcy5oaWdobGlnaHRDb2RlLFxuICAgICAgb25WYWx1ZUNoYW5nZTogdGhpcy51cGRhdGVDb250ZW50LFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgd2hpdGVTcGFjZTogJ3ByZScsXG4gICAgICAgIGZvbnRGYW1pbHk6ICdtb25vc3BhY2UnXG4gICAgICB9LCBiYXNlVGhlbWUsIHN0eWxlKVxuICAgIH0sIHJlc3QpKTtcbiAgfTtcblxuICByZXR1cm4gQ29kZUVkaXRvcjtcbn0oQ29tcG9uZW50KTtcblxudmFyIExpdmVDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XG5cbnZhciBfcG9seSA9IHsgYXNzaWduOiBhc3NpZ24gfTtcblxudmFyIG9wdHMgPSB7XG4gIG9iamVjdEFzc2lnbjogJ19wb2x5LmFzc2lnbicsXG4gIHRyYW5zZm9ybXM6IHtcbiAgICBkYW5nZXJvdXNGb3JPZjogdHJ1ZSxcbiAgICBkYW5nZXJvdXNUYWdnZWRUZW1wbGF0ZVN0cmluZzogdHJ1ZVxuICB9XG59O1xuXG52YXIgdHJhbnNmb3JtJDEgPSAoZnVuY3Rpb24gKGNvZGUpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybShjb2RlLCBvcHRzKS5jb2RlO1xufSk7XG5cbnZhciBlcnJvckJvdW5kYXJ5ID0gZnVuY3Rpb24gZXJyb3JCb3VuZGFyeShFbGVtZW50LCBlcnJvckNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIGluaGVyaXRzKEVycm9yQm91bmRhcnksIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gRXJyb3JCb3VuZGFyeSgpIHtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEVycm9yQm91bmRhcnkpO1xuICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBFcnJvckJvdW5kYXJ5LnByb3RvdHlwZS5jb21wb25lbnREaWRDYXRjaCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZENhdGNoKGVycm9yKSB7XG4gICAgICBlcnJvckNhbGxiYWNrKGVycm9yKTtcbiAgICB9O1xuXG4gICAgRXJyb3JCb3VuZGFyeS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBFbGVtZW50ID09PSAnZnVuY3Rpb24nID8gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50LCBudWxsKSA6IEVsZW1lbnQ7XG4gICAgfTtcblxuICAgIHJldHVybiBFcnJvckJvdW5kYXJ5O1xuICB9KENvbXBvbmVudCk7XG59O1xuXG52YXIgZXZhbENvZGUgPSBmdW5jdGlvbiBldmFsQ29kZShjb2RlLCBzY29wZSkge1xuICB2YXIgc2NvcGVLZXlzID0gT2JqZWN0LmtleXMoc2NvcGUpO1xuICB2YXIgc2NvcGVWYWx1ZXMgPSBzY29wZUtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gc2NvcGVba2V5XTtcbiAgfSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICB2YXIgcmVzID0gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShGdW5jdGlvbiwgW251bGxdLmNvbmNhdChbJ19wb2x5JywgJ1JlYWN0J10sIHNjb3BlS2V5cywgW2NvZGVdKSkpKCk7XG4gIHJldHVybiByZXMuYXBwbHkodW5kZWZpbmVkLCBbX3BvbHksIFJlYWN0XS5jb25jYXQoc2NvcGVWYWx1ZXMpKTtcbn07XG5cbnZhciBnZW5lcmF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBnZW5lcmF0ZUVsZW1lbnQoX3JlZiwgZXJyb3JDYWxsYmFjaykge1xuICB2YXIgX3JlZiRjb2RlID0gX3JlZi5jb2RlLFxuICAgICAgY29kZSA9IF9yZWYkY29kZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNvZGUsXG4gICAgICBfcmVmJHNjb3BlID0gX3JlZi5zY29wZSxcbiAgICAgIHNjb3BlID0gX3JlZiRzY29wZSA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHNjb3BlO1xuXG4gIC8vIE5PVEU6IFJlbW92ZSB0cmFpbGluZyBzZW1pY29sb24gdG8gZ2V0IGFuIGFjdHVhbCBleHByZXNzaW9uLlxuICB2YXIgY29kZVRyaW1tZWQgPSBjb2RlLnRyaW0oKS5yZXBsYWNlKC87JC8sICcnKTtcblxuICAvLyBOT1RFOiBXb3JrYXJvdW5kIGZvciBjbGFzc2VzIGFuZCBhcnJvdyBmdW5jdGlvbnMuXG4gIHZhciB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybSQxKCdyZXR1cm4gKCcgKyBjb2RlVHJpbW1lZCArICcpJykudHJpbSgpO1xuICByZXR1cm4gZXJyb3JCb3VuZGFyeShldmFsQ29kZSh0cmFuc2Zvcm1lZCwgc2NvcGUpLCBlcnJvckNhbGxiYWNrKTtcbn07XG5cbnZhciByZW5kZXJFbGVtZW50QXN5bmMgPSBmdW5jdGlvbiByZW5kZXJFbGVtZW50QXN5bmMoX3JlZjIsIHJlc3VsdENhbGxiYWNrLCBlcnJvckNhbGxiYWNrXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbikge1xuICB2YXIgX3JlZjIkY29kZSA9IF9yZWYyLmNvZGUsXG4gICAgICBjb2RlID0gX3JlZjIkY29kZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmMiRjb2RlLFxuICAgICAgX3JlZjIkc2NvcGUgPSBfcmVmMi5zY29wZSxcbiAgICAgIHNjb3BlID0gX3JlZjIkc2NvcGUgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZjIkc2NvcGU7XG5cbiAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihlbGVtZW50KSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZXJyb3JDYWxsYmFjayhuZXcgU3ludGF4RXJyb3IoJ2ByZW5kZXJgIG11c3QgYmUgY2FsbGVkIHdpdGggdmFsaWQgSlNYLicpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0Q2FsbGJhY2soZXJyb3JCb3VuZGFyeShlbGVtZW50LCBlcnJvckNhbGxiYWNrKSk7XG4gICAgfVxuICB9O1xuXG4gIGlmICghL3JlbmRlclxccypcXCgvLnRlc3QoY29kZSkpIHtcbiAgICByZXR1cm4gZXJyb3JDYWxsYmFjayhuZXcgU3ludGF4RXJyb3IoJ05vLUlubGluZSBldmFsdWF0aW9ucyBtdXN0IGNhbGwgYHJlbmRlcmAuJykpO1xuICB9XG5cbiAgZXZhbENvZGUodHJhbnNmb3JtJDEoY29kZSksIF9leHRlbmRzKHt9LCBzY29wZSwgeyByZW5kZXI6IHJlbmRlciB9KSk7XG59O1xuXG52YXIgTGl2ZVByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgaW5oZXJpdHMoTGl2ZVByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaXZlUHJvdmlkZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIExpdmVQcm92aWRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5vbkNoYW5nZSA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBzY29wZSA9IF90aGlzJHByb3BzLnNjb3BlLFxuICAgICAgICAgIHRyYW5zZm9ybUNvZGUgPSBfdGhpcyRwcm9wcy50cmFuc2Zvcm1Db2RlLFxuICAgICAgICAgIG5vSW5saW5lID0gX3RoaXMkcHJvcHMubm9JbmxpbmU7XG5cbiAgICAgIF90aGlzLnRyYW5zcGlsZSh7IGNvZGU6IGNvZGUsIHNjb3BlOiBzY29wZSwgdHJhbnNmb3JtQ29kZTogdHJhbnNmb3JtQ29kZSwgbm9JbmxpbmU6IG5vSW5saW5lIH0pO1xuICAgIH0sIF90aGlzLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgZXJyb3I6IGVycm9yLnRvU3RyaW5nKCkgfSk7XG4gICAgfSwgX3RoaXMudHJhbnNwaWxlID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBjb2RlID0gX3JlZi5jb2RlLFxuICAgICAgICAgIHNjb3BlID0gX3JlZi5zY29wZSxcbiAgICAgICAgICB0cmFuc2Zvcm1Db2RlID0gX3JlZi50cmFuc2Zvcm1Db2RlLFxuICAgICAgICAgIF9yZWYkbm9JbmxpbmUgPSBfcmVmLm5vSW5saW5lLFxuICAgICAgICAgIG5vSW5saW5lID0gX3JlZiRub0lubGluZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmJG5vSW5saW5lO1xuXG4gICAgICAvLyBUcmFuc3BpbGF0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGlucHV0ID0ge1xuICAgICAgICBjb2RlOiB0cmFuc2Zvcm1Db2RlID8gdHJhbnNmb3JtQ29kZShjb2RlKSA6IGNvZGUsXG4gICAgICAgIHNjb3BlOiBzY29wZVxuICAgICAgfTtcblxuICAgICAgdmFyIGVycm9yQ2FsbGJhY2sgPSBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKGVycikge1xuICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoeyBlbGVtZW50OiB1bmRlZmluZWQsIGVycm9yOiBlcnIudG9TdHJpbmcoKSB9KTtcbiAgICAgIH07XG4gICAgICB2YXIgcmVuZGVyRWxlbWVudCA9IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoX2V4dGVuZHMoe30sIHN0YXRlLCB7IGVsZW1lbnQ6IGVsZW1lbnQgfSkpO1xuICAgICAgfTtcblxuICAgICAgLy8gU3RhdGUgcmVzZXQgb2JqZWN0XG4gICAgICB2YXIgc3RhdGUgPSB7IHVuc2FmZVdyYXBwZXJFcnJvcjogdW5kZWZpbmVkLCBlcnJvcjogdW5kZWZpbmVkIH07XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChub0lubGluZSkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKF9leHRlbmRzKHt9LCBzdGF0ZSwgeyBlbGVtZW50OiBudWxsIH0pKTsgLy8gUmVzZXQgb3V0cHV0IGZvciBhc3luYyAobm8gaW5saW5lKSBldmFsdWF0aW9uXG4gICAgICAgICAgcmVuZGVyRWxlbWVudEFzeW5jKGlucHV0LCByZW5kZXJFbGVtZW50LCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW5kZXJFbGVtZW50KGdlbmVyYXRlRWxlbWVudChpbnB1dCwgZXJyb3JDYWxsYmFjaykpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZShfZXh0ZW5kcyh7fSwgc3RhdGUsIHsgZXJyb3I6IGVycm9yLnRvU3RyaW5nKCkgfSkpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gIExpdmVQcm92aWRlci5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNvZGUgPSBfcHJvcHMuY29kZSxcbiAgICAgICAgc2NvcGUgPSBfcHJvcHMuc2NvcGUsXG4gICAgICAgIHRyYW5zZm9ybUNvZGUgPSBfcHJvcHMudHJhbnNmb3JtQ29kZSxcbiAgICAgICAgbm9JbmxpbmUgPSBfcHJvcHMubm9JbmxpbmU7XG5cblxuICAgIHRoaXMudHJhbnNwaWxlKHsgY29kZTogY29kZSwgc2NvcGU6IHNjb3BlLCB0cmFuc2Zvcm1Db2RlOiB0cmFuc2Zvcm1Db2RlLCBub0lubGluZTogbm9JbmxpbmUgfSk7XG4gIH07XG5cbiAgTGl2ZVByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoX3JlZjIpIHtcbiAgICB2YXIgcHJldkNvZGUgPSBfcmVmMi5jb2RlLFxuICAgICAgICBwcmV2U2NvcGUgPSBfcmVmMi5zY29wZSxcbiAgICAgICAgcHJldk5vSW5saW5lID0gX3JlZjIubm9JbmxpbmUsXG4gICAgICAgIHByZXZUcmFuc2Zvcm1Db2RlID0gX3JlZjIudHJhbnNmb3JtQ29kZTtcbiAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNvZGUgPSBfcHJvcHMyLmNvZGUsXG4gICAgICAgIHNjb3BlID0gX3Byb3BzMi5zY29wZSxcbiAgICAgICAgbm9JbmxpbmUgPSBfcHJvcHMyLm5vSW5saW5lLFxuICAgICAgICB0cmFuc2Zvcm1Db2RlID0gX3Byb3BzMi50cmFuc2Zvcm1Db2RlO1xuXG4gICAgaWYgKGNvZGUgIT09IHByZXZDb2RlIHx8IHNjb3BlICE9PSBwcmV2U2NvcGUgfHwgbm9JbmxpbmUgIT09IHByZXZOb0lubGluZSB8fCB0cmFuc2Zvcm1Db2RlICE9PSBwcmV2VHJhbnNmb3JtQ29kZSkge1xuICAgICAgdGhpcy50cmFuc3BpbGUoeyBjb2RlOiBjb2RlLCBzY29wZTogc2NvcGUsIHRyYW5zZm9ybUNvZGU6IHRyYW5zZm9ybUNvZGUsIG5vSW5saW5lOiBub0lubGluZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgTGl2ZVByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczMuY2hpbGRyZW4sXG4gICAgICAgIGNvZGUgPSBfcHJvcHMzLmNvZGUsXG4gICAgICAgIGxhbmd1YWdlID0gX3Byb3BzMy5sYW5ndWFnZSxcbiAgICAgICAgdGhlbWUgPSBfcHJvcHMzLnRoZW1lLFxuICAgICAgICBkaXNhYmxlZCA9IF9wcm9wczMuZGlzYWJsZWQ7XG5cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgTGl2ZUNvbnRleHQuUHJvdmlkZXIsXG4gICAgICB7XG4gICAgICAgIHZhbHVlOiBfZXh0ZW5kcyh7fSwgdGhpcy5zdGF0ZSwge1xuICAgICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgICAgbGFuZ3VhZ2U6IGxhbmd1YWdlLFxuICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgb25FcnJvcjogdGhpcy5vbkVycm9yLFxuICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBMaXZlUHJvdmlkZXI7XG59KENvbXBvbmVudCk7XG5cbkxpdmVQcm92aWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvZGU6ICcnLFxuICBub0lubGluZTogZmFsc2UsXG4gIGxhbmd1YWdlOiAnanN4JyxcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBMaXZlRWRpdG9yKHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIExpdmVDb250ZXh0LkNvbnN1bWVyLFxuICAgIG51bGwsXG4gICAgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBjb2RlID0gX3JlZi5jb2RlLFxuICAgICAgICAgIGxhbmd1YWdlID0gX3JlZi5sYW5ndWFnZSxcbiAgICAgICAgICB0aGVtZSA9IF9yZWYudGhlbWUsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfcmVmLmRpc2FibGVkLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvZGVFZGl0b3IsIF9leHRlbmRzKHtcbiAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICBjb2RlOiBjb2RlLFxuICAgICAgICBsYW5ndWFnZTogbGFuZ3VhZ2UsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gICAgICB9LCBwcm9wcykpO1xuICAgIH1cbiAgKTtcbn1cblxuZnVuY3Rpb24gTGl2ZUVycm9yKHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIExpdmVDb250ZXh0LkNvbnN1bWVyLFxuICAgIG51bGwsXG4gICAgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBlcnJvciA9IF9yZWYuZXJyb3I7XG4gICAgICByZXR1cm4gZXJyb3IgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAncHJlJyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIGVycm9yXG4gICAgICApIDogbnVsbDtcbiAgICB9XG4gICk7XG59XG5cbmZ1bmN0aW9uIExpdmVQcmV2aWV3KF9yZWYpIHtcbiAgdmFyIENvbXBvbmVudCQkMSA9IF9yZWYuQ29tcG9uZW50LFxuICAgICAgcmVzdCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnQ29tcG9uZW50J10pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIENvbXBvbmVudCQkMSxcbiAgICByZXN0LFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBMaXZlQ29udGV4dC5Db25zdW1lcixcbiAgICAgIG51bGwsXG4gICAgICBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgdmFyIEVsZW1lbnQgPSBfcmVmMi5lbGVtZW50O1xuICAgICAgICByZXR1cm4gRWxlbWVudCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnQsIG51bGwpO1xuICAgICAgfVxuICAgIClcbiAgKTtcbn1cblxuTGl2ZVByZXZpZXcuZGVmYXVsdFByb3BzID0ge1xuICBDb21wb25lbnQ6ICdkaXYnXG59O1xuXG5mdW5jdGlvbiB3aXRoTGl2ZShXcmFwcGVkQ29tcG9uZW50KSB7XG4gIHZhciBXaXRoTGl2ZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoV2l0aExpdmUsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gV2l0aExpdmUoKSB7XG4gICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBXaXRoTGl2ZSk7XG4gICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIFdpdGhMaXZlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIExpdmVDb250ZXh0LkNvbnN1bWVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBmdW5jdGlvbiAobGl2ZSkge1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHsgbGl2ZTogbGl2ZSB9LCBfdGhpczIucHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFdpdGhMaXZlO1xuICB9KENvbXBvbmVudCk7XG5cbiAgcmV0dXJuIFdpdGhMaXZlO1xufVxuXG5leHBvcnQgeyBDb2RlRWRpdG9yIGFzIEVkaXRvciwgTGl2ZVByb3ZpZGVyLCBMaXZlRWRpdG9yLCBMaXZlRXJyb3IsIExpdmVQcmV2aWV3LCBMaXZlQ29udGV4dCwgd2l0aExpdmUsIGdlbmVyYXRlRWxlbWVudCwgcmVuZGVyRWxlbWVudEFzeW5jIH07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pO1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24ob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xufTtcblxudmFyIE1EWENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG52YXIgd2l0aE1EWENvbXBvbmVudHMgPSBmdW5jdGlvbiB3aXRoTURYQ29tcG9uZW50cyhDb21wb25lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wcy5jb21wb25lbnRzKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNvbXBvbmVudHM6IGFsbENvbXBvbmVudHNcbiAgICB9KSk7XG4gIH07XG59O1xudmFyIHVzZU1EWENvbXBvbmVudHMgPSBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgdmFyIGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KTtcbiAgdmFyIGFsbENvbXBvbmVudHMgPSBjb250ZXh0Q29tcG9uZW50cztcblxuICBpZiAoY29tcG9uZW50cykge1xuICAgIGFsbENvbXBvbmVudHMgPSBpc0Z1bmN0aW9uKGNvbXBvbmVudHMpID8gY29tcG9uZW50cyhjb250ZXh0Q29tcG9uZW50cykgOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgY29udGV4dENvbXBvbmVudHMpLCBjb21wb25lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBhbGxDb21wb25lbnRzO1xufTtcbnZhciBNRFhQcm92aWRlciA9IGZ1bmN0aW9uIE1EWFByb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wcy5jb21wb25lbnRzKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1EWENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogYWxsQ29tcG9uZW50c1xuICB9LCBwcm9wcy5jaGlsZHJlbik7XG59O1xuXG52YXIgVFlQRV9QUk9QX05BTUUgPSAnbWR4VHlwZSc7XG52YXIgREVGQVVMVFMgPSB7XG4gIGlubGluZUNvZGU6ICdjb2RlJyxcbiAgd3JhcHBlcjogZnVuY3Rpb24gd3JhcHBlcihfcmVmKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIHt9LCBjaGlsZHJlbik7XG4gIH1cbn07XG52YXIgTURYQ3JlYXRlRWxlbWVudCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBwcm9wQ29tcG9uZW50cyA9IHByb3BzLmNvbXBvbmVudHMsXG4gICAgICBtZHhUeXBlID0gcHJvcHMubWR4VHlwZSxcbiAgICAgIG9yaWdpbmFsVHlwZSA9IHByb3BzLm9yaWdpbmFsVHlwZSxcbiAgICAgIHBhcmVudE5hbWUgPSBwcm9wcy5wYXJlbnROYW1lLFxuICAgICAgZXRjID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjb21wb25lbnRzXCIsIFwibWR4VHlwZVwiLCBcIm9yaWdpbmFsVHlwZVwiLCBcInBhcmVudE5hbWVcIl0pO1xuXG4gIHZhciBjb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wQ29tcG9uZW50cyk7XG4gIHZhciB0eXBlID0gbWR4VHlwZTtcbiAgdmFyIENvbXBvbmVudCA9IGNvbXBvbmVudHNbXCJcIi5jb25jYXQocGFyZW50TmFtZSwgXCIuXCIpLmNvbmNhdCh0eXBlKV0gfHwgY29tcG9uZW50c1t0eXBlXSB8fCBERUZBVUxUU1t0eXBlXSB8fCBvcmlnaW5hbFR5cGU7XG5cbiAgaWYgKHByb3BDb21wb25lbnRzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe1xuICAgICAgcmVmOiByZWZcbiAgICB9LCBldGMpLCB7fSwge1xuICAgICAgY29tcG9uZW50czogcHJvcENvbXBvbmVudHNcbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfb2JqZWN0U3ByZWFkMih7XG4gICAgcmVmOiByZWZcbiAgfSwgZXRjKSk7XG59KTtcbk1EWENyZWF0ZUVsZW1lbnQuZGlzcGxheU5hbWUgPSAnTURYQ3JlYXRlRWxlbWVudCc7XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50ICh0eXBlLCBwcm9wcykge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIG1keFR5cGUgPSBwcm9wcyAmJiBwcm9wcy5tZHhUeXBlO1xuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgbWR4VHlwZSkge1xuICAgIHZhciBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgdmFyIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSA9IG5ldyBBcnJheShhcmdzTGVuZ3RoKTtcbiAgICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbMF0gPSBNRFhDcmVhdGVFbGVtZW50O1xuICAgIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywga2V5KSkge1xuICAgICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBuZXdQcm9wcy5vcmlnaW5hbFR5cGUgPSB0eXBlO1xuICAgIG5ld1Byb3BzW1RZUEVfUFJPUF9OQU1FXSA9IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHR5cGUgOiBtZHhUeXBlO1xuICAgIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVsxXSA9IG5ld1Byb3BzO1xuXG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVtpXSA9IGFyZ3NbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkobnVsbCwgY3JlYXRlRWxlbWVudEFyZ0FycmF5KTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KG51bGwsIGFyZ3MpO1xufVxuXG5leHBvcnQgeyBNRFhDb250ZXh0LCBNRFhQcm92aWRlciwgY3JlYXRlRWxlbWVudCBhcyBtZHgsIHVzZU1EWENvbXBvbmVudHMsIHdpdGhNRFhDb21wb25lbnRzIH07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjExJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5cbmZ1bmN0aW9uIGluc2VydFdpdGhvdXRTY29waW5nKGNhY2hlLCBzZXJpYWxpemVkKSB7XG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY2FjaGUuaW5zZXJ0KCcnLCBzZXJpYWxpemVkLCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2UocmVnaXN0ZXJlZCwgY3NzLCBjbGFzc05hbWUpIHtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbXTtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lKTtcblxuICBpZiAocmVnaXN0ZXJlZFN0eWxlcy5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIHJldHVybiByYXdDbGFzc05hbWUgKyBjc3MocmVnaXN0ZXJlZFN0eWxlcyk7XG59XG5cbnZhciBjcmVhdGVFbW90aW9uID0gZnVuY3Rpb24gY3JlYXRlRW1vdGlvbihvcHRpb25zKSB7XG4gIHZhciBjYWNoZSA9IGNyZWF0ZUNhY2hlKG9wdGlvbnMpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgY2FjaGUuc2hlZXQuc3BlZWR5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdGhpcy5jdHIgIT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3BlZWR5IG11c3QgYmUgY2hhbmdlZCBiZWZvcmUgYW55IHJ1bGVzIGFyZSBpbnNlcnRlZCcpO1xuICAgIH1cblxuICAgIHRoaXMuaXNTcGVlZHkgPSB2YWx1ZTtcbiAgfTtcblxuICBjYWNoZS5jb21wYXQgPSB0cnVlO1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNhY2hlLnJlZ2lzdGVyZWQsIHVuZGVmaW5lZCk7XG4gICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgcmV0dXJuIGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB9O1xuXG4gIHZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoYXJncywgY2FjaGUucmVnaXN0ZXJlZCk7XG4gICAgdmFyIGFuaW1hdGlvbiA9IFwiYW5pbWF0aW9uLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICAgIGluc2VydFdpdGhvdXRTY29waW5nKGNhY2hlLCB7XG4gICAgICBuYW1lOiBzZXJpYWxpemVkLm5hbWUsXG4gICAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIGFuaW1hdGlvbiArIFwie1wiICsgc2VyaWFsaXplZC5zdHlsZXMgKyBcIn1cIlxuICAgIH0pO1xuICAgIHJldHVybiBhbmltYXRpb247XG4gIH07XG5cbiAgdmFyIGluamVjdEdsb2JhbCA9IGZ1bmN0aW9uIGluamVjdEdsb2JhbCgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkKTtcbiAgICBpbnNlcnRXaXRob3V0U2NvcGluZyhjYWNoZSwgc2VyaWFsaXplZCk7XG4gIH07XG5cbiAgdmFyIGN4ID0gZnVuY3Rpb24gY3goKSB7XG4gICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlKGNhY2hlLnJlZ2lzdGVyZWQsIGNzcywgY2xhc3NuYW1lcyhhcmdzKSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjc3M6IGNzcyxcbiAgICBjeDogY3gsXG4gICAgaW5qZWN0R2xvYmFsOiBpbmplY3RHbG9iYWwsXG4gICAga2V5ZnJhbWVzOiBrZXlmcmFtZXMsXG4gICAgaHlkcmF0ZTogZnVuY3Rpb24gaHlkcmF0ZShpZHMpIHtcbiAgICAgIGlkcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRba2V5XSA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZsdXNoOiBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgIGNhY2hlLnJlZ2lzdGVyZWQgPSB7fTtcbiAgICAgIGNhY2hlLmluc2VydGVkID0ge307XG4gICAgICBjYWNoZS5zaGVldC5mbHVzaCgpO1xuICAgIH0sXG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHNoZWV0OiBjYWNoZS5zaGVldCxcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgZ2V0UmVnaXN0ZXJlZFN0eWxlczogZ2V0UmVnaXN0ZXJlZFN0eWxlcy5iaW5kKG51bGwsIGNhY2hlLnJlZ2lzdGVyZWQpLFxuICAgIG1lcmdlOiBtZXJnZS5iaW5kKG51bGwsIGNhY2hlLnJlZ2lzdGVyZWQsIGNzcylcbiAgfTtcbn07XG5cbnZhciBjbGFzc25hbWVzID0gZnVuY3Rpb24gY2xhc3NuYW1lcyhhcmdzKSB7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVtb3Rpb247XG4iLCJpbXBvcnQgY3JlYXRlRW1vdGlvbiBmcm9tICdjcmVhdGUtZW1vdGlvbic7XG5cbnZhciBfY3JlYXRlRW1vdGlvbiA9IGNyZWF0ZUVtb3Rpb24oKSxcbiAgICBmbHVzaCA9IF9jcmVhdGVFbW90aW9uLmZsdXNoLFxuICAgIGh5ZHJhdGUgPSBfY3JlYXRlRW1vdGlvbi5oeWRyYXRlLFxuICAgIGN4ID0gX2NyZWF0ZUVtb3Rpb24uY3gsXG4gICAgbWVyZ2UgPSBfY3JlYXRlRW1vdGlvbi5tZXJnZSxcbiAgICBnZXRSZWdpc3RlcmVkU3R5bGVzID0gX2NyZWF0ZUVtb3Rpb24uZ2V0UmVnaXN0ZXJlZFN0eWxlcyxcbiAgICBpbmplY3RHbG9iYWwgPSBfY3JlYXRlRW1vdGlvbi5pbmplY3RHbG9iYWwsXG4gICAga2V5ZnJhbWVzID0gX2NyZWF0ZUVtb3Rpb24ua2V5ZnJhbWVzLFxuICAgIGNzcyA9IF9jcmVhdGVFbW90aW9uLmNzcyxcbiAgICBzaGVldCA9IF9jcmVhdGVFbW90aW9uLnNoZWV0LFxuICAgIGNhY2hlID0gX2NyZWF0ZUVtb3Rpb24uY2FjaGU7XG5cbmV4cG9ydCB7IGNhY2hlLCBjc3MsIGN4LCBmbHVzaCwgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaHlkcmF0ZSwgaW5qZWN0R2xvYmFsLCBrZXlmcmFtZXMsIG1lcmdlLCBzaGVldCB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKSwgY29udGV4dC5sb2NhdGlvbik7XG4gICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYXZpZ2F0ZTogZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKTtcbiAgdmFyIHJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuYW55XG4gIH0pXSk7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbiAgTGluay5wcm9wVHlwZXMgPSB7XG4gICAgaW5uZXJSZWY6IHJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgZm9yd2FyZFJlZlNoaW0kMSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiQxID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmJDEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiQxID0gZm9yd2FyZFJlZlNoaW0kMTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc25hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkuam9pbihcIiBcIik7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxudmFyIE5hdkxpbmsgPSBmb3J3YXJkUmVmJDEoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZiRhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYkYXJpYUN1cnJlbnQgPT09IHZvaWQgMCA/IFwicGFnZVwiIDogX3JlZiRhcmlhQ3VycmVudCxcbiAgICAgIF9yZWYkYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9PT0gdm9pZCAwID8gXCJhY3RpdmVcIiA6IF9yZWYkYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgaXNBY3RpdmVQcm9wID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGxvY2F0aW9uUHJvcCA9IF9yZWYubG9jYXRpb24sXG4gICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInNlbnNpdGl2ZVwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwge30sIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b0xvY2F0aW9uXG4gICAgfSwgcmVzdCk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0kMSAhPT0gZm9yd2FyZFJlZiQxKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLWRvbS5qcy5tYXBcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgdmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG4gIHJldHVybiBjb21tb25qc0dsb2JhbFtrZXldID0gKGNvbW1vbmpzR2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufVxuXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyBnZXRVbmlxdWVJZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0c0xvb3NlKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGhpczI7XG5cbiAgICAgIF90aGlzMiA9IF9Db21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxudmFyIGluZGV4ID0gUmVhY3QuY3JlYXRlQ29udGV4dCB8fCBjcmVhdGVSZWFjdENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiLyoqXG4gKlxuICogQG5hbWVzcGFjZSBmYWtlci5pbWFnZVxuICogQHByb3BlcnR5IHtvYmplY3R9IGxvcmVtcGl4ZWwgLSBmYWtlci5pbWFnZS5sb3JlbXBpeGVsXG4gKiBAcHJvcGVydHkge29iamVjdH0gdW5zcGxhc2ggLSBmYWtlci5pbWFnZS51bnNwbGFzaFxuICogQHByb3BlcnR5IHtvYmplY3R9IHVuc3BsYXNoIC0gZmFrZXIuaW1hZ2UubG9yZW1waWNzdW1cbiAqIEBkZWZhdWx0IERlZmF1bHQgcHJvdmlkZXIgaXMgdW5zcGxhc2ggaW1hZ2UgcHJvdmlkZXJcbiAqL1xudmFyIEltYWdlID0gZnVuY3Rpb24gKGZha2VyKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgTG9yZW1waXhlbCA9IHJlcXVpcmUoJy4vaW1hZ2VfcHJvdmlkZXJzL2xvcmVtcGl4ZWwnKTtcbiAgdmFyIFVuc3BsYXNoID0gcmVxdWlyZSgnLi9pbWFnZV9wcm92aWRlcnMvdW5zcGxhc2gnKTtcbiAgdmFyIExvcmVtUGljc3VtID0gcmVxdWlyZSgnLi9pbWFnZV9wcm92aWRlcnMvbG9yZW1waWNzdW0nKTtcblxuICAvKipcbiAgICogaW1hZ2VcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5pbWFnZVxuICAgKi9cbiAgc2VsZi5pbWFnZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByYW5kb21pemUpIHtcbiAgICB2YXIgY2F0ZWdvcmllcyA9IFtcImFic3RyYWN0XCIsIFwiYW5pbWFsc1wiLCBcImJ1c2luZXNzXCIsIFwiY2F0c1wiLCBcImNpdHlcIiwgXCJmb29kXCIsIFwibmlnaHRsaWZlXCIsIFwiZmFzaGlvblwiLCBcInBlb3BsZVwiLCBcIm5hdHVyZVwiLCBcInNwb3J0c1wiLCBcInRlY2huaWNzXCIsIFwidHJhbnNwb3J0XCJdO1xuICAgIHJldHVybiBzZWxmW2Zha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoY2F0ZWdvcmllcyldKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBhdmF0YXJcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5hdmF0YXJcbiAgICovXG4gIHNlbGYuYXZhdGFyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWtlci5pbnRlcm5ldC5hdmF0YXIoKTtcbiAgfTtcbiAgLyoqXG4gICAqIGltYWdlVXJsXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYXRlZ29yeVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhbmRvbWl6ZVxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLmltYWdlVXJsXG4gICAqL1xuICBzZWxmLmltYWdlVXJsID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIGNhdGVnb3J5LCByYW5kb21pemUsIGh0dHBzKSB7XG4gICAgICB2YXIgd2lkdGggPSB3aWR0aCB8fCA2NDA7XG4gICAgICB2YXIgaGVpZ2h0ID0gaGVpZ2h0IHx8IDQ4MDtcbiAgICAgIHZhciBwcm90b2NvbCA9ICdodHRwOi8vJztcbiAgICAgIGlmICh0eXBlb2YgaHR0cHMgIT09ICd1bmRlZmluZWQnICYmIGh0dHBzID09PSB0cnVlKSB7XG4gICAgICAgIHByb3RvY29sID0gJ2h0dHBzOi8vJztcbiAgICAgIH1cbiAgICAgIHZhciB1cmwgPSBwcm90b2NvbCArICdwbGFjZWltZy5jb20vJyArIHdpZHRoICsgJy8nICsgaGVpZ2h0O1xuICAgICAgaWYgKHR5cGVvZiBjYXRlZ29yeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXJsICs9ICcvJyArIGNhdGVnb3J5O1xuICAgICAgfVxuXG4gICAgICBpZiAocmFuZG9taXplKSB7XG4gICAgICAgIHVybCArPSAnPycgKyBmYWtlci5yYW5kb20ubnVtYmVyKClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVybDtcbiAgfTtcbiAgLyoqXG4gICAqIGFic3RyYWN0XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UuYWJzdHJhY3RcbiAgICovXG4gIHNlbGYuYWJzdHJhY3QgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdhYnN0cmFjdCcsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBhbmltYWxzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UuYW5pbWFsc1xuICAgKi9cbiAgc2VsZi5hbmltYWxzID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAnYW5pbWFscycsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBidXNpbmVzc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhbmRvbWl6ZVxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLmJ1c2luZXNzXG4gICAqL1xuICBzZWxmLmJ1c2luZXNzID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAnYnVzaW5lc3MnLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogY2F0c1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhbmRvbWl6ZVxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLmNhdHNcbiAgICovXG4gIHNlbGYuY2F0cyA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByYW5kb21pemUpIHtcbiAgICByZXR1cm4gZmFrZXIuaW1hZ2UuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ2NhdHMnLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogY2l0eVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhbmRvbWl6ZVxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLmNpdHlcbiAgICovXG4gIHNlbGYuY2l0eSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByYW5kb21pemUpIHtcbiAgICByZXR1cm4gZmFrZXIuaW1hZ2UuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ2NpdHknLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogZm9vZFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhbmRvbWl6ZVxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLmZvb2RcbiAgICovXG4gIHNlbGYuZm9vZCA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByYW5kb21pemUpIHtcbiAgICByZXR1cm4gZmFrZXIuaW1hZ2UuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ2Zvb2QnLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogbmlnaHRsaWZlXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UubmlnaHRsaWZlXG4gICAqL1xuICBzZWxmLm5pZ2h0bGlmZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByYW5kb21pemUpIHtcbiAgICByZXR1cm4gZmFrZXIuaW1hZ2UuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ25pZ2h0bGlmZScsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBmYXNoaW9uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UuZmFzaGlvblxuICAgKi9cbiAgc2VsZi5mYXNoaW9uID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAnZmFzaGlvbicsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBwZW9wbGVcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5wZW9wbGVcbiAgICovXG4gIHNlbGYucGVvcGxlID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAncGVvcGxlJywgcmFuZG9taXplKTtcbiAgfTtcbiAgLyoqXG4gICAqIG5hdHVyZVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhbmRvbWl6ZVxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLm5hdHVyZVxuICAgKi9cbiAgc2VsZi5uYXR1cmUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICduYXR1cmUnLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogc3BvcnRzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2Uuc3BvcnRzXG4gICAqL1xuICBzZWxmLnNwb3J0cyA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByYW5kb21pemUpIHtcbiAgICByZXR1cm4gZmFrZXIuaW1hZ2UuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ3Nwb3J0cycsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiB0ZWNobmljc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhbmRvbWl6ZVxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLnRlY2huaWNzXG4gICAqL1xuICBzZWxmLnRlY2huaWNzID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAndGVjaG5pY3MnLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogdHJhbnNwb3J0XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UudHJhbnNwb3J0XG4gICAqL1xuICBzZWxmLnRyYW5zcG9ydCA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByYW5kb21pemUpIHtcbiAgICByZXR1cm4gZmFrZXIuaW1hZ2UuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ3RyYW5zcG9ydCcsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBkYXRhVXJpXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvclxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLmRhdGFVcmlcbiAgICovXG4gIHNlbGYuZGF0YVVyaSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCBjb2xvcikge1xuICAgIGNvbG9yID0gY29sb3IgfHwgJ2dyZXknO1xuICAgIHZhciBzdmdTdHJpbmcgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmVyc2lvbj1cIjEuMVwiIGJhc2VQcm9maWxlPVwiZnVsbFwiIHdpZHRoPVwiJyArIHdpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBoZWlnaHQgKyAnXCI+PHJlY3Qgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIGZpbGw9XCInICsgY29sb3IgKyAnXCIvPjx0ZXh0IHg9XCInICsgd2lkdGggLyAyICsgJ1wiIHk9XCInICsgaGVpZ2h0IC8gMiArICdcIiBmb250LXNpemU9XCIyMFwiIGFsaWdubWVudC1iYXNlbGluZT1cIm1pZGRsZVwiIHRleHQtYW5jaG9yPVwibWlkZGxlXCIgZmlsbD1cIndoaXRlXCI+JyArIHdpZHRoICsgJ3gnICsgaGVpZ2h0ICsgJzwvdGV4dD48L3N2Zz4nO1xuICAgIHZhciByYXdQcmVmaXggPSAnZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9VVRGLTgsJztcbiAgICByZXR1cm4gcmF3UHJlZml4ICsgZW5jb2RlVVJJQ29tcG9uZW50KHN2Z1N0cmluZyk7XG4gIH07XG5cbiAgc2VsZi5sb3JlbXBpeGVsID0gbmV3IExvcmVtcGl4ZWwoZmFrZXIpO1xuICBzZWxmLnVuc3BsYXNoID0gbmV3IFVuc3BsYXNoKGZha2VyKTtcbiAgc2VsZi5sb3JlbXBpY3N1bSA9IG5ldyBMb3JlbVBpY3N1bShmYWtlcik7XG5cbiAgLy8gT2JqZWN0LmFzc2lnbihzZWxmLCBzZWxmLnVuc3BsYXNoKTtcbiAgLy8gSG93IHRvIHNldCBkZWZhdWx0IGFzIHVuc3BsYXNoPyBzaG91bGQgYmUgaW1hZ2UuZGVmYXVsdD9cbn1cblxuXG5tb2R1bGVbXCJleHBvcnRzXCJdID0gSW1hZ2U7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzTG9vc2U7IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuLyogZ2xvYmFsIGdsb2JhbCAqL1xuXG52YXIgS0VZQ09ERV9FTlRFUiA9IDEzO1xudmFyIEtFWUNPREVfVEFCID0gOTtcbnZhciBLRVlDT0RFX0JBQ0tTUEFDRSA9IDg7XG52YXIgS0VZQ09ERV9ZID0gODk7XG52YXIgS0VZQ09ERV9aID0gOTA7XG52YXIgS0VZQ09ERV9NID0gNzc7XG52YXIgS0VZQ09ERV9QQVJFTlMgPSA1NztcbnZhciBLRVlDT0RFX0JSQUNLRVRTID0gMjE5O1xudmFyIEtFWUNPREVfUVVPVEUgPSAyMjI7XG52YXIgS0VZQ09ERV9CQUNLX1FVT1RFID0gMTkyO1xudmFyIEtFWUNPREVfRVNDQVBFID0gMjc7XG5cbnZhciBISVNUT1JZX0xJTUlUID0gMTAwO1xudmFyIEhJU1RPUllfVElNRV9HQVAgPSAzMDAwO1xuXG52YXIgaXNXaW5kb3dzID0gJ25hdmlnYXRvcicgaW4gZ2xvYmFsICYmIC9XaW4vaS50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSk7XG52YXIgaXNNYWNMaWtlID0gJ25hdmlnYXRvcicgaW4gZ2xvYmFsICYmIC8oTWFjfGlQaG9uZXxpUG9kfGlQYWQpL2kudGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pO1xuXG52YXIgY2xhc3NOYW1lID0gJ25wbV9fcmVhY3Qtc2ltcGxlLWNvZGUtZWRpdG9yX190ZXh0YXJlYSc7XG5cbnZhciBjc3NUZXh0ID0gLyogQ1NTICovJ1xcbi8qKlxcbiAqIFJlc2V0IHRoZSB0ZXh0IGZpbGwgY29sb3Igc28gdGhhdCBwbGFjZWhvbGRlciBpcyB2aXNpYmxlXFxuICovXFxuLicgKyBjbGFzc05hbWUgKyAnOmVtcHR5IHtcXG4gIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiBpbmhlcml0ICFpbXBvcnRhbnQ7XFxufVxcblxcbi8qKlxcbiAqIEhhY2sgdG8gYXBwbHkgb24gc29tZSBDU1Mgb24gSUUxMCBhbmQgSUUxMVxcbiAqL1xcbkBtZWRpYSBhbGwgYW5kICgtbXMtaGlnaC1jb250cmFzdDogbm9uZSksICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKSB7XFxuICAvKipcXG4gICAgKiBJRSBkb2VzblxcJ3Qgc3VwcG9ydCBcXCctd2Via2l0LXRleHQtZmlsbC1jb2xvclxcJ1xcbiAgICAqIFNvIHdlIHVzZSBcXCdjb2xvcjogdHJhbnNwYXJlbnRcXCcgdG8gbWFrZSB0aGUgdGV4dCB0cmFuc3BhcmVudCBvbiBJRVxcbiAgICAqIFVubGlrZSBvdGhlciBicm93c2VycywgaXQgZG9lc25cXCd0IGFmZmVjdCBjYXJldCBjb2xvciBpbiBJRVxcbiAgICAqL1xcbiAgLicgKyBjbGFzc05hbWUgKyAnIHtcXG4gICAgY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XFxuICB9XFxuXFxuICAuJyArIGNsYXNzTmFtZSArICc6OnNlbGVjdGlvbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNhY2NlZjcgIWltcG9ydGFudDtcXG4gICAgY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbic7XG5cbnZhciBFZGl0b3IgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRWRpdG9yLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBFZGl0b3IoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVkaXRvcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gRWRpdG9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRWRpdG9yKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSwgX3RoaXMuX3JlY29yZEN1cnJlbnRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbnB1dCA9IF90aGlzLl9pbnB1dDtcblxuICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuO1xuXG4gICAgICAvLyBTYXZlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGlucHV0XG4gICAgICB2YXIgdmFsdWUgPSBpbnB1dC52YWx1ZSxcbiAgICAgICAgICBzZWxlY3Rpb25TdGFydCA9IGlucHV0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgIHNlbGVjdGlvbkVuZCA9IGlucHV0LnNlbGVjdGlvbkVuZDtcblxuXG4gICAgICBfdGhpcy5fcmVjb3JkQ2hhbmdlKHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBzZWxlY3Rpb25TdGFydDogc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgIHNlbGVjdGlvbkVuZDogc2VsZWN0aW9uRW5kXG4gICAgICB9KTtcbiAgICB9LCBfdGhpcy5fZ2V0TGluZXMgPSBmdW5jdGlvbiAodGV4dCwgcG9zaXRpb24pIHtcbiAgICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZygwLCBwb3NpdGlvbikuc3BsaXQoJ1xcbicpO1xuICAgIH0sIF90aGlzLl9yZWNvcmRDaGFuZ2UgPSBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICB2YXIgb3ZlcndyaXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgIHZhciBfdGhpcyRfaGlzdG9yeSA9IF90aGlzLl9oaXN0b3J5LFxuICAgICAgICAgIHN0YWNrID0gX3RoaXMkX2hpc3Rvcnkuc3RhY2ssXG4gICAgICAgICAgb2Zmc2V0ID0gX3RoaXMkX2hpc3Rvcnkub2Zmc2V0O1xuXG5cbiAgICAgIGlmIChzdGFjay5sZW5ndGggJiYgb2Zmc2V0ID4gLTEpIHtcbiAgICAgICAgLy8gV2hlbiBzb21ldGhpbmcgdXBkYXRlcywgZHJvcCB0aGUgcmVkbyBvcGVyYXRpb25zXG4gICAgICAgIF90aGlzLl9oaXN0b3J5LnN0YWNrID0gc3RhY2suc2xpY2UoMCwgb2Zmc2V0ICsgMSk7XG5cbiAgICAgICAgLy8gTGltaXQgdGhlIG51bWJlciBvZiBvcGVyYXRpb25zIHRvIDEwMFxuICAgICAgICB2YXIgY291bnQgPSBfdGhpcy5faGlzdG9yeS5zdGFjay5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGNvdW50ID4gSElTVE9SWV9MSU1JVCkge1xuICAgICAgICAgIHZhciBleHRyYXMgPSBjb3VudCAtIEhJU1RPUllfTElNSVQ7XG5cbiAgICAgICAgICBfdGhpcy5faGlzdG9yeS5zdGFjayA9IHN0YWNrLnNsaWNlKGV4dHJhcywgY291bnQpO1xuICAgICAgICAgIF90aGlzLl9oaXN0b3J5Lm9mZnNldCA9IE1hdGgubWF4KF90aGlzLl9oaXN0b3J5Lm9mZnNldCAtIGV4dHJhcywgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG5cbiAgICAgIGlmIChvdmVyd3JpdGUpIHtcbiAgICAgICAgdmFyIGxhc3QgPSBfdGhpcy5faGlzdG9yeS5zdGFja1tfdGhpcy5faGlzdG9yeS5vZmZzZXRdO1xuXG4gICAgICAgIGlmIChsYXN0ICYmIHRpbWVzdGFtcCAtIGxhc3QudGltZXN0YW1wIDwgSElTVE9SWV9USU1FX0dBUCkge1xuICAgICAgICAgIC8vIEEgcHJldmlvdXMgZW50cnkgZXhpc3RzIGFuZCB3YXMgaW4gc2hvcnQgaW50ZXJ2YWxcblxuICAgICAgICAgIC8vIE1hdGNoIHRoZSBsYXN0IHdvcmQgaW4gdGhlIGxpbmVcbiAgICAgICAgICB2YXIgcmUgPSAvW15hLXowLTldKFthLXowLTldKykkL2k7XG5cbiAgICAgICAgICAvLyBHZXQgdGhlIHByZXZpb3VzIGxpbmVcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBfdGhpcy5fZ2V0TGluZXMobGFzdC52YWx1ZSwgbGFzdC5zZWxlY3Rpb25TdGFydCkucG9wKCkubWF0Y2gocmUpO1xuXG4gICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IGxpbmVcbiAgICAgICAgICB2YXIgY3VycmVudCA9IF90aGlzLl9nZXRMaW5lcyhyZWNvcmQudmFsdWUsIHJlY29yZC5zZWxlY3Rpb25TdGFydCkucG9wKCkubWF0Y2gocmUpO1xuXG4gICAgICAgICAgaWYgKHByZXZpb3VzICYmIGN1cnJlbnQgJiYgY3VycmVudFsxXS5zdGFydHNXaXRoKHByZXZpb3VzWzFdKSkge1xuICAgICAgICAgICAgLy8gVGhlIGxhc3Qgd29yZCBvZiB0aGUgcHJldmlvdXMgbGluZSBhbmQgY3VycmVudCBsaW5lIG1hdGNoXG4gICAgICAgICAgICAvLyBPdmVyd3JpdGUgcHJldmlvdXMgZW50cnkgc28gdGhhdCB1bmRvIHdpbGwgcmVtb3ZlIHdob2xlIHdvcmRcbiAgICAgICAgICAgIF90aGlzLl9oaXN0b3J5LnN0YWNrW190aGlzLl9oaXN0b3J5Lm9mZnNldF0gPSBfZXh0ZW5kcyh7fSwgcmVjb3JkLCB7IHRpbWVzdGFtcDogdGltZXN0YW1wIH0pO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCB0aGUgbmV3IG9wZXJhdGlvbiB0byB0aGUgc3RhY2tcbiAgICAgIF90aGlzLl9oaXN0b3J5LnN0YWNrLnB1c2goX2V4dGVuZHMoe30sIHJlY29yZCwgeyB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9KSk7XG4gICAgICBfdGhpcy5faGlzdG9yeS5vZmZzZXQrKztcbiAgICB9LCBfdGhpcy5fdXBkYXRlSW5wdXQgPSBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICB2YXIgaW5wdXQgPSBfdGhpcy5faW5wdXQ7XG5cbiAgICAgIGlmICghaW5wdXQpIHJldHVybjtcblxuICAgICAgLy8gVXBkYXRlIHZhbHVlcyBhbmQgc2VsZWN0aW9uIHN0YXRlXG4gICAgICBpbnB1dC52YWx1ZSA9IHJlY29yZC52YWx1ZTtcbiAgICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gcmVjb3JkLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgaW5wdXQuc2VsZWN0aW9uRW5kID0gcmVjb3JkLnNlbGVjdGlvbkVuZDtcblxuICAgICAgX3RoaXMucHJvcHMub25WYWx1ZUNoYW5nZShyZWNvcmQudmFsdWUpO1xuICAgIH0sIF90aGlzLl9hcHBseUVkaXRzID0gZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgLy8gU2F2ZSBsYXN0IHNlbGVjdGlvbiBzdGF0ZVxuICAgICAgdmFyIGlucHV0ID0gX3RoaXMuX2lucHV0O1xuICAgICAgdmFyIGxhc3QgPSBfdGhpcy5faGlzdG9yeS5zdGFja1tfdGhpcy5faGlzdG9yeS5vZmZzZXRdO1xuXG4gICAgICBpZiAobGFzdCAmJiBpbnB1dCkge1xuICAgICAgICBfdGhpcy5faGlzdG9yeS5zdGFja1tfdGhpcy5faGlzdG9yeS5vZmZzZXRdID0gX2V4dGVuZHMoe30sIGxhc3QsIHtcbiAgICAgICAgICBzZWxlY3Rpb25TdGFydDogaW5wdXQuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgc2VsZWN0aW9uRW5kOiBpbnB1dC5zZWxlY3Rpb25FbmRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNhdmUgdGhlIGNoYW5nZXNcbiAgICAgIF90aGlzLl9yZWNvcmRDaGFuZ2UocmVjb3JkKTtcbiAgICAgIF90aGlzLl91cGRhdGVJbnB1dChyZWNvcmQpO1xuICAgIH0sIF90aGlzLl91bmRvRWRpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRfaGlzdG9yeTIgPSBfdGhpcy5faGlzdG9yeSxcbiAgICAgICAgICBzdGFjayA9IF90aGlzJF9oaXN0b3J5Mi5zdGFjayxcbiAgICAgICAgICBvZmZzZXQgPSBfdGhpcyRfaGlzdG9yeTIub2Zmc2V0O1xuXG4gICAgICAvLyBHZXQgdGhlIHByZXZpb3VzIGVkaXRcblxuICAgICAgdmFyIHJlY29yZCA9IHN0YWNrW29mZnNldCAtIDFdO1xuXG4gICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgIC8vIEFwcGx5IHRoZSBjaGFuZ2VzIGFuZCB1cGRhdGUgdGhlIG9mZnNldFxuICAgICAgICBfdGhpcy5fdXBkYXRlSW5wdXQocmVjb3JkKTtcbiAgICAgICAgX3RoaXMuX2hpc3Rvcnkub2Zmc2V0ID0gTWF0aC5tYXgob2Zmc2V0IC0gMSwgMCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuX3JlZG9FZGl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJF9oaXN0b3J5MyA9IF90aGlzLl9oaXN0b3J5LFxuICAgICAgICAgIHN0YWNrID0gX3RoaXMkX2hpc3RvcnkzLnN0YWNrLFxuICAgICAgICAgIG9mZnNldCA9IF90aGlzJF9oaXN0b3J5My5vZmZzZXQ7XG5cbiAgICAgIC8vIEdldCB0aGUgbmV4dCBlZGl0XG5cbiAgICAgIHZhciByZWNvcmQgPSBzdGFja1tvZmZzZXQgKyAxXTtcblxuICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAvLyBBcHBseSB0aGUgY2hhbmdlcyBhbmQgdXBkYXRlIHRoZSBvZmZzZXRcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUlucHV0KHJlY29yZCk7XG4gICAgICAgIF90aGlzLl9oaXN0b3J5Lm9mZnNldCA9IE1hdGgubWluKG9mZnNldCArIDEsIHN0YWNrLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLl9oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRhYlNpemUgPSBfdGhpcyRwcm9wcy50YWJTaXplLFxuICAgICAgICAgIGluc2VydFNwYWNlcyA9IF90aGlzJHByb3BzLmluc2VydFNwYWNlcyxcbiAgICAgICAgICBpZ25vcmVUYWJLZXkgPSBfdGhpcyRwcm9wcy5pZ25vcmVUYWJLZXksXG4gICAgICAgICAgb25LZXlEb3duID0gX3RoaXMkcHJvcHMub25LZXlEb3duO1xuXG5cbiAgICAgIGlmIChvbktleURvd24pIHtcbiAgICAgICAgb25LZXlEb3duKGUpO1xuXG4gICAgICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gS0VZQ09ERV9FU0NBUEUpIHtcbiAgICAgICAgZS50YXJnZXQuYmx1cigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2UkdGFyZ2V0ID0gZS50YXJnZXQsXG4gICAgICAgICAgdmFsdWUgPSBfZSR0YXJnZXQudmFsdWUsXG4gICAgICAgICAgc2VsZWN0aW9uU3RhcnQgPSBfZSR0YXJnZXQuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgc2VsZWN0aW9uRW5kID0gX2UkdGFyZ2V0LnNlbGVjdGlvbkVuZDtcblxuXG4gICAgICB2YXIgdGFiQ2hhcmFjdGVyID0gKGluc2VydFNwYWNlcyA/ICcgJyA6ICdcXHQnKS5yZXBlYXQodGFiU2l6ZSk7XG5cbiAgICAgIGlmIChlLmtleUNvZGUgPT09IEtFWUNPREVfVEFCICYmICFpZ25vcmVUYWJLZXkgJiYgX3RoaXMuc3RhdGUuY2FwdHVyZSkge1xuICAgICAgICAvLyBQcmV2ZW50IGZvY3VzIGNoYW5nZVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAvLyBVbmluZGVudCBzZWxlY3RlZCBsaW5lc1xuICAgICAgICAgIHZhciBsaW5lc0JlZm9yZUNhcmV0ID0gX3RoaXMuX2dldExpbmVzKHZhbHVlLCBzZWxlY3Rpb25TdGFydCk7XG4gICAgICAgICAgdmFyIHN0YXJ0TGluZSA9IGxpbmVzQmVmb3JlQ2FyZXQubGVuZ3RoIC0gMTtcbiAgICAgICAgICB2YXIgZW5kTGluZSA9IF90aGlzLl9nZXRMaW5lcyh2YWx1ZSwgc2VsZWN0aW9uRW5kKS5sZW5ndGggLSAxO1xuICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSB2YWx1ZS5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uIChsaW5lLCBpKSB7XG4gICAgICAgICAgICBpZiAoaSA+PSBzdGFydExpbmUgJiYgaSA8PSBlbmRMaW5lICYmIGxpbmUuc3RhcnRzV2l0aCh0YWJDaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsaW5lLnN1YnN0cmluZyh0YWJDaGFyYWN0ZXIubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG5cbiAgICAgICAgICBpZiAodmFsdWUgIT09IG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0TGluZVRleHQgPSBsaW5lc0JlZm9yZUNhcmV0W3N0YXJ0TGluZV07XG5cbiAgICAgICAgICAgIF90aGlzLl9hcHBseUVkaXRzKHtcbiAgICAgICAgICAgICAgdmFsdWU6IG5leHRWYWx1ZSxcbiAgICAgICAgICAgICAgLy8gTW92ZSB0aGUgc3RhcnQgY3Vyc29yIGlmIGZpcnN0IGxpbmUgaW4gc2VsZWN0aW9uIHdhcyBtb2RpZmllZFxuICAgICAgICAgICAgICAvLyBJdCB3YXMgbW9kaWZpZWQgb25seSBpZiBpdCBzdGFydGVkIHdpdGggYSB0YWJcbiAgICAgICAgICAgICAgc2VsZWN0aW9uU3RhcnQ6IHN0YXJ0TGluZVRleHQuc3RhcnRzV2l0aCh0YWJDaGFyYWN0ZXIpID8gc2VsZWN0aW9uU3RhcnQgLSB0YWJDaGFyYWN0ZXIubGVuZ3RoIDogc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgICAgIC8vIE1vdmUgdGhlIGVuZCBjdXJzb3IgYnkgdG90YWwgbnVtYmVyIG9mIGNoYXJhY3RlcnMgcmVtb3ZlZFxuICAgICAgICAgICAgICBzZWxlY3Rpb25FbmQ6IHNlbGVjdGlvbkVuZCAtICh2YWx1ZS5sZW5ndGggLSBuZXh0VmFsdWUubGVuZ3RoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGlvblN0YXJ0ICE9PSBzZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgICAvLyBJbmRlbnQgc2VsZWN0ZWQgbGluZXNcbiAgICAgICAgICB2YXIgX2xpbmVzQmVmb3JlQ2FyZXQgPSBfdGhpcy5fZ2V0TGluZXModmFsdWUsIHNlbGVjdGlvblN0YXJ0KTtcbiAgICAgICAgICB2YXIgX3N0YXJ0TGluZSA9IF9saW5lc0JlZm9yZUNhcmV0Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgdmFyIF9lbmRMaW5lID0gX3RoaXMuX2dldExpbmVzKHZhbHVlLCBzZWxlY3Rpb25FbmQpLmxlbmd0aCAtIDE7XG4gICAgICAgICAgdmFyIF9zdGFydExpbmVUZXh0ID0gX2xpbmVzQmVmb3JlQ2FyZXRbX3N0YXJ0TGluZV07XG5cbiAgICAgICAgICBfdGhpcy5fYXBwbHlFZGl0cyh7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbiAobGluZSwgaSkge1xuICAgICAgICAgICAgICBpZiAoaSA+PSBfc3RhcnRMaW5lICYmIGkgPD0gX2VuZExpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFiQ2hhcmFjdGVyICsgbGluZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgICAgICAgfSkuam9pbignXFxuJyksXG4gICAgICAgICAgICAvLyBNb3ZlIHRoZSBzdGFydCBjdXJzb3IgYnkgbnVtYmVyIG9mIGNoYXJhY3RlcnMgYWRkZWQgaW4gZmlyc3QgbGluZSBvZiBzZWxlY3Rpb25cbiAgICAgICAgICAgIC8vIERvbid0IG1vdmUgaXQgaWYgaXQgdGhlcmUgd2FzIG5vIHRleHQgYmVmb3JlIGN1cnNvclxuICAgICAgICAgICAgc2VsZWN0aW9uU3RhcnQ6IC9cXFMvLnRlc3QoX3N0YXJ0TGluZVRleHQpID8gc2VsZWN0aW9uU3RhcnQgKyB0YWJDaGFyYWN0ZXIubGVuZ3RoIDogc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgICAvLyBNb3ZlIHRoZSBlbmQgY3Vyc29yIGJ5IHRvdGFsIG51bWJlciBvZiBjaGFyYWN0ZXJzIGFkZGVkXG4gICAgICAgICAgICBzZWxlY3Rpb25FbmQ6IHNlbGVjdGlvbkVuZCArIHRhYkNoYXJhY3Rlci5sZW5ndGggKiAoX2VuZExpbmUgLSBfc3RhcnRMaW5lICsgMSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdXBkYXRlZFNlbGVjdGlvbiA9IHNlbGVjdGlvblN0YXJ0ICsgdGFiQ2hhcmFjdGVyLmxlbmd0aDtcblxuICAgICAgICAgIF90aGlzLl9hcHBseUVkaXRzKHtcbiAgICAgICAgICAgIC8vIEluc2VydCB0YWIgY2hhcmFjdGVyIGF0IGNhcmV0XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUuc3Vic3RyaW5nKDAsIHNlbGVjdGlvblN0YXJ0KSArIHRhYkNoYXJhY3RlciArIHZhbHVlLnN1YnN0cmluZyhzZWxlY3Rpb25FbmQpLFxuICAgICAgICAgICAgLy8gVXBkYXRlIGNhcmV0IHBvc2l0aW9uXG4gICAgICAgICAgICBzZWxlY3Rpb25TdGFydDogdXBkYXRlZFNlbGVjdGlvbixcbiAgICAgICAgICAgIHNlbGVjdGlvbkVuZDogdXBkYXRlZFNlbGVjdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gS0VZQ09ERV9CQUNLU1BBQ0UpIHtcbiAgICAgICAgdmFyIGhhc1NlbGVjdGlvbiA9IHNlbGVjdGlvblN0YXJ0ICE9PSBzZWxlY3Rpb25FbmQ7XG4gICAgICAgIHZhciB0ZXh0QmVmb3JlQ2FyZXQgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgc2VsZWN0aW9uU3RhcnQpO1xuXG4gICAgICAgIGlmICh0ZXh0QmVmb3JlQ2FyZXQuZW5kc1dpdGgodGFiQ2hhcmFjdGVyKSAmJiAhaGFzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGRlbGV0ZSBiZWhhdmlvdXJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgX3VwZGF0ZWRTZWxlY3Rpb24gPSBzZWxlY3Rpb25TdGFydCAtIHRhYkNoYXJhY3Rlci5sZW5ndGg7XG5cbiAgICAgICAgICBfdGhpcy5fYXBwbHlFZGl0cyh7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGFiIGNoYXJhY3RlciBhdCBjYXJldFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLnN1YnN0cmluZygwLCBzZWxlY3Rpb25TdGFydCAtIHRhYkNoYXJhY3Rlci5sZW5ndGgpICsgdmFsdWUuc3Vic3RyaW5nKHNlbGVjdGlvbkVuZCksXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2FyZXQgcG9zaXRpb25cbiAgICAgICAgICAgIHNlbGVjdGlvblN0YXJ0OiBfdXBkYXRlZFNlbGVjdGlvbixcbiAgICAgICAgICAgIHNlbGVjdGlvbkVuZDogX3VwZGF0ZWRTZWxlY3Rpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IEtFWUNPREVfRU5URVIpIHtcbiAgICAgICAgLy8gSWdub3JlIHNlbGVjdGlvbnNcbiAgICAgICAgaWYgKHNlbGVjdGlvblN0YXJ0ID09PSBzZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgbGluZVxuICAgICAgICAgIHZhciBsaW5lID0gX3RoaXMuX2dldExpbmVzKHZhbHVlLCBzZWxlY3Rpb25TdGFydCkucG9wKCk7XG4gICAgICAgICAgdmFyIG1hdGNoZXMgPSBsaW5lLm1hdGNoKC9eXFxzKy8pO1xuXG4gICAgICAgICAgaWYgKG1hdGNoZXMgJiYgbWF0Y2hlc1swXSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAvLyBQcmVzZXJ2ZSBpbmRlbnRhdGlvbiBvbiBpbnNlcnRpbmcgYSBuZXcgbGluZVxuICAgICAgICAgICAgdmFyIGluZGVudCA9ICdcXG4nICsgbWF0Y2hlc1swXTtcbiAgICAgICAgICAgIHZhciBfdXBkYXRlZFNlbGVjdGlvbjIgPSBzZWxlY3Rpb25TdGFydCArIGluZGVudC5sZW5ndGg7XG5cbiAgICAgICAgICAgIF90aGlzLl9hcHBseUVkaXRzKHtcbiAgICAgICAgICAgICAgLy8gSW5zZXJ0IGluZGVudGF0aW9uIGNoYXJhY3RlciBhdCBjYXJldFxuICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUuc3Vic3RyaW5nKDAsIHNlbGVjdGlvblN0YXJ0KSArIGluZGVudCArIHZhbHVlLnN1YnN0cmluZyhzZWxlY3Rpb25FbmQpLFxuICAgICAgICAgICAgICAvLyBVcGRhdGUgY2FyZXQgcG9zaXRpb25cbiAgICAgICAgICAgICAgc2VsZWN0aW9uU3RhcnQ6IF91cGRhdGVkU2VsZWN0aW9uMixcbiAgICAgICAgICAgICAgc2VsZWN0aW9uRW5kOiBfdXBkYXRlZFNlbGVjdGlvbjJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IEtFWUNPREVfUEFSRU5TIHx8IGUua2V5Q29kZSA9PT0gS0VZQ09ERV9CUkFDS0VUUyB8fCBlLmtleUNvZGUgPT09IEtFWUNPREVfUVVPVEUgfHwgZS5rZXlDb2RlID09PSBLRVlDT0RFX0JBQ0tfUVVPVEUpIHtcbiAgICAgICAgdmFyIGNoYXJzID0gdm9pZCAwO1xuXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IEtFWUNPREVfUEFSRU5TICYmIGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICBjaGFycyA9IFsnKCcsICcpJ107XG4gICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSBLRVlDT0RFX0JSQUNLRVRTKSB7XG4gICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIGNoYXJzID0gWyd7JywgJ30nXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhcnMgPSBbJ1snLCAnXSddO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IEtFWUNPREVfUVVPVEUpIHtcbiAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgY2hhcnMgPSBbJ1wiJywgJ1wiJ107XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYXJzID0gW1wiJ1wiLCBcIidcIl07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gS0VZQ09ERV9CQUNLX1FVT1RFICYmICFlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgY2hhcnMgPSBbJ2AnLCAnYCddO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGV4dCBpcyBzZWxlY3RlZCwgd3JhcCB0aGVtIGluIHRoZSBjaGFyYWN0ZXJzXG4gICAgICAgIGlmIChzZWxlY3Rpb25TdGFydCAhPT0gc2VsZWN0aW9uRW5kICYmIGNoYXJzKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgX3RoaXMuX2FwcGx5RWRpdHMoe1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLnN1YnN0cmluZygwLCBzZWxlY3Rpb25TdGFydCkgKyBjaGFyc1swXSArIHZhbHVlLnN1YnN0cmluZyhzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKSArIGNoYXJzWzFdICsgdmFsdWUuc3Vic3RyaW5nKHNlbGVjdGlvbkVuZCksXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2FyZXQgcG9zaXRpb25cbiAgICAgICAgICAgIHNlbGVjdGlvblN0YXJ0OiBzZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICAgIHNlbGVjdGlvbkVuZDogc2VsZWN0aW9uRW5kICsgMlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKChpc01hY0xpa2UgPyAvLyBUcmlnZ2VyIHVuZG8gd2l0aCDijJgrWiBvbiBNYWNcbiAgICAgIGUubWV0YUtleSAmJiBlLmtleUNvZGUgPT09IEtFWUNPREVfWiA6IC8vIFRyaWdnZXIgdW5kbyB3aXRoIEN0cmwrWiBvbiBvdGhlciBwbGF0Zm9ybXNcbiAgICAgIGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IEtFWUNPREVfWikgJiYgIWUuc2hpZnRLZXkgJiYgIWUuYWx0S2V5KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBfdGhpcy5fdW5kb0VkaXQoKTtcbiAgICAgIH0gZWxzZSBpZiAoKGlzTWFjTGlrZSA/IC8vIFRyaWdnZXIgcmVkbyB3aXRoIOKMmCtTaGlmdCtaIG9uIE1hY1xuICAgICAgZS5tZXRhS2V5ICYmIGUua2V5Q29kZSA9PT0gS0VZQ09ERV9aICYmIGUuc2hpZnRLZXkgOiBpc1dpbmRvd3MgPyAvLyBUcmlnZ2VyIHJlZG8gd2l0aCBDdHJsK1kgb24gV2luZG93c1xuICAgICAgZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0gS0VZQ09ERV9ZIDogLy8gVHJpZ2dlciByZWRvIHdpdGggQ3RybCtTaGlmdCtaIG9uIG90aGVyIHBsYXRmb3Jtc1xuICAgICAgZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0gS0VZQ09ERV9aICYmIGUuc2hpZnRLZXkpICYmICFlLmFsdEtleSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgX3RoaXMuX3JlZG9FZGl0KCk7XG4gICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gS0VZQ09ERV9NICYmIGUuY3RybEtleSAmJiAoaXNNYWNMaWtlID8gZS5zaGlmdEtleSA6IHRydWUpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBUb2dnbGUgY2FwdHVyaW5nIHRhYiBrZXkgc28gdXNlcnMgY2FuIGZvY3VzIGF3YXlcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNhcHR1cmU6ICFzdGF0ZS5jYXB0dXJlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuX2hhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgX2UkdGFyZ2V0MiA9IGUudGFyZ2V0LFxuICAgICAgICAgIHZhbHVlID0gX2UkdGFyZ2V0Mi52YWx1ZSxcbiAgICAgICAgICBzZWxlY3Rpb25TdGFydCA9IF9lJHRhcmdldDIuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgc2VsZWN0aW9uRW5kID0gX2UkdGFyZ2V0Mi5zZWxlY3Rpb25FbmQ7XG5cblxuICAgICAgX3RoaXMuX3JlY29yZENoYW5nZSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgc2VsZWN0aW9uU3RhcnQ6IHNlbGVjdGlvblN0YXJ0LFxuICAgICAgICBzZWxlY3Rpb25FbmQ6IHNlbGVjdGlvbkVuZFxuICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgIF90aGlzLnByb3BzLm9uVmFsdWVDaGFuZ2UodmFsdWUpO1xuICAgIH0sIF90aGlzLl9oaXN0b3J5ID0ge1xuICAgICAgc3RhY2s6IFtdLFxuICAgICAgb2Zmc2V0OiAtMVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVkaXRvciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5fcmVjb3JkQ3VycmVudFN0YXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHZhbHVlID0gX3Byb3BzLnZhbHVlLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHBhZGRpbmcgPSBfcHJvcHMucGFkZGluZyxcbiAgICAgICAgICBoaWdobGlnaHQgPSBfcHJvcHMuaGlnaGxpZ2h0LFxuICAgICAgICAgIHRleHRhcmVhSWQgPSBfcHJvcHMudGV4dGFyZWFJZCxcbiAgICAgICAgICBhdXRvRm9jdXMgPSBfcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGZvcm0gPSBfcHJvcHMuZm9ybSxcbiAgICAgICAgICBtYXhMZW5ndGggPSBfcHJvcHMubWF4TGVuZ3RoLFxuICAgICAgICAgIG1pbkxlbmd0aCA9IF9wcm9wcy5taW5MZW5ndGgsXG4gICAgICAgICAgbmFtZSA9IF9wcm9wcy5uYW1lLFxuICAgICAgICAgIHBsYWNlaG9sZGVyID0gX3Byb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgICAgIHJlYWRPbmx5ID0gX3Byb3BzLnJlYWRPbmx5LFxuICAgICAgICAgIHJlcXVpcmVkID0gX3Byb3BzLnJlcXVpcmVkLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfcHJvcHMub25DbGljayxcbiAgICAgICAgICBvbkZvY3VzID0gX3Byb3BzLm9uRm9jdXMsXG4gICAgICAgICAgb25CbHVyID0gX3Byb3BzLm9uQmx1cixcbiAgICAgICAgICBvbktleVVwID0gX3Byb3BzLm9uS2V5VXAsXG4gICAgICAgICAgb25LZXlEb3duID0gX3Byb3BzLm9uS2V5RG93bixcbiAgICAgICAgICBvblZhbHVlQ2hhbmdlID0gX3Byb3BzLm9uVmFsdWVDaGFuZ2UsXG4gICAgICAgICAgdGFiU2l6ZSA9IF9wcm9wcy50YWJTaXplLFxuICAgICAgICAgIGluc2VydFNwYWNlcyA9IF9wcm9wcy5pbnNlcnRTcGFjZXMsXG4gICAgICAgICAgaWdub3JlVGFiS2V5ID0gX3Byb3BzLmlnbm9yZVRhYktleSxcbiAgICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWyd2YWx1ZScsICdzdHlsZScsICdwYWRkaW5nJywgJ2hpZ2hsaWdodCcsICd0ZXh0YXJlYUlkJywgJ2F1dG9Gb2N1cycsICdkaXNhYmxlZCcsICdmb3JtJywgJ21heExlbmd0aCcsICdtaW5MZW5ndGgnLCAnbmFtZScsICdwbGFjZWhvbGRlcicsICdyZWFkT25seScsICdyZXF1aXJlZCcsICdvbkNsaWNrJywgJ29uRm9jdXMnLCAnb25CbHVyJywgJ29uS2V5VXAnLCAnb25LZXlEb3duJywgJ29uVmFsdWVDaGFuZ2UnLCAndGFiU2l6ZScsICdpbnNlcnRTcGFjZXMnLCAnaWdub3JlVGFiS2V5J10pO1xuXG4gICAgICB2YXIgY29udGVudFN0eWxlID0ge1xuICAgICAgICBwYWRkaW5nVG9wOiBwYWRkaW5nLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHBhZGRpbmcsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IHBhZGRpbmcsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiBwYWRkaW5nXG4gICAgICB9O1xuXG4gICAgICB2YXIgaGlnaGxpZ2h0ZWQgPSBoaWdobGlnaHQodmFsdWUpO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIF9leHRlbmRzKHt9LCByZXN0LCB7IHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGVzLmNvbnRhaW5lciwgc3R5bGUpIH0pLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScsIHtcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihjKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9pbnB1dCA9IGM7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5lZGl0b3IsIHN0eWxlcy50ZXh0YXJlYSwgY29udGVudFN0eWxlKSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICBpZDogdGV4dGFyZWFJZCxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgb25DaGFuZ2U6IHRoaXMuX2hhbmRsZUNoYW5nZSxcbiAgICAgICAgICBvbktleURvd246IHRoaXMuX2hhbmRsZUtleURvd24sXG4gICAgICAgICAgb25DbGljazogb25DbGljayxcbiAgICAgICAgICBvbktleVVwOiBvbktleVVwLFxuICAgICAgICAgIG9uRm9jdXM6IG9uRm9jdXMsXG4gICAgICAgICAgb25CbHVyOiBvbkJsdXIsXG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgIGZvcm06IGZvcm0sXG4gICAgICAgICAgbWF4TGVuZ3RoOiBtYXhMZW5ndGgsXG4gICAgICAgICAgbWluTGVuZ3RoOiBtaW5MZW5ndGgsXG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgICAgICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICAgICAgICBhdXRvQ2FwaXRhbGl6ZTogJ29mZicsXG4gICAgICAgICAgYXV0b0NvbXBsZXRlOiAnb2ZmJyxcbiAgICAgICAgICBhdXRvQ29ycmVjdDogJ29mZicsXG4gICAgICAgICAgc3BlbGxDaGVjazogZmFsc2UsXG4gICAgICAgICAgJ2RhdGEtZ3JhbW0nOiBmYWxzZVxuICAgICAgICB9KSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgncHJlJywgX2V4dGVuZHMoe1xuICAgICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcbiAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5lZGl0b3IsIHN0eWxlcy5oaWdobGlnaHQsIGNvbnRlbnRTdHlsZSlcbiAgICAgICAgfSwgdHlwZW9mIGhpZ2hsaWdodGVkID09PSAnc3RyaW5nJyA/IHsgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiBoaWdobGlnaHRlZCArICc8YnIgLz4nIH0gfSA6IHsgY2hpbGRyZW46IGhpZ2hsaWdodGVkIH0pKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnc3R5bGUnLCB7IHR5cGU6ICd0ZXh0L2NzcycsIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogY3NzVGV4dCB9IH0pXG4gICAgICApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nlc3Npb24nLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5faGlzdG9yeVxuICAgICAgfTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHNlc3Npb24pIHtcbiAgICAgIHRoaXMuX2hpc3RvcnkgPSBzZXNzaW9uLmhpc3Rvcnk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVkaXRvcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRWRpdG9yLmRlZmF1bHRQcm9wcyA9IHtcbiAgdGFiU2l6ZTogMixcbiAgaW5zZXJ0U3BhY2VzOiB0cnVlLFxuICBpZ25vcmVUYWJLZXk6IGZhbHNlLFxuICBwYWRkaW5nOiAwXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gRWRpdG9yO1xuXG5cbnZhciBzdHlsZXMgPSB7XG4gIGNvbnRhaW5lcjoge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH0sXG4gIHRleHRhcmVhOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICByZXNpemU6ICdub25lJyxcbiAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICBNb3pPc3hGb250U21vb3RoaW5nOiAnZ3JheXNjYWxlJyxcbiAgICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnLFxuICAgIFdlYmtpdFRleHRGaWxsQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgfSxcbiAgaGlnaGxpZ2h0OiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gIH0sXG4gIGVkaXRvcjoge1xuICAgIG1hcmdpbjogMCxcbiAgICBib3JkZXI6IDAsXG4gICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgIGJveFNpemluZzogJ2luaGVyaXQnLFxuICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICBmb250U3R5bGU6ICdpbmhlcml0JyxcbiAgICBmb250VmFyaWFudExpZ2F0dXJlczogJ2luaGVyaXQnLFxuICAgIGZvbnRXZWlnaHQ6ICdpbmhlcml0JyxcbiAgICBsZXR0ZXJTcGFjaW5nOiAnaW5oZXJpdCcsXG4gICAgbGluZUhlaWdodDogJ2luaGVyaXQnLFxuICAgIHRhYlNpemU6ICdpbmhlcml0JyxcbiAgICB0ZXh0SW5kZW50OiAnaW5oZXJpdCcsXG4gICAgdGV4dFJlbmRlcmluZzogJ2luaGVyaXQnLFxuICAgIHRleHRUcmFuc2Zvcm06ICdpbmhlcml0JyxcbiAgICB3aGl0ZVNwYWNlOiAncHJlLXdyYXAnLFxuICAgIHdvcmRCcmVhazogJ2tlZXAtYWxsJyxcbiAgICBvdmVyZmxvd1dyYXA6ICdicmVhay13b3JkJ1xuICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBfaW1wbGVtZW50YXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1wbGVtZW50YXRpb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ29udGV4dCB8fCBfaW1wbGVtZW50YXRpb24yLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGdlbmVyYXRlID0gcmVxdWlyZSgncmVnanNnZW4nKS5nZW5lcmF0ZTtcbmNvbnN0IHBhcnNlID0gcmVxdWlyZSgncmVnanNwYXJzZXInKS5wYXJzZTtcbmNvbnN0IHJlZ2VuZXJhdGUgPSByZXF1aXJlKCdyZWdlbmVyYXRlJyk7XG5jb25zdCB1bmljb2RlTWF0Y2hQcm9wZXJ0eSA9IHJlcXVpcmUoJ3VuaWNvZGUtbWF0Y2gtcHJvcGVydHktZWNtYXNjcmlwdCcpO1xuY29uc3QgdW5pY29kZU1hdGNoUHJvcGVydHlWYWx1ZSA9IHJlcXVpcmUoJ3VuaWNvZGUtbWF0Y2gtcHJvcGVydHktdmFsdWUtZWNtYXNjcmlwdCcpO1xuY29uc3QgaXVNYXBwaW5ncyA9IHJlcXVpcmUoJy4vZGF0YS9pdS1tYXBwaW5ncy5qcycpO1xuY29uc3QgRVNDQVBFX1NFVFMgPSByZXF1aXJlKCcuL2RhdGEvY2hhcmFjdGVyLWNsYXNzLWVzY2FwZS1zZXRzLmpzJyk7XG5cbi8vIFByZXBhcmUgYSBSZWdlbmVyYXRlIHNldCBjb250YWluaW5nIGFsbCBjb2RlIHBvaW50cywgdXNlZCBmb3IgbmVnYXRpdmVcbi8vIGNoYXJhY3RlciBjbGFzc2VzIChpZiBhbnkpLlxuY29uc3QgVU5JQ09ERV9TRVQgPSByZWdlbmVyYXRlKCkuYWRkUmFuZ2UoMHgwLCAweDEwRkZGRik7XG4vLyBXaXRob3V0IHRoZSBgdWAgZmxhZywgdGhlIHJhbmdlIHN0b3BzIGF0IDB4RkZGRi5cbi8vIGh0dHBzOi8vbXRocy5iZS9lczYjc2VjLXBhdHRlcm4tc2VtYW50aWNzXG5jb25zdCBCTVBfU0VUID0gcmVnZW5lcmF0ZSgpLmFkZFJhbmdlKDB4MCwgMHhGRkZGKTtcblxuLy8gUHJlcGFyZSBhIFJlZ2VuZXJhdGUgc2V0IGNvbnRhaW5pbmcgYWxsIGNvZGUgcG9pbnRzIHRoYXQgYXJlIHN1cHBvc2VkIHRvIGJlXG4vLyBtYXRjaGVkIGJ5IGAvLi91YC4gaHR0cHM6Ly9tdGhzLmJlL2VzNiNzZWMtYXRvbVxuY29uc3QgRE9UX1NFVF9VTklDT0RFID0gVU5JQ09ERV9TRVQuY2xvbmUoKSAvLyBhbGwgVW5pY29kZSBjb2RlIHBvaW50c1xuXHQucmVtb3ZlKFxuXHRcdC8vIG1pbnVzIGBMaW5lVGVybWluYXRvcmBzIChodHRwczovL210aHMuYmUvZXM2I3NlYy1saW5lLXRlcm1pbmF0b3JzKTpcblx0XHQweDAwMEEsIC8vIExpbmUgRmVlZCA8TEY+XG5cdFx0MHgwMDBELCAvLyBDYXJyaWFnZSBSZXR1cm4gPENSPlxuXHRcdDB4MjAyOCwgLy8gTGluZSBTZXBhcmF0b3IgPExTPlxuXHRcdDB4MjAyOSAgLy8gUGFyYWdyYXBoIFNlcGFyYXRvciA8UFM+XG5cdCk7XG5cbmNvbnN0IGdldENoYXJhY3RlckNsYXNzRXNjYXBlU2V0ID0gKGNoYXJhY3RlciwgdW5pY29kZSwgaWdub3JlQ2FzZSkgPT4ge1xuXHRpZiAodW5pY29kZSkge1xuXHRcdGlmIChpZ25vcmVDYXNlKSB7XG5cdFx0XHRyZXR1cm4gRVNDQVBFX1NFVFMuVU5JQ09ERV9JR05PUkVfQ0FTRS5nZXQoY2hhcmFjdGVyKTtcblx0XHR9XG5cdFx0cmV0dXJuIEVTQ0FQRV9TRVRTLlVOSUNPREUuZ2V0KGNoYXJhY3Rlcik7XG5cdH1cblx0cmV0dXJuIEVTQ0FQRV9TRVRTLlJFR1VMQVIuZ2V0KGNoYXJhY3Rlcik7XG59O1xuXG5jb25zdCBnZXRVbmljb2RlRG90U2V0ID0gKGRvdEFsbCkgPT4ge1xuXHRyZXR1cm4gZG90QWxsID8gVU5JQ09ERV9TRVQgOiBET1RfU0VUX1VOSUNPREU7XG59O1xuXG5jb25zdCBnZXRVbmljb2RlUHJvcGVydHlWYWx1ZVNldCA9IChwcm9wZXJ0eSwgdmFsdWUpID0+IHtcblx0Y29uc3QgcGF0aCA9IHZhbHVlID9cblx0XHRgJHsgcHJvcGVydHkgfS8keyB2YWx1ZSB9YCA6XG5cdFx0YEJpbmFyeV9Qcm9wZXJ0eS8keyBwcm9wZXJ0eSB9YDtcblx0dHJ5IHtcblx0XHRyZXR1cm4gcmVxdWlyZShgcmVnZW5lcmF0ZS11bmljb2RlLXByb3BlcnRpZXMvJHsgcGF0aCB9LmpzYCk7XG5cdH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuXHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdGBGYWlsZWQgdG8gcmVjb2duaXplIHZhbHVlIFxcYCR7IHZhbHVlIH1cXGAgZm9yIHByb3BlcnR5IGAgK1xuXHRcdFx0YFxcYCR7IHByb3BlcnR5IH1cXGAuYFxuXHRcdCk7XG5cdH1cbn07XG5cbmNvbnN0IGhhbmRsZUxvbmVVbmljb2RlUHJvcGVydHlOYW1lT3JWYWx1ZSA9ICh2YWx1ZSkgPT4ge1xuXHQvLyBJdCBjb3VsZCBiZSBhIGBHZW5lcmFsX0NhdGVnb3J5YCB2YWx1ZSBvciBhIGJpbmFyeSBwcm9wZXJ0eS5cblx0Ly8gTm90ZTogYHVuaWNvZGVNYXRjaFByb3BlcnR5VmFsdWVgIHRocm93cyBvbiBpbnZhbGlkIHZhbHVlcy5cblx0dHJ5IHtcblx0XHRjb25zdCBwcm9wZXJ0eSA9ICdHZW5lcmFsX0NhdGVnb3J5Jztcblx0XHRjb25zdCBjYXRlZ29yeSA9IHVuaWNvZGVNYXRjaFByb3BlcnR5VmFsdWUocHJvcGVydHksIHZhbHVlKTtcblx0XHRyZXR1cm4gZ2V0VW5pY29kZVByb3BlcnR5VmFsdWVTZXQocHJvcGVydHksIGNhdGVnb3J5KTtcblx0fSBjYXRjaCAoZXhjZXB0aW9uKSB7fVxuXHQvLyBJdOKAmXMgbm90IGEgYEdlbmVyYWxfQ2F0ZWdvcnlgIHZhbHVlLCBzbyBjaGVjayBpZiBpdOKAmXMgYSBiaW5hcnlcblx0Ly8gcHJvcGVydHkuIE5vdGU6IGB1bmljb2RlTWF0Y2hQcm9wZXJ0eWAgdGhyb3dzIG9uIGludmFsaWQgcHJvcGVydGllcy5cblx0Y29uc3QgcHJvcGVydHkgPSB1bmljb2RlTWF0Y2hQcm9wZXJ0eSh2YWx1ZSk7XG5cdHJldHVybiBnZXRVbmljb2RlUHJvcGVydHlWYWx1ZVNldChwcm9wZXJ0eSk7XG59O1xuXG5jb25zdCBnZXRVbmljb2RlUHJvcGVydHlFc2NhcGVTZXQgPSAodmFsdWUsIGlzTmVnYXRpdmUpID0+IHtcblx0Y29uc3QgcGFydHMgPSB2YWx1ZS5zcGxpdCgnPScpO1xuXHRjb25zdCBmaXJzdFBhcnQgPSBwYXJ0c1swXTtcblx0bGV0IHNldDtcblx0aWYgKHBhcnRzLmxlbmd0aCA9PSAxKSB7XG5cdFx0c2V0ID0gaGFuZGxlTG9uZVVuaWNvZGVQcm9wZXJ0eU5hbWVPclZhbHVlKGZpcnN0UGFydCk7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gVGhlIHBhdHRlcm4gY29uc2lzdHMgb2YgdHdvIHBhcnRzLCBpLmUuIGBQcm9wZXJ0eT1WYWx1ZWAuXG5cdFx0Y29uc3QgcHJvcGVydHkgPSB1bmljb2RlTWF0Y2hQcm9wZXJ0eShmaXJzdFBhcnQpO1xuXHRcdGNvbnN0IHZhbHVlID0gdW5pY29kZU1hdGNoUHJvcGVydHlWYWx1ZShwcm9wZXJ0eSwgcGFydHNbMV0pO1xuXHRcdHNldCA9IGdldFVuaWNvZGVQcm9wZXJ0eVZhbHVlU2V0KHByb3BlcnR5LCB2YWx1ZSk7XG5cdH1cblx0aWYgKGlzTmVnYXRpdmUpIHtcblx0XHRyZXR1cm4gVU5JQ09ERV9TRVQuY2xvbmUoKS5yZW1vdmUoc2V0KTtcblx0fVxuXHRyZXR1cm4gc2V0LmNsb25lKCk7XG59O1xuXG4vLyBHaXZlbiBhIHJhbmdlIG9mIGNvZGUgcG9pbnRzLCBhZGQgYW55IGNhc2UtZm9sZGVkIGNvZGUgcG9pbnRzIGluIHRoYXQgcmFuZ2Vcbi8vIHRvIGEgc2V0LlxucmVnZW5lcmF0ZS5wcm90b3R5cGUuaXVBZGRSYW5nZSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG5cdGNvbnN0ICR0aGlzID0gdGhpcztcblx0ZG8ge1xuXHRcdGNvbnN0IGZvbGRlZCA9IGNhc2VGb2xkKG1pbik7XG5cdFx0aWYgKGZvbGRlZCkge1xuXHRcdFx0JHRoaXMuYWRkKGZvbGRlZCk7XG5cdFx0fVxuXHR9IHdoaWxlICgrK21pbiA8PSBtYXgpO1xuXHRyZXR1cm4gJHRoaXM7XG59O1xuXG5jb25zdCB1cGRhdGUgPSAoaXRlbSwgcGF0dGVybikgPT4ge1xuXHRsZXQgdHJlZSA9IHBhcnNlKHBhdHRlcm4sIGNvbmZpZy51c2VVbmljb2RlRmxhZyA/ICd1JyA6ICcnKTtcblx0c3dpdGNoICh0cmVlLnR5cGUpIHtcblx0XHRjYXNlICdjaGFyYWN0ZXJDbGFzcyc6XG5cdFx0Y2FzZSAnZ3JvdXAnOlxuXHRcdGNhc2UgJ3ZhbHVlJzpcblx0XHRcdC8vIE5vIHdyYXBwaW5nIG5lZWRlZC5cblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHQvLyBXcmFwIHRoZSBwYXR0ZXJuIGluIGEgbm9uLWNhcHR1cmluZyBncm91cC5cblx0XHRcdHRyZWUgPSB3cmFwKHRyZWUsIHBhdHRlcm4pO1xuXHR9XG5cdE9iamVjdC5hc3NpZ24oaXRlbSwgdHJlZSk7XG59O1xuXG5jb25zdCB3cmFwID0gKHRyZWUsIHBhdHRlcm4pID0+IHtcblx0Ly8gV3JhcCB0aGUgcGF0dGVybiBpbiBhIG5vbi1jYXB0dXJpbmcgZ3JvdXAuXG5cdHJldHVybiB7XG5cdFx0J3R5cGUnOiAnZ3JvdXAnLFxuXHRcdCdiZWhhdmlvcic6ICdpZ25vcmUnLFxuXHRcdCdib2R5JzogW3RyZWVdLFxuXHRcdCdyYXcnOiBgKD86JHsgcGF0dGVybiB9KWBcblx0fTtcbn07XG5cbmNvbnN0IGNhc2VGb2xkID0gKGNvZGVQb2ludCkgPT4ge1xuXHRyZXR1cm4gaXVNYXBwaW5ncy5nZXQoY29kZVBvaW50KSB8fCBmYWxzZTtcbn07XG5cbmNvbnN0IHByb2Nlc3NDaGFyYWN0ZXJDbGFzcyA9IChjaGFyYWN0ZXJDbGFzc0l0ZW0sIHJlZ2VuZXJhdGVPcHRpb25zKSA9PiB7XG5cdGNvbnN0IHNldCA9IHJlZ2VuZXJhdGUoKTtcblx0Zm9yIChjb25zdCBpdGVtIG9mIGNoYXJhY3RlckNsYXNzSXRlbS5ib2R5KSB7XG5cdFx0c3dpdGNoIChpdGVtLnR5cGUpIHtcblx0XHRcdGNhc2UgJ3ZhbHVlJzpcblx0XHRcdFx0c2V0LmFkZChpdGVtLmNvZGVQb2ludCk7XG5cdFx0XHRcdGlmIChjb25maWcuaWdub3JlQ2FzZSAmJiBjb25maWcudW5pY29kZSAmJiAhY29uZmlnLnVzZVVuaWNvZGVGbGFnKSB7XG5cdFx0XHRcdFx0Y29uc3QgZm9sZGVkID0gY2FzZUZvbGQoaXRlbS5jb2RlUG9pbnQpO1xuXHRcdFx0XHRcdGlmIChmb2xkZWQpIHtcblx0XHRcdFx0XHRcdHNldC5hZGQoZm9sZGVkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdjaGFyYWN0ZXJDbGFzc1JhbmdlJzpcblx0XHRcdFx0Y29uc3QgbWluID0gaXRlbS5taW4uY29kZVBvaW50O1xuXHRcdFx0XHRjb25zdCBtYXggPSBpdGVtLm1heC5jb2RlUG9pbnQ7XG5cdFx0XHRcdHNldC5hZGRSYW5nZShtaW4sIG1heCk7XG5cdFx0XHRcdGlmIChjb25maWcuaWdub3JlQ2FzZSAmJiBjb25maWcudW5pY29kZSAmJiAhY29uZmlnLnVzZVVuaWNvZGVGbGFnKSB7XG5cdFx0XHRcdFx0c2V0Lml1QWRkUmFuZ2UobWluLCBtYXgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnY2hhcmFjdGVyQ2xhc3NFc2NhcGUnOlxuXHRcdFx0XHRzZXQuYWRkKGdldENoYXJhY3RlckNsYXNzRXNjYXBlU2V0KFxuXHRcdFx0XHRcdGl0ZW0udmFsdWUsXG5cdFx0XHRcdFx0Y29uZmlnLnVuaWNvZGUsXG5cdFx0XHRcdFx0Y29uZmlnLmlnbm9yZUNhc2Vcblx0XHRcdFx0KSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAndW5pY29kZVByb3BlcnR5RXNjYXBlJzpcblx0XHRcdFx0c2V0LmFkZChnZXRVbmljb2RlUHJvcGVydHlFc2NhcGVTZXQoaXRlbS52YWx1ZSwgaXRlbS5uZWdhdGl2ZSkpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdC8vIFRoZSBgZGVmYXVsdGAgY2xhdXNlIGlzIG9ubHkgaGVyZSBhcyBhIHNhZmVndWFyZDsgaXQgc2hvdWxkIG5ldmVyIGJlXG5cdFx0XHQvLyByZWFjaGVkLiBDb2RlIGNvdmVyYWdlIHRvb2xzIHNob3VsZCBpZ25vcmUgaXQuXG5cdFx0XHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHRlcm0gdHlwZTogJHsgaXRlbS50eXBlIH1gKTtcblx0XHR9XG5cdH1cblx0aWYgKGNoYXJhY3RlckNsYXNzSXRlbS5uZWdhdGl2ZSkge1xuXHRcdHVwZGF0ZShjaGFyYWN0ZXJDbGFzc0l0ZW0sIGAoPyEke3NldC50b1N0cmluZyhyZWdlbmVyYXRlT3B0aW9ucyl9KVtcXFxcc1xcXFxTXWApXG5cdH0gZWxzZSB7XG5cdFx0dXBkYXRlKGNoYXJhY3RlckNsYXNzSXRlbSwgc2V0LnRvU3RyaW5nKHJlZ2VuZXJhdGVPcHRpb25zKSk7XG5cdH1cblx0cmV0dXJuIGNoYXJhY3RlckNsYXNzSXRlbTtcbn07XG5cbmNvbnN0IHVwZGF0ZU5hbWVkUmVmZXJlbmNlID0gKGl0ZW0sIGluZGV4KSA9PiB7XG5cdGRlbGV0ZSBpdGVtLm5hbWU7XG5cdGl0ZW0ubWF0Y2hJbmRleCA9IGluZGV4O1xufTtcblxuY29uc3QgYXNzZXJ0Tm9Vbm1hdGNoZWRSZWZlcmVuY2VzID0gKGdyb3VwcykgPT4ge1xuXHRjb25zdCB1bm1hdGNoZWRSZWZlcmVuY2VzTmFtZXMgPSBPYmplY3Qua2V5cyhncm91cHMudW5tYXRjaGVkUmVmZXJlbmNlcyk7XG5cdGlmICh1bm1hdGNoZWRSZWZlcmVuY2VzTmFtZXMubGVuZ3RoID4gMCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihgVW5rbm93biBncm91cCBuYW1lczogJHt1bm1hdGNoZWRSZWZlcmVuY2VzTmFtZXN9YCk7XG5cdH1cbn07XG5cbmNvbnN0IHByb2Nlc3NUZXJtID0gKGl0ZW0sIHJlZ2VuZXJhdGVPcHRpb25zLCBncm91cHMpID0+IHtcblx0c3dpdGNoIChpdGVtLnR5cGUpIHtcblx0XHRjYXNlICdkb3QnOlxuXHRcdFx0aWYgKGNvbmZpZy51c2VEb3RBbGxGbGFnKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fSBlbHNlIGlmIChjb25maWcudW5pY29kZSkge1xuXHRcdFx0XHR1cGRhdGUoXG5cdFx0XHRcdFx0aXRlbSxcblx0XHRcdFx0XHRnZXRVbmljb2RlRG90U2V0KGNvbmZpZy5kb3RBbGwpLnRvU3RyaW5nKHJlZ2VuZXJhdGVPcHRpb25zKVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIGlmIChjb25maWcuZG90QWxsKSB7XG5cdFx0XHRcdC8vIFRPRE86IGNvbnNpZGVyIGNoYW5naW5nIHRoaXMgYXQgdGhlIHJlZ2VuZXJhdGUgbGV2ZWwuXG5cdFx0XHRcdHVwZGF0ZShpdGVtLCAnW1xcXFxzXFxcXFNdJyk7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdjaGFyYWN0ZXJDbGFzcyc6XG5cdFx0XHRpdGVtID0gcHJvY2Vzc0NoYXJhY3RlckNsYXNzKGl0ZW0sIHJlZ2VuZXJhdGVPcHRpb25zKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3VuaWNvZGVQcm9wZXJ0eUVzY2FwZSc6XG5cdFx0XHRpZiAoY29uZmlnLnVuaWNvZGVQcm9wZXJ0eUVzY2FwZSkge1xuXHRcdFx0XHR1cGRhdGUoXG5cdFx0XHRcdFx0aXRlbSxcblx0XHRcdFx0XHRnZXRVbmljb2RlUHJvcGVydHlFc2NhcGVTZXQoaXRlbS52YWx1ZSwgaXRlbS5uZWdhdGl2ZSlcblx0XHRcdFx0XHRcdC50b1N0cmluZyhyZWdlbmVyYXRlT3B0aW9ucylcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2NoYXJhY3RlckNsYXNzRXNjYXBlJzpcblx0XHRcdHVwZGF0ZShcblx0XHRcdFx0aXRlbSxcblx0XHRcdFx0Z2V0Q2hhcmFjdGVyQ2xhc3NFc2NhcGVTZXQoXG5cdFx0XHRcdFx0aXRlbS52YWx1ZSxcblx0XHRcdFx0XHRjb25maWcudW5pY29kZSxcblx0XHRcdFx0XHRjb25maWcuaWdub3JlQ2FzZVxuXHRcdFx0XHQpLnRvU3RyaW5nKHJlZ2VuZXJhdGVPcHRpb25zKVxuXHRcdFx0KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2dyb3VwJzpcblx0XHRcdGlmIChpdGVtLmJlaGF2aW9yID09ICdub3JtYWwnKSB7XG5cdFx0XHRcdGdyb3Vwcy5sYXN0SW5kZXgrKztcblx0XHRcdH1cblx0XHRcdGlmIChpdGVtLm5hbWUgJiYgY29uZmlnLm5hbWVkR3JvdXApIHtcblx0XHRcdFx0Y29uc3QgbmFtZSA9IGl0ZW0ubmFtZS52YWx1ZTtcblxuXHRcdFx0XHRpZiAoZ3JvdXBzLm5hbWVzW25hbWVdKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0YE11bHRpcGxlIGdyb3VwcyB3aXRoIHRoZSBzYW1lIG5hbWUgKCR7IG5hbWUgfSkgYXJlIG5vdCBhbGxvd2VkLmBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgaW5kZXggPSBncm91cHMubGFzdEluZGV4O1xuXHRcdFx0XHRkZWxldGUgaXRlbS5uYW1lO1xuXG5cdFx0XHRcdGdyb3Vwcy5uYW1lc1tuYW1lXSA9IGluZGV4O1xuXHRcdFx0XHRpZiAoZ3JvdXBzLm9uTmFtZWRHcm91cCkge1xuXHRcdFx0XHRcdGdyb3Vwcy5vbk5hbWVkR3JvdXAuY2FsbChudWxsLCBuYW1lLCBpbmRleCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZ3JvdXBzLnVubWF0Y2hlZFJlZmVyZW5jZXNbbmFtZV0pIHtcblx0XHRcdFx0XHRncm91cHMudW5tYXRjaGVkUmVmZXJlbmNlc1tuYW1lXS5mb3JFYWNoKHJlZmVyZW5jZSA9PiB7XG5cdFx0XHRcdFx0XHR1cGRhdGVOYW1lZFJlZmVyZW5jZShyZWZlcmVuY2UsIGluZGV4KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRkZWxldGUgZ3JvdXBzLnVubWF0Y2hlZFJlZmVyZW5jZXNbbmFtZV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlICdhbHRlcm5hdGl2ZSc6XG5cdFx0Y2FzZSAnZGlzanVuY3Rpb24nOlxuXHRcdGNhc2UgJ3F1YW50aWZpZXInOlxuXHRcdFx0aXRlbS5ib2R5ID0gaXRlbS5ib2R5Lm1hcCh0ZXJtID0+IHtcblx0XHRcdFx0cmV0dXJuIHByb2Nlc3NUZXJtKHRlcm0sIHJlZ2VuZXJhdGVPcHRpb25zLCBncm91cHMpO1xuXHRcdFx0fSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICd2YWx1ZSc6XG5cdFx0XHRjb25zdCBjb2RlUG9pbnQgPSBpdGVtLmNvZGVQb2ludDtcblx0XHRcdGNvbnN0IHNldCA9IHJlZ2VuZXJhdGUoY29kZVBvaW50KTtcblx0XHRcdGlmIChjb25maWcuaWdub3JlQ2FzZSAmJiBjb25maWcudW5pY29kZSAmJiAhY29uZmlnLnVzZVVuaWNvZGVGbGFnKSB7XG5cdFx0XHRcdGNvbnN0IGZvbGRlZCA9IGNhc2VGb2xkKGNvZGVQb2ludCk7XG5cdFx0XHRcdGlmIChmb2xkZWQpIHtcblx0XHRcdFx0XHRzZXQuYWRkKGZvbGRlZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHVwZGF0ZShpdGVtLCBzZXQudG9TdHJpbmcocmVnZW5lcmF0ZU9wdGlvbnMpKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3JlZmVyZW5jZSc6XG5cdFx0XHRpZiAoaXRlbS5uYW1lKSB7XG5cdFx0XHRcdGNvbnN0IG5hbWUgPSBpdGVtLm5hbWUudmFsdWU7XG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gZ3JvdXBzLm5hbWVzW25hbWVdO1xuXHRcdFx0XHRpZiAoaW5kZXgpIHtcblx0XHRcdFx0XHR1cGRhdGVOYW1lZFJlZmVyZW5jZShpdGVtLCBpbmRleCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIWdyb3Vwcy51bm1hdGNoZWRSZWZlcmVuY2VzW25hbWVdKSB7XG5cdFx0XHRcdFx0Z3JvdXBzLnVubWF0Y2hlZFJlZmVyZW5jZXNbbmFtZV0gPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHJlZmVyZW5jZXMgdXNlZCBiZWZvcmUgdGhlIGNvcnJlc3BvbmRpbmcgZ3JvdXAuXG5cdFx0XHRcdGdyb3Vwcy51bm1hdGNoZWRSZWZlcmVuY2VzW25hbWVdLnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdhbmNob3InOlxuXHRcdGNhc2UgJ2VtcHR5Jzpcblx0XHRjYXNlICdncm91cCc6XG5cdFx0XHQvLyBOb3RoaW5nIHRvIGRvIGhlcmUuXG5cdFx0XHRicmVhaztcblx0XHQvLyBUaGUgYGRlZmF1bHRgIGNsYXVzZSBpcyBvbmx5IGhlcmUgYXMgYSBzYWZlZ3VhcmQ7IGl0IHNob3VsZCBuZXZlciBiZVxuXHRcdC8vIHJlYWNoZWQuIENvZGUgY292ZXJhZ2UgdG9vbHMgc2hvdWxkIGlnbm9yZSBpdC5cblx0XHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdGVybSB0eXBlOiAkeyBpdGVtLnR5cGUgfWApO1xuXHR9XG5cdHJldHVybiBpdGVtO1xufTtcblxuY29uc3QgY29uZmlnID0ge1xuXHQnaWdub3JlQ2FzZSc6IGZhbHNlLFxuXHQndW5pY29kZSc6IGZhbHNlLFxuXHQnZG90QWxsJzogZmFsc2UsXG5cdCd1c2VEb3RBbGxGbGFnJzogZmFsc2UsXG5cdCd1c2VVbmljb2RlRmxhZyc6IGZhbHNlLFxuXHQndW5pY29kZVByb3BlcnR5RXNjYXBlJzogZmFsc2UsXG5cdCduYW1lZEdyb3VwJzogZmFsc2Vcbn07XG5jb25zdCByZXdyaXRlUGF0dGVybiA9IChwYXR0ZXJuLCBmbGFncywgb3B0aW9ucykgPT4ge1xuXHRjb25maWcudW5pY29kZSA9IGZsYWdzICYmIGZsYWdzLmluY2x1ZGVzKCd1Jyk7XG5cdGNvbnN0IHJlZ2pzcGFyc2VyRmVhdHVyZXMgPSB7XG5cdFx0J3VuaWNvZGVQcm9wZXJ0eUVzY2FwZSc6IGNvbmZpZy51bmljb2RlLFxuXHRcdCduYW1lZEdyb3Vwcyc6IHRydWUsXG5cdFx0J2xvb2tiZWhpbmQnOiBvcHRpb25zICYmIG9wdGlvbnMubG9va2JlaGluZFxuXHR9O1xuXHRjb25maWcuaWdub3JlQ2FzZSA9IGZsYWdzICYmIGZsYWdzLmluY2x1ZGVzKCdpJyk7XG5cdGNvbnN0IHN1cHBvcnREb3RBbGxGbGFnID0gb3B0aW9ucyAmJiBvcHRpb25zLmRvdEFsbEZsYWc7XG5cdGNvbmZpZy5kb3RBbGwgPSBzdXBwb3J0RG90QWxsRmxhZyAmJiBmbGFncyAmJiBmbGFncy5pbmNsdWRlcygncycpO1xuXHRjb25maWcubmFtZWRHcm91cCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5uYW1lZEdyb3VwO1xuXHRjb25maWcudXNlRG90QWxsRmxhZyA9IG9wdGlvbnMgJiYgb3B0aW9ucy51c2VEb3RBbGxGbGFnO1xuXHRjb25maWcudXNlVW5pY29kZUZsYWcgPSBvcHRpb25zICYmIG9wdGlvbnMudXNlVW5pY29kZUZsYWc7XG5cdGNvbmZpZy51bmljb2RlUHJvcGVydHlFc2NhcGUgPSBvcHRpb25zICYmIG9wdGlvbnMudW5pY29kZVByb3BlcnR5RXNjYXBlO1xuXHRpZiAoc3VwcG9ydERvdEFsbEZsYWcgJiYgY29uZmlnLnVzZURvdEFsbEZsYWcpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2B1c2VEb3RBbGxGbGFnYCBhbmQgYGRvdEFsbEZsYWdgIGNhbm5vdCBib3RoIGJlIHRydWUhJyk7XG5cdH1cblx0Y29uc3QgcmVnZW5lcmF0ZU9wdGlvbnMgPSB7XG5cdFx0J2hhc1VuaWNvZGVGbGFnJzogY29uZmlnLnVzZVVuaWNvZGVGbGFnLFxuXHRcdCdibXBPbmx5JzogIWNvbmZpZy51bmljb2RlXG5cdH07XG5cdGNvbnN0IGdyb3VwcyA9IHtcblx0XHQnb25OYW1lZEdyb3VwJzogb3B0aW9ucyAmJiBvcHRpb25zLm9uTmFtZWRHcm91cCxcblx0XHQnbGFzdEluZGV4JzogMCxcblx0XHQnbmFtZXMnOiBPYmplY3QuY3JlYXRlKG51bGwpLCAvLyB7IFtuYW1lXTogaW5kZXggfVxuXHRcdCd1bm1hdGNoZWRSZWZlcmVuY2VzJzogT2JqZWN0LmNyZWF0ZShudWxsKSAvLyB7IFtuYW1lXTogQXJyYXk8cmVmZXJlbmNlPiB9XG5cdH07XG5cdGNvbnN0IHRyZWUgPSBwYXJzZShwYXR0ZXJuLCBmbGFncywgcmVnanNwYXJzZXJGZWF0dXJlcyk7XG5cdC8vIE5vdGU6IGBwcm9jZXNzVGVybWAgbXV0YXRlcyBgdHJlZWAgYW5kIGBncm91cHNgLlxuXHRwcm9jZXNzVGVybSh0cmVlLCByZWdlbmVyYXRlT3B0aW9ucywgZ3JvdXBzKTtcblx0YXNzZXJ0Tm9Vbm1hdGNoZWRSZWZlcmVuY2VzKGdyb3Vwcyk7XG5cdHJldHVybiBnZW5lcmF0ZSh0cmVlKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmV3cml0ZVBhdHRlcm47XG4iLCJ2YXIgY2hhclRvSW50ZWdlciA9IHt9O1xudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcbmZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyVG9JbnRlZ2VyW2NoYXJzLmNoYXJDb2RlQXQoaSldID0gaTtcbn1cbmZ1bmN0aW9uIGRlY29kZShtYXBwaW5ncykge1xuICAgIHZhciBkZWNvZGVkID0gW107XG4gICAgdmFyIGxpbmUgPSBbXTtcbiAgICB2YXIgc2VnbWVudCA9IFtcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICBdO1xuICAgIHZhciBqID0gMDtcbiAgICBmb3IgKHZhciBpID0gMCwgc2hpZnQgPSAwLCB2YWx1ZSA9IDA7IGkgPCBtYXBwaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYyA9IG1hcHBpbmdzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjID09PSA0NCkgeyAvLyBcIixcIlxuICAgICAgICAgICAgc2VnbWVudGlmeShsaW5lLCBzZWdtZW50LCBqKTtcbiAgICAgICAgICAgIGogPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IDU5KSB7IC8vIFwiO1wiXG4gICAgICAgICAgICBzZWdtZW50aWZ5KGxpbmUsIHNlZ21lbnQsIGopO1xuICAgICAgICAgICAgaiA9IDA7XG4gICAgICAgICAgICBkZWNvZGVkLnB1c2gobGluZSk7XG4gICAgICAgICAgICBsaW5lID0gW107XG4gICAgICAgICAgICBzZWdtZW50WzBdID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpbnRlZ2VyID0gY2hhclRvSW50ZWdlcltjXTtcbiAgICAgICAgICAgIGlmIChpbnRlZ2VyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyICgnICsgU3RyaW5nLmZyb21DaGFyQ29kZShjKSArICcpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGFzQ29udGludWF0aW9uQml0ID0gaW50ZWdlciAmIDMyO1xuICAgICAgICAgICAgaW50ZWdlciAmPSAzMTtcbiAgICAgICAgICAgIHZhbHVlICs9IGludGVnZXIgPDwgc2hpZnQ7XG4gICAgICAgICAgICBpZiAoaGFzQ29udGludWF0aW9uQml0KSB7XG4gICAgICAgICAgICAgICAgc2hpZnQgKz0gNTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBzaG91bGROZWdhdGUgPSB2YWx1ZSAmIDE7XG4gICAgICAgICAgICAgICAgdmFsdWUgPj4+PSAxO1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGROZWdhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IC0weDgwMDAwMDAwIDogLXZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWdtZW50W2pdICs9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHNoaWZ0ID0gMDsgLy8gcmVzZXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWdtZW50aWZ5KGxpbmUsIHNlZ21lbnQsIGopO1xuICAgIGRlY29kZWQucHVzaChsaW5lKTtcbiAgICByZXR1cm4gZGVjb2RlZDtcbn1cbmZ1bmN0aW9uIHNlZ21lbnRpZnkobGluZSwgc2VnbWVudCwgaikge1xuICAgIC8vIFRoaXMgbG9va3MgdWdseSwgYnV0IHdlJ3JlIGNyZWF0aW5nIHNwZWNpYWxpemVkIGFycmF5cyB3aXRoIGEgc3BlY2lmaWNcbiAgICAvLyBsZW5ndGguIFRoaXMgaXMgbXVjaCBmYXN0ZXIgdGhhbiBjcmVhdGluZyBhIG5ldyBhcnJheSAod2hpY2ggdjggZXhwYW5kcyB0b1xuICAgIC8vIGEgY2FwYWNpdHkgb2YgMTcgYWZ0ZXIgcHVzaGluZyB0aGUgZmlyc3QgaXRlbSksIG9yIHNsaWNpbmcgb3V0IGEgc3ViYXJyYXlcbiAgICAvLyAod2hpY2ggaXMgc2xvdykuIExlbmd0aCA0IGlzIGFzc3VtZWQgdG8gYmUgdGhlIG1vc3QgZnJlcXVlbnQsIGZvbGxvd2VkIGJ5XG4gICAgLy8gbGVuZ3RoIDUgKHNpbmNlIG5vdCBldmVyeXRoaW5nIHdpbGwgaGF2ZSBhbiBhc3NvY2lhdGVkIG5hbWUpLCBmb2xsb3dlZCBieVxuICAgIC8vIGxlbmd0aCAxIChpdCdzIHByb2JhYmx5IHJhcmUgZm9yIGEgc291cmNlIHN1YnN0cmluZyB0byBub3QgaGF2ZSBhblxuICAgIC8vIGFzc29jaWF0ZWQgc2VnbWVudCBkYXRhKS5cbiAgICBpZiAoaiA9PT0gNClcbiAgICAgICAgbGluZS5wdXNoKFtzZWdtZW50WzBdLCBzZWdtZW50WzFdLCBzZWdtZW50WzJdLCBzZWdtZW50WzNdXSk7XG4gICAgZWxzZSBpZiAoaiA9PT0gNSlcbiAgICAgICAgbGluZS5wdXNoKFtzZWdtZW50WzBdLCBzZWdtZW50WzFdLCBzZWdtZW50WzJdLCBzZWdtZW50WzNdLCBzZWdtZW50WzRdXSk7XG4gICAgZWxzZSBpZiAoaiA9PT0gMSlcbiAgICAgICAgbGluZS5wdXNoKFtzZWdtZW50WzBdXSk7XG59XG5mdW5jdGlvbiBlbmNvZGUoZGVjb2RlZCkge1xuICAgIHZhciBzb3VyY2VGaWxlSW5kZXggPSAwOyAvLyBzZWNvbmQgZmllbGRcbiAgICB2YXIgc291cmNlQ29kZUxpbmUgPSAwOyAvLyB0aGlyZCBmaWVsZFxuICAgIHZhciBzb3VyY2VDb2RlQ29sdW1uID0gMDsgLy8gZm91cnRoIGZpZWxkXG4gICAgdmFyIG5hbWVJbmRleCA9IDA7IC8vIGZpZnRoIGZpZWxkXG4gICAgdmFyIG1hcHBpbmdzID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWNvZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBsaW5lID0gZGVjb2RlZFtpXTtcbiAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgbWFwcGluZ3MgKz0gJzsnO1xuICAgICAgICBpZiAobGluZS5sZW5ndGggPT09IDApXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgdmFyIGdlbmVyYXRlZENvZGVDb2x1bW4gPSAwOyAvLyBmaXJzdCBmaWVsZFxuICAgICAgICB2YXIgbGluZU1hcHBpbmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgbGluZV8xID0gbGluZTsgX2kgPCBsaW5lXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnbWVudCA9IGxpbmVfMVtfaV07XG4gICAgICAgICAgICB2YXIgc2VnbWVudE1hcHBpbmdzID0gZW5jb2RlSW50ZWdlcihzZWdtZW50WzBdIC0gZ2VuZXJhdGVkQ29kZUNvbHVtbik7XG4gICAgICAgICAgICBnZW5lcmF0ZWRDb2RlQ29sdW1uID0gc2VnbWVudFswXTtcbiAgICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBzZWdtZW50TWFwcGluZ3MgKz1cbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlSW50ZWdlcihzZWdtZW50WzFdIC0gc291cmNlRmlsZUluZGV4KSArXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVJbnRlZ2VyKHNlZ21lbnRbMl0gLSBzb3VyY2VDb2RlTGluZSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlSW50ZWdlcihzZWdtZW50WzNdIC0gc291cmNlQ29kZUNvbHVtbik7XG4gICAgICAgICAgICAgICAgc291cmNlRmlsZUluZGV4ID0gc2VnbWVudFsxXTtcbiAgICAgICAgICAgICAgICBzb3VyY2VDb2RlTGluZSA9IHNlZ21lbnRbMl07XG4gICAgICAgICAgICAgICAgc291cmNlQ29kZUNvbHVtbiA9IHNlZ21lbnRbM107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPT09IDUpIHtcbiAgICAgICAgICAgICAgICBzZWdtZW50TWFwcGluZ3MgKz0gZW5jb2RlSW50ZWdlcihzZWdtZW50WzRdIC0gbmFtZUluZGV4KTtcbiAgICAgICAgICAgICAgICBuYW1lSW5kZXggPSBzZWdtZW50WzRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGluZU1hcHBpbmdzLnB1c2goc2VnbWVudE1hcHBpbmdzKTtcbiAgICAgICAgfVxuICAgICAgICBtYXBwaW5ncyArPSBsaW5lTWFwcGluZ3Muam9pbignLCcpO1xuICAgIH1cbiAgICByZXR1cm4gbWFwcGluZ3M7XG59XG5mdW5jdGlvbiBlbmNvZGVJbnRlZ2VyKG51bSkge1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICBudW0gPSBudW0gPCAwID8gKC1udW0gPDwgMSkgfCAxIDogbnVtIDw8IDE7XG4gICAgZG8ge1xuICAgICAgICB2YXIgY2xhbXBlZCA9IG51bSAmIDMxO1xuICAgICAgICBudW0gPj4+PSA1O1xuICAgICAgICBpZiAobnVtID4gMCkge1xuICAgICAgICAgICAgY2xhbXBlZCB8PSAzMjtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gY2hhcnNbY2xhbXBlZF07XG4gICAgfSB3aGlsZSAobnVtID4gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IHsgZGVjb2RlLCBlbmNvZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvdXJjZW1hcC1jb2RlYy5lcy5qcy5tYXBcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5hc3NpZ247XG4iLCIvKipcbiAqIEEgc2ltcGxlIGd1YXJkIGZ1bmN0aW9uOlxuICpcbiAqIGBgYGpzXG4gKiBNYXRoLm1pbihNYXRoLm1heChsb3csIHZhbHVlKSwgaGlnaClcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBndWFyZChsb3csIGhpZ2gsIHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChsb3csIHZhbHVlKSwgaGlnaCk7XG59XG5cbmNsYXNzIENvbG9yRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGNvbG9yKSB7XG4gICAgc3VwZXIoYEZhaWxlZCB0byBwYXJzZSBjb2xvcjogXCIke2NvbG9yfVwiYCk7XG4gIH1cblxufVxuXG4vKipcbiAqIFBhcnNlcyBhIGNvbG9yIGludG8gcmVkLCBncmVlLCBibHVlLCBhbHBoYSBwYXJ0c1xuICpcbiAqIEBwYXJhbSBjb2xvciB0aGUgaW5wdXQgY29sb3IuIENhbiBiZSBhIFJHQiwgUkJHQSwgSFNMLCBIU0xBLCBvciBuYW1lZCBjb2xvclxuICovXG5cbmZ1bmN0aW9uIHBhcnNlVG9SZ2JhKGNvbG9yKSB7XG4gIGlmICh0eXBlb2YgY29sb3IgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgQ29sb3JFcnJvcihjb2xvcik7XG4gIGlmIChjb2xvci50cmltKCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RyYW5zcGFyZW50JykgcmV0dXJuIFswLCAwLCAwLCAwXTtcbiAgbGV0IG5vcm1hbGl6ZWRDb2xvciA9IGNvbG9yLnRyaW0oKTtcbiAgbm9ybWFsaXplZENvbG9yID0gbmFtZWRDb2xvclJlZ2V4LnRlc3QoY29sb3IpID8gbmFtZVRvSGV4KGNvbG9yKSA6IGNvbG9yO1xuICBjb25zdCByZWR1Y2VkSGV4TWF0Y2ggPSByZWR1Y2VkSGV4UmVnZXguZXhlYyhub3JtYWxpemVkQ29sb3IpO1xuXG4gIGlmIChyZWR1Y2VkSGV4TWF0Y2gpIHtcbiAgICBjb25zdCBhcnIgPSBBcnJheS5mcm9tKHJlZHVjZWRIZXhNYXRjaCkuc2xpY2UoMSk7XG4gICAgcmV0dXJuIFsuLi5hcnIuc2xpY2UoMCwgMykubWFwKHggPT4gcGFyc2VJbnQocih4LCAyKSwgMTYpKSwgcGFyc2VJbnQocihhcnJbM10gfHwgJ2YnLCAyKSwgMTYpIC8gMjU1XTtcbiAgfVxuXG4gIGNvbnN0IGhleE1hdGNoID0gaGV4UmVnZXguZXhlYyhub3JtYWxpemVkQ29sb3IpO1xuXG4gIGlmIChoZXhNYXRjaCkge1xuICAgIGNvbnN0IGFyciA9IEFycmF5LmZyb20oaGV4TWF0Y2gpLnNsaWNlKDEpO1xuICAgIHJldHVybiBbLi4uYXJyLnNsaWNlKDAsIDMpLm1hcCh4ID0+IHBhcnNlSW50KHgsIDE2KSksIHBhcnNlSW50KGFyclszXSB8fCAnZmYnLCAxNikgLyAyNTVdO1xuICB9XG5cbiAgY29uc3QgcmdiYU1hdGNoID0gcmdiYVJlZ2V4LmV4ZWMobm9ybWFsaXplZENvbG9yKTtcblxuICBpZiAocmdiYU1hdGNoKSB7XG4gICAgY29uc3QgYXJyID0gQXJyYXkuZnJvbShyZ2JhTWF0Y2gpLnNsaWNlKDEpO1xuICAgIHJldHVybiBbLi4uYXJyLnNsaWNlKDAsIDMpLm1hcCh4ID0+IHBhcnNlSW50KHgsIDEwKSksIHBhcnNlRmxvYXQoYXJyWzNdIHx8ICcxJyldO1xuICB9XG5cbiAgY29uc3QgaHNsYU1hdGNoID0gaHNsYVJlZ2V4LmV4ZWMobm9ybWFsaXplZENvbG9yKTtcblxuICBpZiAoaHNsYU1hdGNoKSB7XG4gICAgY29uc3QgW2gsIHMsIGwsIGFdID0gQXJyYXkuZnJvbShoc2xhTWF0Y2gpLnNsaWNlKDEpLm1hcChwYXJzZUZsb2F0KTtcbiAgICBpZiAoZ3VhcmQoMCwgMTAwLCBzKSAhPT0gcykgdGhyb3cgbmV3IENvbG9yRXJyb3IoY29sb3IpO1xuICAgIGlmIChndWFyZCgwLCAxMDAsIGwpICE9PSBsKSB0aHJvdyBuZXcgQ29sb3JFcnJvcihjb2xvcik7XG4gICAgcmV0dXJuIFsuLi5oc2xUb1JnYihoLCBzLCBsKSwgYSB8fCAxXTtcbiAgfVxuXG4gIHRocm93IG5ldyBDb2xvckVycm9yKGNvbG9yKTtcbn1cblxuZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgbGV0IGhhc2ggPSA1MzgxO1xuICBsZXQgaSA9IHN0ci5sZW5ndGg7XG5cbiAgd2hpbGUgKGkpIHtcbiAgICBoYXNoID0gaGFzaCAqIDMzIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuICAvKiBKYXZhU2NyaXB0IGRvZXMgYml0d2lzZSBvcGVyYXRpb25zIChsaWtlIFhPUiwgYWJvdmUpIG9uIDMyLWJpdCBzaWduZWRcbiAgICogaW50ZWdlcnMuIFNpbmNlIHdlIHdhbnQgdGhlIHJlc3VsdHMgdG8gYmUgYWx3YXlzIHBvc2l0aXZlLCBjb252ZXJ0IHRoZVxuICAgKiBzaWduZWQgaW50IHRvIGFuIHVuc2lnbmVkIGJ5IGRvaW5nIGFuIHVuc2lnbmVkIGJpdHNoaWZ0LiAqL1xuXG5cbiAgcmV0dXJuIChoYXNoID4+PiAwKSAlIDIzNDE7XG59XG5cbmNvbnN0IGNvbG9yVG9JbnQgPSB4ID0+IHBhcnNlSW50KHgucmVwbGFjZSgvXy9nLCAnJyksIDM2KTtcblxuY29uc3QgY29tcHJlc3NlZENvbG9yTWFwID0gJzFxMjllaGhiIDFuMDlzZ2s3IDFrbDFla2ZfIF95bDR6c25vIDE2ejllaXYzIDFwMjlsaHA4IF9iZDl6ZzA0IDE3dTBfX19fIF9pdzl6aGU1IF90bzczX19fIF9yNDVlMzFlIF83bDZnMDE2IF9qaDhvdWl2IF96bjNxYmE4IDFqeTR6c2hzIDExdTg3azB1IDFybzl5dnlvIDFhajN4YWVsIDFnejl6anowIF8zdzhsNHhvIDFiZjFla2ZfIF9rZTN2X19fIF80cnJrYl9fIDEzajc3Nnl6IF82NDZtYmhsIF9ucmpyNF9fIF9sZTZtYmhsIDFuMzdlaGtiIF9tNzVmOTFuIF9xajNiemZ6IDE5Mzl5eWd3IDExaTV6Nng4IF8xazVmOHhzIDE1MDk0NDFtIDE1dDVsd2dmIF9hZTJ0aDFuIF90ZzF1Z2N2IDFscDF1Z2N2IDE2ZTE0dXBfIF9oNTVydzduIF9ueTl5YXZuIF83YTExeGJfIDFpaDQ0Mmc5IF9wdjQ0Mmc5IDFtdjE2eG9mIDE0ZTZ5N3R1IDFvbzl6a2RzIDE3ZDFjaXNpIF80djl5NzBmIF95OThtOGtjIDEwMTlwcTB2IDEybzl6ZGE4IF8zNDhqNGY0IDFldDUwaTJvIF84ZXBhOF9fIF90czZzZW5qIDFvMzUwaTJvIDFtaTllaXVvIDEyNTl5cnAwIDFsbjgwZ253IF82MzJ4Y295IDFjbjl6bGRjIF9mMjllZHU0IDFuNDkwYzhxIF85Zjl6aWV0IDFiOTR2azc0IF9tNDl6a2N0IDFrejZzNzNhIDFldTlkdG9nIF9xNThzMXJ6IDFkeTlzamlxIF9fdTg5am8zIF9hajVua3dnIF9sZDg5am8zIDEzaDl6Nnd4IF9xYTl6MmlpIF9sMTE5eGdxIF9iczVhcmp1IDFoajRud2s5IDFxdDRud2s5IDFnZTZ3YXU2IDE0ajl6bGN3IDExcDFlZGNfIF9tczF6Y3hlIF80MzlzaGs2IF9qdDl5NzBmIF83NTR6c293IDFsYTQwZWp1IF9vcTVwX19fIF94Mjc5cWt6IDFmYTVyM3J2IF95ZDJkOWlwIF80MjR0Y2t1IF84eTFkaTJfIF96aTJ1YWJ3IF95eTdybjloIDEyeXo5ODBfIF9fMzlsanA2IDFiNTl6ZzB4IF9uMzl6ZnpwIDFmeTl6ZXN0IF9iMzNrX19fIF9ocDl3cTkyIDFpbDUwaHo0IF9pbzQ3MnViIF9sajl6M2VvIDE5ejl5a2cwIF84dDhpdTNhIDEyYjlibDRhIDFhazV5dzBvIF84OTZ2NGt1IF90YjhrOGx2IF9zNTl6aTZ0IF9jMDl6ZTBwIDFsZzgwb3FuIDFpZDl6OHdiIF8yMzhuYmE1IDFrcTZ3Z2RpIF8xNTR6c3NnIF90bjN6azQ5IF9kYTl5NnRjIDFzZzdjdjRmIF9yMTJqdnR0IDFncTVmbWt6IDFjczlydmNpIF9scDlqbjFjIF94dzF0ZG5iIDEzZjl6amU2IDE2ZjY5NzNoIF92bzdpcjQwIF9idDVhcmpmIF9yYzQ1ZTR0IF9ocjRlMTAwIDEwdjRlMTAwIF9oYzl6a2UyIF93OTFlZ3ZfIF9zajJyMWtrIDEzYzg3eXg4IF92cXBkc19fIF9uaThnZ2s4IF90ajl5cWZiIDFpYTJqNHI0IF83eDliMTB1IDFmYzlsZDRqIDFlcTl6bGRyIF81ajlsaHB4IF9lejl6bDZvIF9tZDYxZnptJy5zcGxpdCgnICcpLnJlZHVjZSgoYWNjLCBuZXh0KSA9PiB7XG4gIGFjY1tjb2xvclRvSW50KG5leHQuc3Vic3RyaW5nKDAsIDMpKV0gPSBjb2xvclRvSW50KG5leHQuc3Vic3RyaW5nKDMpKS50b1N0cmluZygxNikucGFkU3RhcnQoNiwgJzAnKTtcbiAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RyaW5nIGlzIGEgQ1NTIG5hbWVkIGNvbG9yIGFuZCByZXR1cm5zIGl0cyBlcXVpdmFsZW50IGhleCB2YWx1ZSwgb3RoZXJ3aXNlIHJldHVybnMgdGhlIG9yaWdpbmFsIGNvbG9yLlxuICovXG5cbmZ1bmN0aW9uIG5hbWVUb0hleChjb2xvcikge1xuICBjb25zdCBub3JtYWxpemVkQ29sb3JOYW1lID0gY29sb3IudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gIGNvbnN0IHJlc3VsdCA9IGNvbXByZXNzZWRDb2xvck1hcFtoYXNoKG5vcm1hbGl6ZWRDb2xvck5hbWUpXTtcbiAgaWYgKCFyZXN1bHQpIHRocm93IG5ldyBDb2xvckVycm9yKGNvbG9yKTtcbiAgcmV0dXJuIGAjJHtyZXN1bHR9YDtcbn1cblxuY29uc3QgciA9IChzdHIsIGFtb3VudCkgPT4gQXJyYXkuZnJvbShBcnJheShhbW91bnQpKS5tYXAoKCkgPT4gc3RyKS5qb2luKCcnKTtcblxuY29uc3QgcmVkdWNlZEhleFJlZ2V4ID0gbmV3IFJlZ0V4cChgXiMke3IoJyhbYS1mMC05XSknLCAzKX0oW2EtZjAtOV0pPyRgLCAnaScpO1xuY29uc3QgaGV4UmVnZXggPSBuZXcgUmVnRXhwKGBeIyR7cignKFthLWYwLTldezJ9KScsIDMpfShbYS1mMC05XXsyfSk/JGAsICdpJyk7XG5jb25zdCByZ2JhUmVnZXggPSBuZXcgUmVnRXhwKGBecmdiYT9cXFxcKFxcXFxzKihcXFxcZCspXFxcXHMqJHtyKCcsXFxcXHMqKFxcXFxkKylcXFxccyonLCAyKX0oPzosXFxcXHMqKFtcXFxcZC5dKykpP1xcXFxzKlxcXFwpJGAsICdpJyk7XG5jb25zdCBoc2xhUmVnZXggPSAvXmhzbGE/XFwoXFxzKihbXFxkLl0rKVxccyosXFxzKihbXFxkLl0rKSVcXHMqLFxccyooW1xcZC5dKyklKD86XFxzKixcXHMqKFtcXGQuXSspKT9cXHMqXFwpJC9pO1xuY29uc3QgbmFtZWRDb2xvclJlZ2V4ID0gL15bYS16XSskL2k7XG5cbmNvbnN0IHJvdW5kQ29sb3IgPSBjb2xvciA9PiB7XG4gIHJldHVybiBNYXRoLnJvdW5kKGNvbG9yICogMjU1KTtcbn07XG5cbmNvbnN0IGhzbFRvUmdiID0gKGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzKSA9PiB7XG4gIGxldCBsID0gbGlnaHRuZXNzIC8gMTAwO1xuXG4gIGlmIChzYXR1cmF0aW9uID09PSAwKSB7XG4gICAgLy8gYWNocm9tYXRpY1xuICAgIHJldHVybiBbbCwgbCwgbF0ubWFwKHJvdW5kQ29sb3IpO1xuICB9IC8vIGZvcm11bGFlIGZyb20gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSFNMX2FuZF9IU1ZcblxuXG4gIGNvbnN0IGh1ZVByaW1lID0gKGh1ZSAlIDM2MCArIDM2MCkgJSAzNjAgLyA2MDtcbiAgY29uc3QgY2hyb21hID0gKDEgLSBNYXRoLmFicygyICogbCAtIDEpKSAqIChzYXR1cmF0aW9uIC8gMTAwKTtcbiAgY29uc3Qgc2Vjb25kQ29tcG9uZW50ID0gY2hyb21hICogKDEgLSBNYXRoLmFicyhodWVQcmltZSAlIDIgLSAxKSk7XG4gIGxldCByZWQgPSAwO1xuICBsZXQgZ3JlZW4gPSAwO1xuICBsZXQgYmx1ZSA9IDA7XG5cbiAgaWYgKGh1ZVByaW1lID49IDAgJiYgaHVlUHJpbWUgPCAxKSB7XG4gICAgcmVkID0gY2hyb21hO1xuICAgIGdyZWVuID0gc2Vjb25kQ29tcG9uZW50O1xuICB9IGVsc2UgaWYgKGh1ZVByaW1lID49IDEgJiYgaHVlUHJpbWUgPCAyKSB7XG4gICAgcmVkID0gc2Vjb25kQ29tcG9uZW50O1xuICAgIGdyZWVuID0gY2hyb21hO1xuICB9IGVsc2UgaWYgKGh1ZVByaW1lID49IDIgJiYgaHVlUHJpbWUgPCAzKSB7XG4gICAgZ3JlZW4gPSBjaHJvbWE7XG4gICAgYmx1ZSA9IHNlY29uZENvbXBvbmVudDtcbiAgfSBlbHNlIGlmIChodWVQcmltZSA+PSAzICYmIGh1ZVByaW1lIDwgNCkge1xuICAgIGdyZWVuID0gc2Vjb25kQ29tcG9uZW50O1xuICAgIGJsdWUgPSBjaHJvbWE7XG4gIH0gZWxzZSBpZiAoaHVlUHJpbWUgPj0gNCAmJiBodWVQcmltZSA8IDUpIHtcbiAgICByZWQgPSBzZWNvbmRDb21wb25lbnQ7XG4gICAgYmx1ZSA9IGNocm9tYTtcbiAgfSBlbHNlIGlmIChodWVQcmltZSA+PSA1ICYmIGh1ZVByaW1lIDwgNikge1xuICAgIHJlZCA9IGNocm9tYTtcbiAgICBibHVlID0gc2Vjb25kQ29tcG9uZW50O1xuICB9XG5cbiAgY29uc3QgbGlnaHRuZXNzTW9kaWZpY2F0aW9uID0gbCAtIGNocm9tYSAvIDI7XG4gIGNvbnN0IGZpbmFsUmVkID0gcmVkICsgbGlnaHRuZXNzTW9kaWZpY2F0aW9uO1xuICBjb25zdCBmaW5hbEdyZWVuID0gZ3JlZW4gKyBsaWdodG5lc3NNb2RpZmljYXRpb247XG4gIGNvbnN0IGZpbmFsQmx1ZSA9IGJsdWUgKyBsaWdodG5lc3NNb2RpZmljYXRpb247XG4gIHJldHVybiBbZmluYWxSZWQsIGZpbmFsR3JlZW4sIGZpbmFsQmx1ZV0ubWFwKHJvdW5kQ29sb3IpO1xufTtcblxuLy8gdGFrZW4gZnJvbTpcbi8qKlxuICogUGFyc2VzIGEgY29sb3IgaW4gaHVlLCBzYXR1cmF0aW9uLCBsaWdodG5lc3MsIGFuZCB0aGUgYWxwaGEgY2hhbm5lbC5cbiAqXG4gKiBIdWUgaXMgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAzNjAsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcywgYW5kIGFscGhhIGFyZVxuICogZGVjaW1hbCBwZXJjZW50YWdlcyBiZXR3ZWVuIDAgYW5kIDFcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVRvSHNsYShjb2xvcikge1xuICBjb25zdCBbcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGFdID0gcGFyc2VUb1JnYmEoY29sb3IpLm1hcCgodmFsdWUsIGluZGV4KSA9PiAvLyAzcmQgaW5kZXggaXMgYWxwaGEgY2hhbm5lbCB3aGljaCBpcyBhbHJlYWR5IG5vcm1hbGl6ZWRcbiAgaW5kZXggPT09IDMgPyB2YWx1ZSA6IHZhbHVlIC8gMjU1KTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgocmVkLCBncmVlbiwgYmx1ZSk7XG4gIGNvbnN0IG1pbiA9IE1hdGgubWluKHJlZCwgZ3JlZW4sIGJsdWUpO1xuICBjb25zdCBsaWdodG5lc3MgPSAobWF4ICsgbWluKSAvIDI7IC8vIGFjaHJvbWF0aWNcblxuICBpZiAobWF4ID09PSBtaW4pIHJldHVybiBbMCwgMCwgbGlnaHRuZXNzLCBhbHBoYV07XG4gIGNvbnN0IGRlbHRhID0gbWF4IC0gbWluO1xuICBjb25zdCBzYXR1cmF0aW9uID0gbGlnaHRuZXNzID4gMC41ID8gZGVsdGEgLyAoMiAtIG1heCAtIG1pbikgOiBkZWx0YSAvIChtYXggKyBtaW4pO1xuICBjb25zdCBodWUgPSA2MCAqIChyZWQgPT09IG1heCA/IChncmVlbiAtIGJsdWUpIC8gZGVsdGEgKyAoZ3JlZW4gPCBibHVlID8gNiA6IDApIDogZ3JlZW4gPT09IG1heCA/IChibHVlIC0gcmVkKSAvIGRlbHRhICsgMiA6IChyZWQgLSBncmVlbikgLyBkZWx0YSArIDQpO1xuICByZXR1cm4gW2h1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzLCBhbHBoYV07XG59XG5cbi8qKlxuICogVGFrZXMgaW4gaHNsYSBwYXJ0cyBhbmQgY29uc3RydWN0cyBhbiBoc2xhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSBodWUgVGhlIGNvbG9yIGNpcmNsZSAoZnJvbSAwIHRvIDM2MCkgLSAwIChvciAzNjApIGlzIHJlZCwgMTIwIGlzIGdyZWVuLCAyNDAgaXMgYmx1ZVxuICogQHBhcmFtIHNhdHVyYXRpb24gUGVyY2VudGFnZSBvZiBzYXR1cmF0aW9uLCBnaXZlbiBhcyBhIGRlY2ltYWwgYmV0d2VlbiAwIGFuZCAxXG4gKiBAcGFyYW0gbGlnaHRuZXNzIFBlcmNlbnRhZ2Ugb2YgbGlnaHRuZXNzLCBnaXZlbiBhcyBhIGRlY2ltYWwgYmV0d2VlbiAwIGFuZCAxXG4gKiBAcGFyYW0gYWxwaGEgUGVyY2VudGFnZSBvZiBvcGFjaXR5LCBnaXZlbiBhcyBhIGRlY2ltYWwgYmV0d2VlbiAwIGFuZCAxXG4gKi9cblxuZnVuY3Rpb24gaHNsYShodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcywgYWxwaGEpIHtcbiAgcmV0dXJuIGBoc2xhKCR7KGh1ZSAlIDM2MCkudG9GaXhlZCgpfSwgJHtndWFyZCgwLCAxMDAsIHNhdHVyYXRpb24gKiAxMDApLnRvRml4ZWQoKX0lLCAke2d1YXJkKDAsIDEwMCwgbGlnaHRuZXNzICogMTAwKS50b0ZpeGVkKCl9JSwgJHtwYXJzZUZsb2F0KGd1YXJkKDAsIDEsIGFscGhhKS50b0ZpeGVkKDMpKX0pYDtcbn1cblxuLyoqXG4gKiBBZGp1c3RzIHRoZSBjdXJyZW50IGh1ZSBvZiB0aGUgY29sb3IgYnkgdGhlIGdpdmVuIGRlZ3JlZXMuIFdyYXBzIGFyb3VuZCB3aGVuXG4gKiBvdmVyIDM2MC5cbiAqXG4gKiBAcGFyYW0gY29sb3IgaW5wdXQgY29sb3JcbiAqIEBwYXJhbSBkZWdyZWVzIGRlZ3JlZXMgdG8gYWRqdXN0IHRoZSBpbnB1dCBjb2xvciwgYWNjZXB0cyBkZWdyZWUgaW50ZWdlcnNcbiAqICgwIC0gMzYwKSBhbmQgd3JhcHMgYXJvdW5kIG9uIG92ZXJmbG93XG4gKi9cblxuZnVuY3Rpb24gYWRqdXN0SHVlKGNvbG9yLCBkZWdyZWVzKSB7XG4gIGNvbnN0IFtoLCBzLCBsLCBhXSA9IHBhcnNlVG9Ic2xhKGNvbG9yKTtcbiAgcmV0dXJuIGhzbGEoaCArIGRlZ3JlZXMsIHMsIGwsIGEpO1xufVxuXG4vKipcbiAqIERhcmtlbnMgdXNpbmcgbGlnaHRuZXNzLiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gc3VidHJhY3RpbmcgdGhlIGxpZ2h0bmVzc1xuICogZnJvbSB0aGUgTCBpbiBIU0wuXG4gKlxuICogQHBhcmFtIGFtb3VudCB0aGUgYW1vdW50IHRvIGRhcmtlbiwgZ2l2ZW4gYXMgYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMVxuICovXG5cbmZ1bmN0aW9uIGRhcmtlbihjb2xvciwgYW1vdW50KSB7XG4gIGNvbnN0IFtodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcywgYWxwaGFdID0gcGFyc2VUb0hzbGEoY29sb3IpO1xuICByZXR1cm4gaHNsYShodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcyAtIGFtb3VudCwgYWxwaGEpO1xufVxuXG4vKipcbiAqIERlc2F0dXJhdGVzIHRoZSBpbnB1dCBjb2xvciBieSB0aGUgZ2l2ZW4gYW1vdW50IHZpYSBzdWJ0cmFjdGluZyBmcm9tIHRoZSBgc2BcbiAqIGluIGBoc2xhYC5cbiAqXG4gKiBAcGFyYW0gYW1vdW50IGFtb3VudCB0byBkZXNhdHVyYXRlLCBnaXZlbiBhcyBhIGRlY2ltYWwgYmV0d2VlbiAwIGFuZCAxXG4gKi9cblxuZnVuY3Rpb24gZGVzYXR1cmF0ZShjb2xvciwgYW1vdW50KSB7XG4gIGNvbnN0IFtoLCBzLCBsLCBhXSA9IHBhcnNlVG9Ic2xhKGNvbG9yKTtcbiAgcmV0dXJuIGhzbGEoaCwgcyAtIGFtb3VudCwgbCwgYSk7XG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9wb2xpc2hlZC9ibG9iLzA3NjRjOTgyNTUxYjQ4NzQ2OTA0M2FjYjU2MjgxYjAzNThiMzEwN2Ivc3JjL2NvbG9yL2dldEx1bWluYW5jZS5qc1xuXG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgKGZsb2F0KSByZXByZXNlbnRpbmcgdGhlIGx1bWluYW5jZSBvZiBhIGNvbG9yLlxuICovXG5cbmZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBpZiAoY29sb3IgPT09ICd0cmFuc3BhcmVudCcpIHJldHVybiAwO1xuXG4gIGZ1bmN0aW9uIGYoeCkge1xuICAgIGNvbnN0IGNoYW5uZWwgPSB4IC8gMjU1O1xuICAgIHJldHVybiBjaGFubmVsIDw9IDAuMDM5MjggPyBjaGFubmVsIC8gMTIuOTIgOiAoKGNoYW5uZWwgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40O1xuICB9XG5cbiAgY29uc3QgW3IsIGcsIGJdID0gcGFyc2VUb1JnYmEoY29sb3IpO1xuICByZXR1cm4gMC4yMTI2ICogZihyKSArIDAuNzE1MiAqIGYoZykgKyAwLjA3MjIgKiBmKGIpO1xufVxuXG4vLyB0YWtlbiBmcm9tOlxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMgYmFzZWQgb25cbiAqIFtXMydzIHJlY29tbWVuZGVkIGVxdWF0aW9uIGZvciBjYWxjdWxhdGluZyBjb250cmFzdF0oaHR0cDovL3d3dy53My5vcmcvVFIvV0NBRzIwLyNjb250cmFzdC1yYXRpb2RlZikuXG4gKi9cblxuZnVuY3Rpb24gZ2V0Q29udHJhc3QoY29sb3IxLCBjb2xvcjIpIHtcbiAgY29uc3QgbHVtaW5hbmNlMSA9IGdldEx1bWluYW5jZShjb2xvcjEpO1xuICBjb25zdCBsdW1pbmFuY2UyID0gZ2V0THVtaW5hbmNlKGNvbG9yMik7XG4gIHJldHVybiBsdW1pbmFuY2UxID4gbHVtaW5hbmNlMiA/IChsdW1pbmFuY2UxICsgMC4wNSkgLyAobHVtaW5hbmNlMiArIDAuMDUpIDogKGx1bWluYW5jZTIgKyAwLjA1KSAvIChsdW1pbmFuY2UxICsgMC4wNSk7XG59XG5cbi8qKlxuICogVGFrZXMgaW4gcmdiYSBwYXJ0cyBhbmQgcmV0dXJucyBhbiByZ2JhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSByZWQgVGhlIGFtb3VudCBvZiByZWQgaW4gdGhlIHJlZCBjaGFubmVsLCBnaXZlbiBpbiBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDI1NSBpbmNsdXNpdmVcbiAqIEBwYXJhbSBncmVlbiBUaGUgYW1vdW50IG9mIGdyZWVuIGluIHRoZSByZWQgY2hhbm5lbCwgZ2l2ZW4gaW4gYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAyNTUgaW5jbHVzaXZlXG4gKiBAcGFyYW0gYmx1ZSBUaGUgYW1vdW50IG9mIGJsdWUgaW4gdGhlIHJlZCBjaGFubmVsLCBnaXZlbiBpbiBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDI1NSBpbmNsdXNpdmVcbiAqIEBwYXJhbSBhbHBoYSBQZXJjZW50YWdlIG9mIG9wYWNpdHksIGdpdmVuIGFzIGEgZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDFcbiAqL1xuXG5mdW5jdGlvbiByZ2JhKHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhKSB7XG4gIHJldHVybiBgcmdiYSgke2d1YXJkKDAsIDI1NSwgcmVkKS50b0ZpeGVkKCl9LCAke2d1YXJkKDAsIDI1NSwgZ3JlZW4pLnRvRml4ZWQoKX0sICR7Z3VhcmQoMCwgMjU1LCBibHVlKS50b0ZpeGVkKCl9LCAke3BhcnNlRmxvYXQoZ3VhcmQoMCwgMSwgYWxwaGEpLnRvRml4ZWQoMykpfSlgO1xufVxuXG4vKipcbiAqIE1peGVzIHR3byBjb2xvcnMgdG9nZXRoZXIuIFRha2VuIGZyb20gc2FzcydzIGltcGxlbWVudGF0aW9uLlxuICovXG5cbmZ1bmN0aW9uIG1peChjb2xvcjEsIGNvbG9yMiwgd2VpZ2h0KSB7XG4gIGNvbnN0IG5vcm1hbGl6ZSA9IChuLCBpbmRleCkgPT4gLy8gM3JkIGluZGV4IGlzIGFscGhhIGNoYW5uZWwgd2hpY2ggaXMgYWxyZWFkeSBub3JtYWxpemVkXG4gIGluZGV4ID09PSAzID8gbiA6IG4gLyAyNTU7XG5cbiAgY29uc3QgW3IxLCBnMSwgYjEsIGExXSA9IHBhcnNlVG9SZ2JhKGNvbG9yMSkubWFwKG5vcm1hbGl6ZSk7XG4gIGNvbnN0IFtyMiwgZzIsIGIyLCBhMl0gPSBwYXJzZVRvUmdiYShjb2xvcjIpLm1hcChub3JtYWxpemUpOyAvLyBUaGUgZm9ybXVsYSBpcyBjb3BpZWQgZnJvbSB0aGUgb3JpZ2luYWwgU2FzcyBpbXBsZW1lbnRhdGlvbjpcbiAgLy8gaHR0cDovL3Nhc3MtbGFuZy5jb20vZG9jdW1lbnRhdGlvbi9TYXNzL1NjcmlwdC9GdW5jdGlvbnMuaHRtbCNtaXgtaW5zdGFuY2VfbWV0aG9kXG5cbiAgY29uc3QgYWxwaGFEZWx0YSA9IGEyIC0gYTE7XG4gIGNvbnN0IHggPSB3ZWlnaHQgKiAyIC0gMTtcbiAgY29uc3QgeSA9IHggKiBhbHBoYURlbHRhID09PSAtMSA/IHggOiB4ICsgYWxwaGFEZWx0YTtcbiAgY29uc3QgeiA9IDEgKyB4ICogYWxwaGFEZWx0YTtcbiAgY29uc3Qgd2VpZ2h0MiA9ICh5IC8geiArIDEpIC8gMi4wO1xuICBjb25zdCB3ZWlnaHQxID0gMSAtIHdlaWdodDI7XG4gIGNvbnN0IHIgPSAocjEgKiB3ZWlnaHQxICsgcjIgKiB3ZWlnaHQyKSAqIDI1NTtcbiAgY29uc3QgZyA9IChnMSAqIHdlaWdodDEgKyBnMiAqIHdlaWdodDIpICogMjU1O1xuICBjb25zdCBiID0gKGIxICogd2VpZ2h0MSArIGIyICogd2VpZ2h0MikgKiAyNTU7XG4gIGNvbnN0IGEgPSBhMiAqIHdlaWdodCArIGExICogKDEgLSB3ZWlnaHQpO1xuICByZXR1cm4gcmdiYShyLCBnLCBiLCBhKTtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIHNlcmllcyBjb2xvcnMsIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gYSBgc2NhbGUoeClgIGZ1bmN0aW9uIHRoYXRcbiAqIGFjY2VwdHMgYSBwZXJjZW50YWdlIGFzIGEgZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDEgYW5kIHJldHVybnMgdGhlIGNvbG9yIGF0XG4gKiB0aGF0IHBlcmNlbnRhZ2UgaW4gdGhlIHNjYWxlLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBzY2FsZSA9IGdldFNjYWxlKCdyZWQnLCAneWVsbG93JywgJ2dyZWVuJyk7XG4gKiBjb25zb2xlLmxvZyhzY2FsZSgwKSk7IC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICogY29uc29sZS5sb2coc2NhbGUoMC41KSk7IC8vIHJnYmEoMjU1LCAyNTUsIDAsIDEpXG4gKiBjb25zb2xlLmxvZyhzY2FsZSgxKSk7IC8vIHJnYmEoMCwgMTI4LCAwLCAxKVxuICogYGBgXG4gKlxuICogSWYgeW91J2QgbGlrZSB0byBsaW1pdCB0aGUgZG9tYWluIGFuZCByYW5nZSBsaWtlIGNocm9tYS1qcywgd2UgcmVjb21tZW5kXG4gKiB3cmFwcGluZyBzY2FsZSBhZ2Fpbi5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgX3NjYWxlID0gZ2V0U2NhbGUoJ3JlZCcsICd5ZWxsb3cnLCAnZ3JlZW4nKTtcbiAqIGNvbnN0IHNjYWxlID0geCA9PiBfc2NhbGUoeCAvIDEwMCk7XG4gKlxuICogY29uc29sZS5sb2coc2NhbGUoMCkpOyAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAqIGNvbnNvbGUubG9nKHNjYWxlKDUwKSk7IC8vIHJnYmEoMjU1LCAyNTUsIDAsIDEpXG4gKiBjb25zb2xlLmxvZyhzY2FsZSgxMDApKTsgLy8gcmdiYSgwLCAxMjgsIDAsIDEpXG4gKiBgYGBcbiAqL1xuXG5mdW5jdGlvbiBnZXRTY2FsZSguLi5jb2xvcnMpIHtcbiAgcmV0dXJuIG4gPT4ge1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IGNvbG9ycy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGxvd0luZGV4ID0gZ3VhcmQoMCwgbGFzdEluZGV4LCBNYXRoLmZsb29yKG4gKiBsYXN0SW5kZXgpKTtcbiAgICBjb25zdCBoaWdoSW5kZXggPSBndWFyZCgwLCBsYXN0SW5kZXgsIE1hdGguY2VpbChuICogbGFzdEluZGV4KSk7XG4gICAgY29uc3QgY29sb3IxID0gY29sb3JzW2xvd0luZGV4XTtcbiAgICBjb25zdCBjb2xvcjIgPSBjb2xvcnNbaGlnaEluZGV4XTtcbiAgICBjb25zdCB1bml0ID0gMSAvIGxhc3RJbmRleDtcbiAgICBjb25zdCB3ZWlnaHQgPSAobiAtIHVuaXQgKiBsb3dJbmRleCkgLyB1bml0O1xuICAgIHJldHVybiBtaXgoY29sb3IxLCBjb2xvcjIsIHdlaWdodCk7XG4gIH07XG59XG5cbmNvbnN0IGd1aWRlbGluZXMgPSB7XG4gIGRlY29yYXRpdmU6IDEuNSxcbiAgcmVhZGFibGU6IDMsXG4gIGFhOiA0LjUsXG4gIGFhYTogN1xufTtcbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBhIGNvbG9yIGhhcyBiYWQgY29udHJhc3QgYWNjb3JkaW5nIHRvIGEgZ2l2ZW4gc3RhbmRhcmRcbiAqL1xuXG5mdW5jdGlvbiBoYXNCYWRDb250cmFzdChjb2xvciwgc3RhbmRhcmQgPSAnYWEnKSB7XG4gIHJldHVybiBnZXRDb250cmFzdChjb2xvciwgJyNmZmYnKSA8IGd1aWRlbGluZXNbc3RhbmRhcmRdO1xufVxuXG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IgYnkgYSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICogYGRhcmtlbihjb2xvciwgLWFtb3VudClgXG4gKlxuICogQHBhcmFtIGFtb3VudCB0aGUgYW1vdW50IHRvIGRhcmtlbiwgZ2l2ZW4gYXMgYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMVxuICovXG5cbmZ1bmN0aW9uIGxpZ2h0ZW4oY29sb3IsIGFtb3VudCkge1xuICByZXR1cm4gZGFya2VuKGNvbG9yLCAtYW1vdW50KTtcbn1cblxuLyoqXG4gKiBUYWtlcyBpbiBhIGNvbG9yIGFuZCBtYWtlcyBpdCBtb3JlIHRyYW5zcGFyZW50IGJ5IGNvbnZlcnQgdG8gYHJnYmFgIGFuZFxuICogZGVjcmVhc2luZyB0aGUgYW1vdW50IGluIHRoZSBhbHBoYSBjaGFubmVsLlxuICpcbiAqIEBwYXJhbSBhbW91bnQgdGhlIGFtb3VudCB0byBkYXJrZW4sIGdpdmVuIGFzIGEgZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDFcbiAqL1xuXG5mdW5jdGlvbiB0cmFuc3BhcmVudGl6ZShjb2xvciwgYW1vdW50KSB7XG4gIGNvbnN0IFtyLCBnLCBiLCBhXSA9IHBhcnNlVG9SZ2JhKGNvbG9yKTtcbiAgcmV0dXJuIHJnYmEociwgZywgYiwgYSAtIGFtb3VudCk7XG59XG5cbi8qKlxuICogVGFrZXMgYSBjb2xvciBhbmQgdW4tdHJhbnNwYXJlbnRpemVzIGl0LiBFcXVpdmFsZW50IHRvXG4gKiBgdHJhbnNwYXJlbnRpemUoY29sb3IsIC1hbW91bnQpYFxuICpcbiAqIEBwYXJhbSBhbW91bnQgdGhlIGFtb3VudCB0byBkYXJrZW4sIGdpdmVuIGFzIGEgZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDFcbiAqL1xuXG5mdW5jdGlvbiBvcGFjaWZ5KGNvbG9yLCBhbW91bnQpIHtcbiAgcmV0dXJuIHRyYW5zcGFyZW50aXplKGNvbG9yLCAtYW1vdW50KTtcbn1cblxuLyoqXG4gKiBBbiBhbHRlcm5hdGl2ZSBmdW5jdGlvbiB0byBgcmVhZGFibGVDb2xvcmAuIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIFxuICogcmVhZGFibGUgY29sb3IgKGkuZS4gdGhlIGNvbG9yIHRvIGJlIHBsYWNlIG9uIHRvcCB0aGUgaW5wdXQgY29sb3IpIHNob3VsZCBiZVxuICogYmxhY2suXG4gKi9cblxuZnVuY3Rpb24gcmVhZGFibGVDb2xvcklzQmxhY2soY29sb3IpIHtcbiAgcmV0dXJuIGdldEx1bWluYW5jZShjb2xvcikgPiAwLjE3OTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGJsYWNrIG9yIHdoaXRlIGZvciBiZXN0IGNvbnRyYXN0IGRlcGVuZGluZyBvbiB0aGUgbHVtaW5vc2l0eSBvZiB0aGVcbiAqIGdpdmVuIGNvbG9yLlxuICovXG5cbmZ1bmN0aW9uIHJlYWRhYmxlQ29sb3IoY29sb3IpIHtcbiAgcmV0dXJuIHJlYWRhYmxlQ29sb3JJc0JsYWNrKGNvbG9yKSA/ICcjMDAwJyA6ICcjZmZmJztcbn1cblxuLyoqXG4gKiBTYXR1cmF0ZXMgYSBjb2xvciBieSBjb252ZXJ0aW5nIGl0IHRvIGBoc2xgIGFuZCBpbmNyZWFzaW5nIHRoZSBzYXR1cmF0aW9uXG4gKiBhbW91bnQuIEVxdWl2YWxlbnQgdG8gYGRlc2F0dXJhdGUoY29sb3IsIC1hbW91bnQpYFxuICogXG4gKiBAcGFyYW0gY29sb3IgdGhlIGlucHV0IGNvbG9yXG4gKiBAcGFyYW0gYW1vdW50IHRoZSBhbW91bnQgdG8gZGFya2VuLCBnaXZlbiBhcyBhIGRlY2ltYWwgYmV0d2VlbiAwIGFuZCAxXG4gKi9cblxuZnVuY3Rpb24gc2F0dXJhdGUoY29sb3IsIGFtb3VudCkge1xuICByZXR1cm4gZGVzYXR1cmF0ZShjb2xvciwgLWFtb3VudCk7XG59XG5cbi8qKlxuICogVGFrZXMgaW4gYW55IGNvbG9yIGFuZCByZXR1cm5zIGl0IGFzIGEgaGV4IGNvZGUuXG4gKi9cblxuZnVuY3Rpb24gdG9IZXgoY29sb3IpIHtcbiAgY29uc3QgW3IsIGcsIGIsIGFdID0gcGFyc2VUb1JnYmEoY29sb3IpO1xuXG4gIGNvbnN0IGhleCA9IHggPT4gZ3VhcmQoMCwgMjU1LCB4KS50b1N0cmluZygxNikucGFkRW5kKDIsICcwJyk7XG5cbiAgcmV0dXJuIGAjJHtoZXgocil9JHtoZXgoZyl9JHtoZXgoYil9JHthIDwgMSA/IGhleChNYXRoLnJvdW5kKGEgKiAyNTUpKSA6ICcnfWA7XG59XG5cbi8qKlxuICogVGFrZXMgaW4gYW55IGNvbG9yIGFuZCByZXR1cm5zIGl0IGFzIGFuIHJnYmEgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIHRvUmdiYShjb2xvcikge1xuICByZXR1cm4gcmdiYSguLi5wYXJzZVRvUmdiYShjb2xvcikpO1xufVxuXG4vKipcbiAqIFRha2VzIGluIGFueSBjb2xvciBhbmQgcmV0dXJucyBpdCBhcyBhIGhzbGEgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIHRvSHNsYShjb2xvcikge1xuICByZXR1cm4gaHNsYSguLi5wYXJzZVRvSHNsYShjb2xvcikpO1xufVxuXG5leHBvcnQgeyBDb2xvckVycm9yLCBhZGp1c3RIdWUsIGRhcmtlbiwgZGVzYXR1cmF0ZSwgZ2V0Q29udHJhc3QsIGdldEx1bWluYW5jZSwgZ2V0U2NhbGUsIGd1YXJkLCBoYXNCYWRDb250cmFzdCwgaHNsYSwgbGlnaHRlbiwgbWl4LCBvcGFjaWZ5LCBwYXJzZVRvSHNsYSwgcGFyc2VUb1JnYmEsIHJlYWRhYmxlQ29sb3IsIHJlYWRhYmxlQ29sb3JJc0JsYWNrLCByZ2JhLCBzYXR1cmF0ZSwgdG9IZXgsIHRvSHNsYSwgdG9SZ2JhLCB0cmFuc3BhcmVudGl6ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb3B5VGV4dFRvQ2xpcGJvYXJkID0gKGlucHV0LCB7dGFyZ2V0ID0gZG9jdW1lbnQuYm9keX0gPSB7fSkgPT4ge1xuXHRjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcblx0Y29uc3QgcHJldmlvdXNseUZvY3VzZWRFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuXHRlbGVtZW50LnZhbHVlID0gaW5wdXQ7XG5cblx0Ly8gUHJldmVudCBrZXlib2FyZCBmcm9tIHNob3dpbmcgb24gbW9iaWxlXG5cdGVsZW1lbnQuc2V0QXR0cmlidXRlKCdyZWFkb25seScsICcnKTtcblxuXHRlbGVtZW50LnN0eWxlLmNvbnRhaW4gPSAnc3RyaWN0Jztcblx0ZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdGVsZW1lbnQuc3R5bGUubGVmdCA9ICctOTk5OXB4Jztcblx0ZWxlbWVudC5zdHlsZS5mb250U2l6ZSA9ICcxMnB0JzsgLy8gUHJldmVudCB6b29taW5nIG9uIGlPU1xuXG5cdGNvbnN0IHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuXHRsZXQgb3JpZ2luYWxSYW5nZSA9IGZhbHNlO1xuXHRpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgPiAwKSB7XG5cdFx0b3JpZ2luYWxSYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuXHR9XG5cblx0dGFyZ2V0LmFwcGVuZChlbGVtZW50KTtcblx0ZWxlbWVudC5zZWxlY3QoKTtcblxuXHQvLyBFeHBsaWNpdCBzZWxlY3Rpb24gd29ya2Fyb3VuZCBmb3IgaU9TXG5cdGVsZW1lbnQuc2VsZWN0aW9uU3RhcnQgPSAwO1xuXHRlbGVtZW50LnNlbGVjdGlvbkVuZCA9IGlucHV0Lmxlbmd0aDtcblxuXHRsZXQgaXNTdWNjZXNzID0gZmFsc2U7XG5cdHRyeSB7XG5cdFx0aXNTdWNjZXNzID0gZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcblx0fSBjYXRjaCAoXykge31cblxuXHRlbGVtZW50LnJlbW92ZSgpO1xuXG5cdGlmIChvcmlnaW5hbFJhbmdlKSB7XG5cdFx0c2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXHRcdHNlbGVjdGlvbi5hZGRSYW5nZShvcmlnaW5hbFJhbmdlKTtcblx0fVxuXG5cdC8vIEdldCB0aGUgZm9jdXMgYmFjayBvbiB0aGUgcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQsIGlmIGFueVxuXHRpZiAocHJldmlvdXNseUZvY3VzZWRFbGVtZW50KSB7XG5cdFx0cHJldmlvdXNseUZvY3VzZWRFbGVtZW50LmZvY3VzKCk7XG5cdH1cblxuXHRyZXR1cm4gaXNTdWNjZXNzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5VGV4dFRvQ2xpcGJvYXJkO1xuLy8gVE9ETzogUmVtb3ZlIHRoaXMgZm9yIHRoZSBuZXh0IG1ham9yIHJlbGVhc2Vcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBjb3B5VGV4dFRvQ2xpcGJvYXJkO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyx6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOlxuNjAxMTYsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxFPXt9O2Z1bmN0aW9uIEYoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihDKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEcoKXt9Ry5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtsKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBlLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZSkmJiFMLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbT0wO208ZjttKyspaFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbZV0mJihkW2VdPWZbZV0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixjLGUpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrVShkLGspO2crPVQoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGs9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaysrKSxnKz1UKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQygzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBWKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlQoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBhYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9YKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPU4oYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKStjKSksZS5wdXNoKGEpKX1mdW5jdGlvbiBYKGEsYixjLGUsZCl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpO2I9UihiLGcsZSxkKTtWKGEsYWEsYik7UyhiKX12YXIgWT17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBaKCl7dmFyIGE9WS5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKEMoMzIxKSk7cmV0dXJuIGF9XG52YXIgYmE9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6WSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXTtYKGEsZSxudWxsLGIsYyk7cmV0dXJuIGV9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGMpO1YoYSxXLGIpO1MoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBWKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107WChhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKEMoMTQzKSk7cmV0dXJuIGF9fTtcbmV4cG9ydHMuQ29tcG9uZW50PUY7ZXhwb3J0cy5GcmFnbWVudD1yO2V4cG9ydHMuUHJvZmlsZXI9dTtleHBvcnRzLlB1cmVDb21wb25lbnQ9SDtleHBvcnRzLlN0cmljdE1vZGU9dDtleHBvcnRzLlN1c3BlbnNlPXk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1iYTtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihDKDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUsuY2FsbChiLGgpJiYhTC5oYXNPd25Qcm9wZXJ0eShoKSYmKGVbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBtPTA7bTxoO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxcbmtleTpkLHJlZjpnLHByb3BzOmUsX293bmVyOmt9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTkuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIvKipcbiAqXG4gKiBAbmFtZXNwYWNlIGxvcmVtcGl4ZWxcbiAqIEBtZW1iZXJvZiBmYWtlci5pbWFnZVxuICovXG52YXIgTG9yZW1waXhlbCA9IGZ1bmN0aW9uIChmYWtlcikge1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvKipcbiAgICogaW1hZ2VcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmltYWdlXG4gICAqL1xuICBzZWxmLmltYWdlID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHZhciBjYXRlZ29yaWVzID0gW1wiYWJzdHJhY3RcIiwgXCJhbmltYWxzXCIsIFwiYnVzaW5lc3NcIiwgXCJjYXRzXCIsIFwiY2l0eVwiLCBcImZvb2RcIiwgXCJuaWdodGxpZmVcIiwgXCJmYXNoaW9uXCIsIFwicGVvcGxlXCIsIFwibmF0dXJlXCIsIFwic3BvcnRzXCIsIFwidGVjaG5pY3NcIiwgXCJ0cmFuc3BvcnRcIl07XG4gICAgcmV0dXJuIHNlbGZbZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChjYXRlZ29yaWVzKV0od2lkdGgsIGhlaWdodCwgcmFuZG9taXplKTtcbiAgfTtcbiAgLyoqXG4gICAqIGF2YXRhclxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLmxvcmVtcGl4ZWwuYXZhdGFyXG4gICAqL1xuICBzZWxmLmF2YXRhciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFrZXIuaW50ZXJuZXQuYXZhdGFyKCk7XG4gIH07XG4gIC8qKlxuICAgKiBpbWFnZVVybFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2F0ZWdvcnlcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmltYWdlVXJsXG4gICAqL1xuICBzZWxmLmltYWdlVXJsID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIGNhdGVnb3J5LCByYW5kb21pemUpIHtcbiAgICAgIHZhciB3aWR0aCA9IHdpZHRoIHx8IDY0MDtcbiAgICAgIHZhciBoZWlnaHQgPSBoZWlnaHQgfHwgNDgwO1xuXG4gICAgICB2YXIgdXJsID0naHR0cHM6Ly9sb3JlbXBpeGVsLmNvbS8nICsgd2lkdGggKyAnLycgKyBoZWlnaHQ7XG4gICAgICBpZiAodHlwZW9mIGNhdGVnb3J5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB1cmwgKz0gJy8nICsgY2F0ZWdvcnk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyYW5kb21pemUpIHtcbiAgICAgICAgdXJsICs9ICc/JyArIGZha2VyLnJhbmRvbS5udW1iZXIoKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXJsO1xuICB9O1xuICAvKipcbiAgICogYWJzdHJhY3RcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmFic3RyYWN0XG4gICAqL1xuICBzZWxmLmFic3RyYWN0ID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdhYnN0cmFjdCcsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBhbmltYWxzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UubG9yZW1waXhlbC5hbmltYWxzXG4gICAqL1xuICBzZWxmLmFuaW1hbHMgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmxvcmVtcGl4ZWwuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ2FuaW1hbHMnLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogYnVzaW5lc3NcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmJ1c2luZXNzXG4gICAqL1xuICBzZWxmLmJ1c2luZXNzID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdidXNpbmVzcycsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBjYXRzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UubG9yZW1waXhlbC5jYXRzXG4gICAqL1xuICBzZWxmLmNhdHMgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmxvcmVtcGl4ZWwuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ2NhdHMnLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogY2l0eVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhbmRvbWl6ZVxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLmxvcmVtcGl4ZWwuY2l0eVxuICAgKi9cbiAgc2VsZi5jaXR5ID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdjaXR5JywgcmFuZG9taXplKTtcbiAgfTtcbiAgLyoqXG4gICAqIGZvb2RcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmZvb2RcbiAgICovXG4gIHNlbGYuZm9vZCA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByYW5kb21pemUpIHtcbiAgICByZXR1cm4gZmFrZXIuaW1hZ2UubG9yZW1waXhlbC5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAnZm9vZCcsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBuaWdodGxpZmVcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLm5pZ2h0bGlmZVxuICAgKi9cbiAgc2VsZi5uaWdodGxpZmUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmxvcmVtcGl4ZWwuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ25pZ2h0bGlmZScsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBmYXNoaW9uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UubG9yZW1waXhlbC5mYXNoaW9uXG4gICAqL1xuICBzZWxmLmZhc2hpb24gPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmxvcmVtcGl4ZWwuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ2Zhc2hpb24nLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogcGVvcGxlXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UubG9yZW1waXhlbC5wZW9wbGVcbiAgICovXG4gIHNlbGYucGVvcGxlID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdwZW9wbGUnLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogbmF0dXJlXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UubG9yZW1waXhlbC5uYXR1cmVcbiAgICovXG4gIHNlbGYubmF0dXJlID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICduYXR1cmUnLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogc3BvcnRzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UubG9yZW1waXhlbC5zcG9ydHNcbiAgICovXG4gIHNlbGYuc3BvcnRzID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdzcG9ydHMnLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogdGVjaG5pY3NcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLnRlY2huaWNzXG4gICAqL1xuICBzZWxmLnRlY2huaWNzID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICd0ZWNobmljcycsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiB0cmFuc3BvcnRcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpeGVsLnRyYW5zcG9ydFxuICAgKi9cbiAgc2VsZi50cmFuc3BvcnQgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmxvcmVtcGl4ZWwuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ3RyYW5zcG9ydCcsIHJhbmRvbWl6ZSk7XG4gIH1cbn1cblxubW9kdWxlW1wiZXhwb3J0c1wiXSA9IExvcmVtcGl4ZWw7XG4iLCIvKipcbiAqXG4gKiBAbmFtZXNwYWNlIHVuc3BsYXNoXG4gKiBAbWVtYmVyb2YgZmFrZXIuaW1hZ2VcbiAqL1xudmFyIFVuc3BsYXNoID0gZnVuY3Rpb24gKGZha2VyKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY2F0ZWdvcmllcyA9IFtcImZvb2RcIiwgXCJuYXR1cmVcIiwgXCJwZW9wbGVcIiwgXCJ0ZWNobm9sb2d5XCIsIFwib2JqZWN0c1wiLCBcImJ1aWxkaW5nc1wiXTtcblxuICAvKipcbiAgICogaW1hZ2VcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleXdvcmRcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS51bnNwbGFzaC5pbWFnZVxuICAgKiBAZGVzY3JpcHRpb24gc2VhcmNoIGltYWdlIGZyb20gdW5zcGxhc2hcbiAgICovXG4gIHNlbGYuaW1hZ2UgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwga2V5d29yZCkge1xuICAgIHJldHVybiBzZWxmLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsIHVuZGVmaW5lZCwga2V5d29yZCk7XG4gIH07XG4gIC8qKlxuICAgKiBhdmF0YXJcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS51bnNwbGFzaC5hdmF0YXJcbiAgICovXG4gIHNlbGYuYXZhdGFyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWtlci5pbnRlcm5ldC5hdmF0YXIoKTtcbiAgfTtcbiAgLyoqXG4gICAqIGltYWdlVXJsXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYXRlZ29yeVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5d29yZFxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLnVuc3BsYXNoLmltYWdlVXJsXG4gICAqL1xuICBzZWxmLmltYWdlVXJsID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIGNhdGVnb3J5LCBrZXl3b3JkKSB7XG4gICAgICB2YXIgd2lkdGggPSB3aWR0aCB8fCA2NDA7XG4gICAgICB2YXIgaGVpZ2h0ID0gaGVpZ2h0IHx8IDQ4MDtcblxuICAgICAgdmFyIHVybCA9J2h0dHBzOi8vc291cmNlLnVuc3BsYXNoLmNvbSc7XG5cbiAgICAgIGlmICh0eXBlb2YgY2F0ZWdvcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdXJsICs9ICcvY2F0ZWdvcnkvJyArIGNhdGVnb3J5O1xuICAgICAgfVxuXG4gICAgICB1cmwgKz0gJy8nICsgd2lkdGggKyAneCcgKyBoZWlnaHQ7XG5cbiAgICAgIGlmICh0eXBlb2Yga2V5d29yZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB2YXIga2V5d29yZEZvcm1hdCA9IG5ldyBSZWdFeHAoJ14oW0EtWmEtejAtOV0uKyxbQS1aYS16MC05XSspJHxeKFtBLVphLXowLTldKykkJyk7XG4gICAgICAgICAgaWYgKGtleXdvcmRGb3JtYXQudGVzdChrZXl3b3JkKSkge1xuICAgICAgICAgICAgdXJsICs9ICc/JyArIGtleXdvcmQ7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXJsO1xuICB9O1xuICAvKipcbiAgICogZm9vZFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5d29yZFxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLnVuc3BsYXNoLmZvb2RcbiAgICovXG4gIHNlbGYuZm9vZCA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCBrZXl3b3JkKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLnVuc3BsYXNoLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdmb29kJywga2V5d29yZCk7XG4gIH07XG4gIC8qKlxuICAgKiBwZW9wbGVcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleXdvcmRcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS51bnNwbGFzaC5wZW9wbGVcbiAgICovXG4gIHNlbGYucGVvcGxlID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIGtleXdvcmQpIHtcbiAgICByZXR1cm4gZmFrZXIuaW1hZ2UudW5zcGxhc2guaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ3Blb3BsZScsIGtleXdvcmQpO1xuICB9O1xuICAvKipcbiAgICogbmF0dXJlXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXl3b3JkXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UudW5zcGxhc2gubmF0dXJlXG4gICAqL1xuICBzZWxmLm5hdHVyZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCBrZXl3b3JkKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLnVuc3BsYXNoLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICduYXR1cmUnLCBrZXl3b3JkKTtcbiAgfTtcbiAgLyoqXG4gICAqIHRlY2hub2xvZ3lcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleXdvcmRcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS51bnNwbGFzaC50ZWNobm9sb2d5XG4gICAqL1xuICBzZWxmLnRlY2hub2xvZ3kgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwga2V5d29yZCkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS51bnNwbGFzaC5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAndGVjaG5vbG9neScsIGtleXdvcmQpO1xuICB9O1xuICAvKipcbiAgICogb2JqZWN0c1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5d29yZFxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLnVuc3BsYXNoLm9iamVjdHNcbiAgICovXG4gIHNlbGYub2JqZWN0cyA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCBrZXl3b3JkKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLnVuc3BsYXNoLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdvYmplY3RzJywga2V5d29yZCk7XG4gIH07XG4gIC8qKlxuICAgKiBidWlsZGluZ3NcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleXdvcmRcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS51bnNwbGFzaC5idWlsZGluZ3NcbiAgICovXG4gIHNlbGYuYnVpbGRpbmdzID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIGtleXdvcmQpIHtcbiAgICByZXR1cm4gZmFrZXIuaW1hZ2UudW5zcGxhc2guaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ2J1aWxkaW5ncycsIGtleXdvcmQpO1xuICB9O1xufVxuXG5tb2R1bGVbXCJleHBvcnRzXCJdID0gVW5zcGxhc2g7XG4iLCIvKipcbiAqXG4gKiBAbmFtZXNwYWNlIGxvcmVtcGljc3VtXG4gKiBAbWVtYmVyb2YgZmFrZXIuaW1hZ2VcbiAqL1xudmFyIExvcmVtUGljc3VtID0gZnVuY3Rpb24gKGZha2VyKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvKipcbiAgICAgKiBpbWFnZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZ3JheXNjYWxlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJsdXIgMS0xMFxuICAgICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UubG9yZW1waWNzdW0uaW1hZ2VcbiAgICAgKiBAZGVzY3JpcHRpb24gc2VhcmNoIGltYWdlIGZyb20gdW5zcGxhc2hcbiAgICAgKi9cbiAgICBzZWxmLmltYWdlID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIGdyYXlzY2FsZSwgYmx1cikge1xuICAgICAgcmV0dXJuIHNlbGYuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgZ3JheXNjYWxlLCBibHVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGltYWdlR3JheXNjYWxlZFxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZ3JheXNjYWxlXG4gICAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpY3N1bS5pbWFnZUdyYXlzY2FsZWRcbiAgICAgKiBAZGVzY3JpcHRpb24gc2VhcmNoIGdyYXlzY2FsZSBpbWFnZSBmcm9tIHVuc3BsYXNoXG4gICAgICovXG4gICAgc2VsZi5pbWFnZUdyYXlzY2FsZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCBncmF5c2NhbGUpIHtcbiAgICAgIHJldHVybiBzZWxmLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsIGdyYXlzY2FsZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBpbWFnZUJsdXJyZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmx1ciAxLTEwXG4gICAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpY3N1bS5pbWFnZUJsdXJyZWRcbiAgICAgKiBAZGVzY3JpcHRpb24gc2VhcmNoIGJsdXJyZWQgaW1hZ2UgZnJvbSB1bnNwbGFzaFxuICAgICAqL1xuICAgIHNlbGYuaW1hZ2VCbHVycmVkID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIGJsdXIpIHtcbiAgICAgIHJldHVybiBzZWxmLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsIHVuZGVmaW5lZCwgYmx1cik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBpbWFnZVJhbmRvbVNlZWRlZFxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZ3JheXNjYWxlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJsdXIgMS0xMFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWVkXG4gICAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpY3N1bS5pbWFnZVJhbmRvbVNlZWRlZFxuICAgICAqIEBkZXNjcmlwdGlvbiBzZWFyY2ggc2FtZSByYW5kb20gaW1hZ2UgZnJvbSB1bnNwbGFzaCwgYmFzZWQgb24gYSBzZWVkXG4gICAgICovXG4gICAgc2VsZi5pbWFnZVJhbmRvbVNlZWRlZCA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCBncmF5c2NhbGUsIGJsdXIsIHNlZWQpIHtcbiAgICAgIHJldHVybiBzZWxmLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsIGdyYXlzY2FsZSwgYmx1ciwgc2VlZCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBhdmF0YXJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UubG9yZW1waWNzdW0uYXZhdGFyXG4gICAgICovXG4gICAgc2VsZi5hdmF0YXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFrZXIuaW50ZXJuZXQuYXZhdGFyKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBpbWFnZVVybFxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZ3JheXNjYWxlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJsdXIgMS0xMFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWVkXG4gICAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5sb3JlbXBpY3N1bS5pbWFnZVVybFxuICAgICAqL1xuICAgIHNlbGYuaW1hZ2VVcmwgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgZ3JheXNjYWxlLCBibHVyLCBzZWVkKSB7XG4gICAgICAgIHZhciB3aWR0aCA9IHdpZHRoIHx8IDY0MDtcbiAgICAgICAgdmFyIGhlaWdodCA9IGhlaWdodCB8fCA0ODA7XG4gIFxuICAgICAgICB2YXIgdXJsID0gJ2h0dHBzOi8vcGljc3VtLnBob3Rvcyc7XG4gICAgICAgICAgXG4gICAgICAgIGlmIChzZWVkKSB7XG4gICAgICAgICAgdXJsICs9ICcvc2VlZC8nICsgc2VlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybCArPSAnLycgKyB3aWR0aCArICcvJyArIGhlaWdodDtcbiAgICAgICAgXG4gICAgICAgIGlmIChncmF5c2NhbGUgJiYgYmx1cikge1xuICAgICAgICAgIHJldHVybiB1cmwgKyAnP2dyYXlzY2FsZScgKyAnJmJsdXI9JyArIGJsdXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ3JheXNjYWxlKSB7XG4gICAgICAgICAgcmV0dXJuIHVybCArICc/Z3JheXNjYWxlJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChibHVyKSB7XG4gICAgICAgICAgcmV0dXJuIHVybCArICc/Ymx1cj0nICsgYmx1cjtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH07XG4gIH1cbiAgXG4gIG1vZHVsZVtcImV4cG9ydHNcIl0gPSBMb3JlbVBpY3N1bTtcbiAgIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9ndWQgPSByZXF1aXJlKCdndWQnKTtcblxudmFyIF9ndWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3VkKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG5cbi8vIElubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsLlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyAoMCwgX2d1ZDIuZGVmYXVsdCkoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbC5hcHBseShfQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHMgPSB2b2lkIDA7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7IC8vIE5vIGNoYW5nZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSgoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJXMnLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0cyhDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RlbXAyLCBfdGhpczIsIF9yZXQyO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29uc3VtZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0MiA9IChfdGVtcDIgPSAoX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudDIuY2FsbC5hcHBseShfQ29tcG9uZW50MiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpczIpLCBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfSwgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBfdGVtcDIpLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpczIsIF9yZXQyKTtcbiAgICB9XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcblxuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgLy8gU3Vic2NyaWJlIHRvIGFsbCBjaGFuZ2VzIGJ5IGRlZmF1bHRcbiAgICAgIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG5cbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIC8vIFN1YnNjcmliZSB0byBhbGwgY2hhbmdlcyBieSBkZWZhdWx0XG4gICAgICA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG5cblxuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlUmVhY3RDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLy8gQGZsb3dcbid1c2Ugc3RyaWN0JztcblxudmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnbG9iYWxba2V5XSA9IChnbG9iYWxba2V5XSB8fCAwKSArIDE7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZzsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKiFcbiAqIHJlZ2pzZ2VuIDAuNS4yXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDIwIEJlbmphbWluIFRhbiA8aHR0cHM6Ly9vZmNyLnNlLz5cbiAqIEF2YWlsYWJsZSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vZ2l0aHViLmNvbS9ibmptbnQ0bi9yZWdqc2dlbi9ibG9iL21hc3Rlci9MSUNFTlNFLU1JVC50eHQ+XG4gKi9cbjsoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBVc2VkIHRvIGRldGVybWluZSBpZiB2YWx1ZXMgYXJlIG9mIHRoZSBsYW5ndWFnZSB0eXBlIGBPYmplY3RgLlxuICB2YXIgb2JqZWN0VHlwZXMgPSB7XG4gICAgJ2Z1bmN0aW9uJzogdHJ1ZSxcbiAgICAnb2JqZWN0JzogdHJ1ZVxuICB9O1xuXG4gIC8vIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gIHZhciByb290ID0gKG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdykgfHwgdGhpcztcblxuICAvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuXG4gIHZhciBmcmVlRXhwb3J0cyA9IG9iamVjdFR5cGVzW3R5cGVvZiBleHBvcnRzXSAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLy8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuXG4gIHZhciBoYXNGcmVlTW9kdWxlID0gb2JqZWN0VHlwZXNbdHlwZW9mIG1vZHVsZV0gJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGU7XG5cbiAgLy8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzIG9yIEJyb3dzZXJpZmllZCBjb2RlIGFuZCB1c2UgaXQgYXMgYHJvb3RgLlxuICB2YXIgZnJlZUdsb2JhbCA9IGZyZWVFeHBvcnRzICYmIGhhc0ZyZWVNb2R1bGUgJiYgdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG4gIGlmIChmcmVlR2xvYmFsICYmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLnNlbGYgPT09IGZyZWVHbG9iYWwpKSB7XG4gICAgcm9vdCA9IGZyZWVHbG9iYWw7XG4gIH1cblxuICAvLyBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLlxuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEdlbmVyYXRlcyBhIHN0cmluZyBiYXNlZCBvbiB0aGUgZ2l2ZW4gY29kZSBwb2ludC5cbiAgLy8gQmFzZWQgb24gaHR0cHM6Ly9tdGhzLmJlL2Zyb21jb2RlcG9pbnQgYnkgQG1hdGhpYXMuXG4gIGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoKSB7XG4gICAgdmFyIGNvZGVQb2ludCA9IE51bWJlcihhcmd1bWVudHNbMF0pO1xuXG4gICAgaWYgKFxuICAgICAgIWlzRmluaXRlKGNvZGVQb2ludCkgfHwgLy8gYE5hTmAsIGArSW5maW5pdHlgLCBvciBgLUluZmluaXR5YFxuICAgICAgY29kZVBvaW50IDwgMCB8fCAvLyBub3QgYSB2YWxpZCBVbmljb2RlIGNvZGUgcG9pbnRcbiAgICAgIGNvZGVQb2ludCA+IDB4MTBGRkZGIHx8IC8vIG5vdCBhIHZhbGlkIFVuaWNvZGUgY29kZSBwb2ludFxuICAgICAgTWF0aC5mbG9vcihjb2RlUG9pbnQpICE9IGNvZGVQb2ludCAvLyBub3QgYW4gaW50ZWdlclxuICAgICkge1xuICAgICAgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCBjb2RlIHBvaW50OiAnICsgY29kZVBvaW50KTtcbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50IDw9IDB4RkZGRikge1xuICAgICAgLy8gQk1QIGNvZGUgcG9pbnRcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFzdHJhbCBjb2RlIHBvaW50OyBzcGxpdCBpbiBzdXJyb2dhdGUgaGFsdmVzXG4gICAgICAvLyBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDA7XG4gICAgICB2YXIgaGlnaFN1cnJvZ2F0ZSA9IChjb2RlUG9pbnQgPj4gMTApICsgMHhEODAwO1xuICAgICAgdmFyIGxvd1N1cnJvZ2F0ZSA9IChjb2RlUG9pbnQgJSAweDQwMCkgKyAweERDMDA7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShoaWdoU3Vycm9nYXRlLCBsb3dTdXJyb2dhdGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEVuc3VyZXMgdGhhdCBub2RlcyBoYXZlIHRoZSBjb3JyZWN0IHR5cGVzLlxuICB2YXIgYXNzZXJ0VHlwZVJlZ2V4TWFwID0ge307XG4gIGZ1bmN0aW9uIGFzc2VydFR5cGUodHlwZSwgZXhwZWN0ZWQpIHtcbiAgICBpZiAoZXhwZWN0ZWQuaW5kZXhPZignfCcpID09IC0xKSB7XG4gICAgICBpZiAodHlwZSA9PSBleHBlY3RlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIG5vZGUgdHlwZTogJyArIHR5cGUgKyAnOyBleHBlY3RlZCB0eXBlOiAnICsgZXhwZWN0ZWQpO1xuICAgIH1cblxuICAgIGV4cGVjdGVkID0gaGFzT3duUHJvcGVydHkuY2FsbChhc3NlcnRUeXBlUmVnZXhNYXAsIGV4cGVjdGVkKVxuICAgICAgPyBhc3NlcnRUeXBlUmVnZXhNYXBbZXhwZWN0ZWRdXG4gICAgICA6IChhc3NlcnRUeXBlUmVnZXhNYXBbZXhwZWN0ZWRdID0gUmVnRXhwKCdeKD86JyArIGV4cGVjdGVkICsgJykkJykpO1xuXG4gICAgaWYgKGV4cGVjdGVkLnRlc3QodHlwZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aHJvdyBFcnJvcignSW52YWxpZCBub2RlIHR5cGU6ICcgKyB0eXBlICsgJzsgZXhwZWN0ZWQgdHlwZXM6ICcgKyBleHBlY3RlZCk7XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBHZW5lcmF0ZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nIGJhc2VkIG9uIGFuIEFTVC5cbiAgZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHZhciB0eXBlID0gbm9kZS50eXBlO1xuXG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoZ2VuZXJhdG9ycywgdHlwZSkpIHtcbiAgICAgIHJldHVybiBnZW5lcmF0b3JzW3R5cGVdKG5vZGUpO1xuICAgIH1cblxuICAgIHRocm93IEVycm9yKCdJbnZhbGlkIG5vZGUgdHlwZTogJyArIHR5cGUpO1xuICB9XG5cbiAgLy8gQ29uc3RydWN0cyBhIHN0cmluZyBieSBjb25jYXRlbnRhdGluZyB0aGUgb3V0cHV0IG9mIGVhY2ggdGVybS5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVTZXF1ZW5jZShnZW5lcmF0b3IsIHRlcm1zKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gdGVybXMubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAnJyxcbiAgICAgICAgdGVybTtcblxuICAgIHdoaWxlICgrK2kgPCBsZW5ndGgpIHtcbiAgICAgIHRlcm0gPSB0ZXJtc1tpXTtcblxuICAgICAgLy8gRW5zdXJlIHRoYXQgYFxcMGAgbnVsbCBlc2NhcGVzIGZvbGxvd2VkIGJ5IG51bWJlciBzeW1ib2xzIGFyZSBub3RcbiAgICAgIC8vIHRyZWF0ZWQgYXMgYmFja3JlZmVyZW5jZXMuXG4gICAgICBpZiAoXG4gICAgICAgIGkgKyAxIDwgbGVuZ3RoICYmXG4gICAgICAgIHRlcm1zW2ldLnR5cGUgPT0gJ3ZhbHVlJyAmJlxuICAgICAgICB0ZXJtc1tpXS5raW5kID09ICdudWxsJyAmJlxuICAgICAgICB0ZXJtc1tpICsgMV0udHlwZSA9PSAndmFsdWUnICYmXG4gICAgICAgIHRlcm1zW2kgKyAxXS5raW5kID09ICdzeW1ib2wnICYmXG4gICAgICAgIHRlcm1zW2kgKyAxXS5jb2RlUG9pbnQgPj0gNDggJiZcbiAgICAgICAgdGVybXNbaSArIDFdLmNvZGVQb2ludCA8PSA1N1xuICAgICAgKSB7XG4gICAgICAgIHJlc3VsdCArPSAnXFxcXDAwMCc7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgKz0gZ2VuZXJhdG9yKHRlcm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUFsdGVybmF0aXZlKG5vZGUpIHtcbiAgICBhc3NlcnRUeXBlKG5vZGUudHlwZSwgJ2FsdGVybmF0aXZlJyk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdGVTZXF1ZW5jZShnZW5lcmF0ZVRlcm0sIG5vZGUuYm9keSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUFuY2hvcihub2RlKSB7XG4gICAgYXNzZXJ0VHlwZShub2RlLnR5cGUsICdhbmNob3InKTtcblxuICAgIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgIHJldHVybiAnXic7XG4gICAgICBjYXNlICdlbmQnOlxuICAgICAgICByZXR1cm4gJyQnO1xuICAgICAgY2FzZSAnYm91bmRhcnknOlxuICAgICAgICByZXR1cm4gJ1xcXFxiJztcbiAgICAgIGNhc2UgJ25vdC1ib3VuZGFyeSc6XG4gICAgICAgIHJldHVybiAnXFxcXEInO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgYXNzZXJ0aW9uJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVBdG9tKG5vZGUpIHtcbiAgICBhc3NlcnRUeXBlKG5vZGUudHlwZSwgJ2FuY2hvcnxjaGFyYWN0ZXJDbGFzc3xjaGFyYWN0ZXJDbGFzc0VzY2FwZXxkb3R8Z3JvdXB8cmVmZXJlbmNlfHZhbHVlJyk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdGUobm9kZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUNoYXJhY3RlckNsYXNzKG5vZGUpIHtcbiAgICBhc3NlcnRUeXBlKG5vZGUudHlwZSwgJ2NoYXJhY3RlckNsYXNzJyk7XG5cbiAgICByZXR1cm4gJ1snICtcbiAgICAgIChub2RlLm5lZ2F0aXZlID8gJ14nIDogJycpICtcbiAgICAgIGdlbmVyYXRlU2VxdWVuY2UoZ2VuZXJhdGVDbGFzc0F0b20sIG5vZGUuYm9keSkgK1xuICAgICddJztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlQ2hhcmFjdGVyQ2xhc3NFc2NhcGUobm9kZSkge1xuICAgIGFzc2VydFR5cGUobm9kZS50eXBlLCAnY2hhcmFjdGVyQ2xhc3NFc2NhcGUnKTtcblxuICAgIHJldHVybiAnXFxcXCcgKyBub2RlLnZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVDaGFyYWN0ZXJDbGFzc1JhbmdlKG5vZGUpIHtcbiAgICBhc3NlcnRUeXBlKG5vZGUudHlwZSwgJ2NoYXJhY3RlckNsYXNzUmFuZ2UnKTtcblxuICAgIHZhciBtaW4gPSBub2RlLm1pbixcbiAgICAgICAgbWF4ID0gbm9kZS5tYXg7XG5cbiAgICBpZiAobWluLnR5cGUgPT0gJ2NoYXJhY3RlckNsYXNzUmFuZ2UnIHx8IG1heC50eXBlID09ICdjaGFyYWN0ZXJDbGFzc1JhbmdlJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGNsYXNzIHJhbmdlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdlbmVyYXRlQ2xhc3NBdG9tKG1pbikgKyAnLScgKyBnZW5lcmF0ZUNsYXNzQXRvbShtYXgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVDbGFzc0F0b20obm9kZSkge1xuICAgIGFzc2VydFR5cGUobm9kZS50eXBlLCAnYW5jaG9yfGNoYXJhY3RlckNsYXNzRXNjYXBlfGNoYXJhY3RlckNsYXNzUmFuZ2V8ZG90fHZhbHVlJyk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdGUobm9kZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZURpc2p1bmN0aW9uKG5vZGUpIHtcbiAgICBhc3NlcnRUeXBlKG5vZGUudHlwZSwgJ2Rpc2p1bmN0aW9uJyk7XG5cbiAgICB2YXIgYm9keSA9IG5vZGUuYm9keSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBsZW5ndGggPSBib2R5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gJyc7XG5cbiAgICB3aGlsZSAoKytpIDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaSAhPSAwKSB7XG4gICAgICAgIHJlc3VsdCArPSAnfCc7XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gZ2VuZXJhdGUoYm9keVtpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlRG90KG5vZGUpIHtcbiAgICBhc3NlcnRUeXBlKG5vZGUudHlwZSwgJ2RvdCcpO1xuXG4gICAgcmV0dXJuICcuJztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlR3JvdXAobm9kZSkge1xuICAgIGFzc2VydFR5cGUobm9kZS50eXBlLCAnZ3JvdXAnKTtcblxuICAgIHZhciByZXN1bHQgPSAnJztcblxuICAgIHN3aXRjaCAobm9kZS5iZWhhdmlvcikge1xuICAgICAgY2FzZSAnbm9ybWFsJzpcbiAgICAgICAgaWYgKG5vZGUubmFtZSkge1xuICAgICAgICAgIHJlc3VsdCArPSAnPzwnICsgZ2VuZXJhdGVJZGVudGlmaWVyKG5vZGUubmFtZSkgKyAnPic7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdpZ25vcmUnOlxuICAgICAgICByZXN1bHQgKz0gJz86JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdsb29rYWhlYWQnOlxuICAgICAgICByZXN1bHQgKz0gJz89JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICduZWdhdGl2ZUxvb2thaGVhZCc6XG4gICAgICAgIHJlc3VsdCArPSAnPyEnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2xvb2tiZWhpbmQnOlxuICAgICAgICByZXN1bHQgKz0gJz88PSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbmVnYXRpdmVMb29rYmVoaW5kJzpcbiAgICAgICAgcmVzdWx0ICs9ICc/PCEnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIGJlaGF2aW91cjogJyArIG5vZGUuYmVoYXZpb3VyKTtcbiAgICB9XG5cbiAgICByZXN1bHQgKz0gZ2VuZXJhdGVTZXF1ZW5jZShnZW5lcmF0ZSwgbm9kZS5ib2R5KTtcblxuICAgIHJldHVybiAnKCcgKyByZXN1bHQgKyAnKSc7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUlkZW50aWZpZXIobm9kZSkge1xuICAgIGFzc2VydFR5cGUobm9kZS50eXBlLCAnaWRlbnRpZmllcicpO1xuXG4gICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZVF1YW50aWZpZXIobm9kZSkge1xuICAgIGFzc2VydFR5cGUobm9kZS50eXBlLCAncXVhbnRpZmllcicpO1xuXG4gICAgdmFyIHF1YW50aWZpZXIgPSAnJyxcbiAgICAgICAgbWluID0gbm9kZS5taW4sXG4gICAgICAgIG1heCA9IG5vZGUubWF4O1xuXG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBpZiAobWluID09IDApIHtcbiAgICAgICAgcXVhbnRpZmllciA9ICcqJztcbiAgICAgIH0gZWxzZSBpZiAobWluID09IDEpIHtcbiAgICAgICAgcXVhbnRpZmllciA9ICcrJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1YW50aWZpZXIgPSAneycgKyBtaW4gKyAnLH0nO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobWluID09IG1heCkge1xuICAgICAgcXVhbnRpZmllciA9ICd7JyArIG1pbiArICd9JztcbiAgICB9IGVsc2UgaWYgKG1pbiA9PSAwICYmIG1heCA9PSAxKSB7XG4gICAgICBxdWFudGlmaWVyID0gJz8nO1xuICAgIH0gZWxzZSB7XG4gICAgICBxdWFudGlmaWVyID0gJ3snICsgbWluICsgJywnICsgbWF4ICsgJ30nO1xuICAgIH1cblxuICAgIGlmICghbm9kZS5ncmVlZHkpIHtcbiAgICAgIHF1YW50aWZpZXIgKz0gJz8nO1xuICAgIH1cblxuICAgIHJldHVybiBnZW5lcmF0ZUF0b20obm9kZS5ib2R5WzBdKSArIHF1YW50aWZpZXI7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZVJlZmVyZW5jZShub2RlKSB7XG4gICAgYXNzZXJ0VHlwZShub2RlLnR5cGUsICdyZWZlcmVuY2UnKTtcblxuICAgIGlmIChub2RlLm1hdGNoSW5kZXgpIHtcbiAgICAgIHJldHVybiAnXFxcXCcgKyBub2RlLm1hdGNoSW5kZXg7XG4gICAgfVxuICAgIGlmIChub2RlLm5hbWUpIHtcbiAgICAgIHJldHVybiAnXFxcXGs8JyArIGdlbmVyYXRlSWRlbnRpZmllcihub2RlLm5hbWUpICsgJz4nO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biByZWZlcmVuY2UgdHlwZScpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVUZXJtKG5vZGUpIHtcbiAgICBhc3NlcnRUeXBlKG5vZGUudHlwZSwgJ2FuY2hvcnxjaGFyYWN0ZXJDbGFzc3xjaGFyYWN0ZXJDbGFzc0VzY2FwZXxlbXB0eXxncm91cHxxdWFudGlmaWVyfHJlZmVyZW5jZXx1bmljb2RlUHJvcGVydHlFc2NhcGV8dmFsdWV8ZG90Jyk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdGUobm9kZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZVVuaWNvZGVQcm9wZXJ0eUVzY2FwZShub2RlKSB7XG4gICAgYXNzZXJ0VHlwZShub2RlLnR5cGUsICd1bmljb2RlUHJvcGVydHlFc2NhcGUnKTtcblxuICAgIHJldHVybiAnXFxcXCcgKyAobm9kZS5uZWdhdGl2ZSA/ICdQJyA6ICdwJykgKyAneycgKyBub2RlLnZhbHVlICsgJ30nO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVWYWx1ZShub2RlKSB7XG4gICAgYXNzZXJ0VHlwZShub2RlLnR5cGUsICd2YWx1ZScpO1xuXG4gICAgdmFyIGtpbmQgPSBub2RlLmtpbmQsXG4gICAgICAgIGNvZGVQb2ludCA9IG5vZGUuY29kZVBvaW50O1xuXG4gICAgaWYgKHR5cGVvZiBjb2RlUG9pbnQgIT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50OiAnICsgY29kZVBvaW50KTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgJ2NvbnRyb2xMZXR0ZXInOlxuICAgICAgICByZXR1cm4gJ1xcXFxjJyArIGZyb21Db2RlUG9pbnQoY29kZVBvaW50ICsgNjQpO1xuICAgICAgY2FzZSAnaGV4YWRlY2ltYWxFc2NhcGUnOlxuICAgICAgICByZXR1cm4gJ1xcXFx4JyArICgnMDAnICsgY29kZVBvaW50LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKS5zbGljZSgtMik7XG4gICAgICBjYXNlICdpZGVudGlmaWVyJzpcbiAgICAgICAgcmV0dXJuICdcXFxcJyArIGZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgIGNhc2UgJ251bGwnOlxuICAgICAgICByZXR1cm4gJ1xcXFwnICsgY29kZVBvaW50O1xuICAgICAgY2FzZSAnb2N0YWwnOlxuICAgICAgICByZXR1cm4gJ1xcXFwnICsgKCcwMDAnICsgY29kZVBvaW50LnRvU3RyaW5nKDgpKS5zbGljZSgtMyk7XG4gICAgICBjYXNlICdzaW5nbGVFc2NhcGUnOlxuICAgICAgICBzd2l0Y2ggKGNvZGVQb2ludCkge1xuICAgICAgICAgIGNhc2UgMHgwMDA4OlxuICAgICAgICAgICAgcmV0dXJuICdcXFxcYic7XG4gICAgICAgICAgY2FzZSAweDAwMDk6XG4gICAgICAgICAgICByZXR1cm4gJ1xcXFx0JztcbiAgICAgICAgICBjYXNlIDB4MDAwQTpcbiAgICAgICAgICAgIHJldHVybiAnXFxcXG4nO1xuICAgICAgICAgIGNhc2UgMHgwMDBCOlxuICAgICAgICAgICAgcmV0dXJuICdcXFxcdic7XG4gICAgICAgICAgY2FzZSAweDAwMEM6XG4gICAgICAgICAgICByZXR1cm4gJ1xcXFxmJztcbiAgICAgICAgICBjYXNlIDB4MDAwRDpcbiAgICAgICAgICAgIHJldHVybiAnXFxcXHInO1xuICAgICAgICAgIGNhc2UgMHgwMDJEOlxuICAgICAgICAgICAgcmV0dXJuICdcXFxcLSc7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQ6ICcgKyBjb2RlUG9pbnQpO1xuICAgICAgICB9XG4gICAgICBjYXNlICdzeW1ib2wnOlxuICAgICAgICByZXR1cm4gZnJvbUNvZGVQb2ludChjb2RlUG9pbnQpO1xuICAgICAgY2FzZSAndW5pY29kZUVzY2FwZSc6XG4gICAgICAgIHJldHVybiAnXFxcXHUnICsgKCcwMDAwJyArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkuc2xpY2UoLTQpO1xuICAgICAgY2FzZSAndW5pY29kZUNvZGVQb2ludEVzY2FwZSc6XG4gICAgICAgIHJldHVybiAnXFxcXHV7JyArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArICd9JztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdVbnN1cHBvcnRlZCBub2RlIGtpbmQ6ICcgKyBraW5kKTtcbiAgICB9XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBVc2VkIHRvIGdlbmVyYXRlIHN0cmluZ3MgZm9yIGVhY2ggbm9kZSB0eXBlLlxuICB2YXIgZ2VuZXJhdG9ycyA9IHtcbiAgICAnYWx0ZXJuYXRpdmUnOiBnZW5lcmF0ZUFsdGVybmF0aXZlLFxuICAgICdhbmNob3InOiBnZW5lcmF0ZUFuY2hvcixcbiAgICAnY2hhcmFjdGVyQ2xhc3MnOiBnZW5lcmF0ZUNoYXJhY3RlckNsYXNzLFxuICAgICdjaGFyYWN0ZXJDbGFzc0VzY2FwZSc6IGdlbmVyYXRlQ2hhcmFjdGVyQ2xhc3NFc2NhcGUsXG4gICAgJ2NoYXJhY3RlckNsYXNzUmFuZ2UnOiBnZW5lcmF0ZUNoYXJhY3RlckNsYXNzUmFuZ2UsXG4gICAgJ2Rpc2p1bmN0aW9uJzogZ2VuZXJhdGVEaXNqdW5jdGlvbixcbiAgICAnZG90JzogZ2VuZXJhdGVEb3QsXG4gICAgJ2dyb3VwJzogZ2VuZXJhdGVHcm91cCxcbiAgICAncXVhbnRpZmllcic6IGdlbmVyYXRlUXVhbnRpZmllcixcbiAgICAncmVmZXJlbmNlJzogZ2VuZXJhdGVSZWZlcmVuY2UsXG4gICAgJ3VuaWNvZGVQcm9wZXJ0eUVzY2FwZSc6IGdlbmVyYXRlVW5pY29kZVByb3BlcnR5RXNjYXBlLFxuICAgICd2YWx1ZSc6IGdlbmVyYXRlVmFsdWVcbiAgfTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBFeHBvcnQgcmVnanNnZW4uXG4gIHZhciByZWdqc2dlbiA9IHtcbiAgICAnZ2VuZXJhdGUnOiBnZW5lcmF0ZVxuICB9O1xuXG4gIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIGNvbmRpdGlvbiBwYXR0ZXJucyBsaWtlIHRoZSBmb2xsb3dpbmc6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIERlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvIGl0IGNhbiBiZSBhbGlhc2VkIHRocm91Z2ggcGF0aCBtYXBwaW5nLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWdqc2dlbjtcbiAgICB9KTtcblxuICAgIHJvb3QucmVnanNnZW4gPSByZWdqc2dlbjtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBhbiBgZXhwb3J0c2Agb2JqZWN0LlxuICBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBoYXNGcmVlTW9kdWxlKSB7XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gRXhwb3J0IHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QucmVnanNnZW4gPSByZWdqc2dlbjtcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjYW5vbmljYWxQcm9wZXJ0aWVzID0gcmVxdWlyZSgndW5pY29kZS1jYW5vbmljYWwtcHJvcGVydHktbmFtZXMtZWNtYXNjcmlwdCcpO1xuY29uc3QgcHJvcGVydHlBbGlhc2VzID0gcmVxdWlyZSgndW5pY29kZS1wcm9wZXJ0eS1hbGlhc2VzLWVjbWFzY3JpcHQnKTtcblxuY29uc3QgbWF0Y2hQcm9wZXJ0eSA9IGZ1bmN0aW9uKHByb3BlcnR5KSB7XG5cdGlmIChjYW5vbmljYWxQcm9wZXJ0aWVzLmhhcyhwcm9wZXJ0eSkpIHtcblx0XHRyZXR1cm4gcHJvcGVydHk7XG5cdH1cblx0aWYgKHByb3BlcnR5QWxpYXNlcy5oYXMocHJvcGVydHkpKSB7XG5cdFx0cmV0dXJuIHByb3BlcnR5QWxpYXNlcy5nZXQocHJvcGVydHkpO1xuXHR9XG5cdHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwcm9wZXJ0eTogJHsgcHJvcGVydHkgfWApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaFByb3BlcnR5O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBuZXcgU2V0KFtcblx0Ly8gTm9uLWJpbmFyeSBwcm9wZXJ0aWVzOlxuXHQnR2VuZXJhbF9DYXRlZ29yeScsXG5cdCdTY3JpcHQnLFxuXHQnU2NyaXB0X0V4dGVuc2lvbnMnLFxuXHQvLyBCaW5hcnkgcHJvcGVydGllczpcblx0J0FscGhhYmV0aWMnLFxuXHQnQW55Jyxcblx0J0FTQ0lJJyxcblx0J0FTQ0lJX0hleF9EaWdpdCcsXG5cdCdBc3NpZ25lZCcsXG5cdCdCaWRpX0NvbnRyb2wnLFxuXHQnQmlkaV9NaXJyb3JlZCcsXG5cdCdDYXNlX0lnbm9yYWJsZScsXG5cdCdDYXNlZCcsXG5cdCdDaGFuZ2VzX1doZW5fQ2FzZWZvbGRlZCcsXG5cdCdDaGFuZ2VzX1doZW5fQ2FzZW1hcHBlZCcsXG5cdCdDaGFuZ2VzX1doZW5fTG93ZXJjYXNlZCcsXG5cdCdDaGFuZ2VzX1doZW5fTkZLQ19DYXNlZm9sZGVkJyxcblx0J0NoYW5nZXNfV2hlbl9UaXRsZWNhc2VkJyxcblx0J0NoYW5nZXNfV2hlbl9VcHBlcmNhc2VkJyxcblx0J0Rhc2gnLFxuXHQnRGVmYXVsdF9JZ25vcmFibGVfQ29kZV9Qb2ludCcsXG5cdCdEZXByZWNhdGVkJyxcblx0J0RpYWNyaXRpYycsXG5cdCdFbW9qaScsXG5cdCdFbW9qaV9Db21wb25lbnQnLFxuXHQnRW1vamlfTW9kaWZpZXInLFxuXHQnRW1vamlfTW9kaWZpZXJfQmFzZScsXG5cdCdFbW9qaV9QcmVzZW50YXRpb24nLFxuXHQnRXh0ZW5kZWRfUGljdG9ncmFwaGljJyxcblx0J0V4dGVuZGVyJyxcblx0J0dyYXBoZW1lX0Jhc2UnLFxuXHQnR3JhcGhlbWVfRXh0ZW5kJyxcblx0J0hleF9EaWdpdCcsXG5cdCdJRF9Db250aW51ZScsXG5cdCdJRF9TdGFydCcsXG5cdCdJZGVvZ3JhcGhpYycsXG5cdCdJRFNfQmluYXJ5X09wZXJhdG9yJyxcblx0J0lEU19UcmluYXJ5X09wZXJhdG9yJyxcblx0J0pvaW5fQ29udHJvbCcsXG5cdCdMb2dpY2FsX09yZGVyX0V4Y2VwdGlvbicsXG5cdCdMb3dlcmNhc2UnLFxuXHQnTWF0aCcsXG5cdCdOb25jaGFyYWN0ZXJfQ29kZV9Qb2ludCcsXG5cdCdQYXR0ZXJuX1N5bnRheCcsXG5cdCdQYXR0ZXJuX1doaXRlX1NwYWNlJyxcblx0J1F1b3RhdGlvbl9NYXJrJyxcblx0J1JhZGljYWwnLFxuXHQnUmVnaW9uYWxfSW5kaWNhdG9yJyxcblx0J1NlbnRlbmNlX1Rlcm1pbmFsJyxcblx0J1NvZnRfRG90dGVkJyxcblx0J1Rlcm1pbmFsX1B1bmN0dWF0aW9uJyxcblx0J1VuaWZpZWRfSWRlb2dyYXBoJyxcblx0J1VwcGVyY2FzZScsXG5cdCdWYXJpYXRpb25fU2VsZWN0b3InLFxuXHQnV2hpdGVfU3BhY2UnLFxuXHQnWElEX0NvbnRpbnVlJyxcblx0J1hJRF9TdGFydCdcbl0pO1xuIiwiLy8gR2VuZXJhdGVkIHVzaW5nIGBucG0gcnVuIGJ1aWxkYC4gRG8gbm90IGVkaXQhXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBNYXAoW1xuXHRbJ3NjeCcsICdTY3JpcHRfRXh0ZW5zaW9ucyddLFxuXHRbJ3NjJywgJ1NjcmlwdCddLFxuXHRbJ2djJywgJ0dlbmVyYWxfQ2F0ZWdvcnknXSxcblx0WydBSGV4JywgJ0FTQ0lJX0hleF9EaWdpdCddLFxuXHRbJ0FscGhhJywgJ0FscGhhYmV0aWMnXSxcblx0WydCaWRpX0MnLCAnQmlkaV9Db250cm9sJ10sXG5cdFsnQmlkaV9NJywgJ0JpZGlfTWlycm9yZWQnXSxcblx0WydDYXNlZCcsICdDYXNlZCddLFxuXHRbJ0NJJywgJ0Nhc2VfSWdub3JhYmxlJ10sXG5cdFsnQ1dDRicsICdDaGFuZ2VzX1doZW5fQ2FzZWZvbGRlZCddLFxuXHRbJ0NXQ00nLCAnQ2hhbmdlc19XaGVuX0Nhc2VtYXBwZWQnXSxcblx0WydDV0tDRicsICdDaGFuZ2VzX1doZW5fTkZLQ19DYXNlZm9sZGVkJ10sXG5cdFsnQ1dMJywgJ0NoYW5nZXNfV2hlbl9Mb3dlcmNhc2VkJ10sXG5cdFsnQ1dUJywgJ0NoYW5nZXNfV2hlbl9UaXRsZWNhc2VkJ10sXG5cdFsnQ1dVJywgJ0NoYW5nZXNfV2hlbl9VcHBlcmNhc2VkJ10sXG5cdFsnRGFzaCcsICdEYXNoJ10sXG5cdFsnRGVwJywgJ0RlcHJlY2F0ZWQnXSxcblx0WydESScsICdEZWZhdWx0X0lnbm9yYWJsZV9Db2RlX1BvaW50J10sXG5cdFsnRGlhJywgJ0RpYWNyaXRpYyddLFxuXHRbJ0VCYXNlJywgJ0Vtb2ppX01vZGlmaWVyX0Jhc2UnXSxcblx0WydFQ29tcCcsICdFbW9qaV9Db21wb25lbnQnXSxcblx0WydFTW9kJywgJ0Vtb2ppX01vZGlmaWVyJ10sXG5cdFsnRW1vamknLCAnRW1vamknXSxcblx0WydFUHJlcycsICdFbW9qaV9QcmVzZW50YXRpb24nXSxcblx0WydFeHQnLCAnRXh0ZW5kZXInXSxcblx0WydFeHRQaWN0JywgJ0V4dGVuZGVkX1BpY3RvZ3JhcGhpYyddLFxuXHRbJ0dyX0Jhc2UnLCAnR3JhcGhlbWVfQmFzZSddLFxuXHRbJ0dyX0V4dCcsICdHcmFwaGVtZV9FeHRlbmQnXSxcblx0WydIZXgnLCAnSGV4X0RpZ2l0J10sXG5cdFsnSURDJywgJ0lEX0NvbnRpbnVlJ10sXG5cdFsnSWRlbycsICdJZGVvZ3JhcGhpYyddLFxuXHRbJ0lEUycsICdJRF9TdGFydCddLFxuXHRbJ0lEU0InLCAnSURTX0JpbmFyeV9PcGVyYXRvciddLFxuXHRbJ0lEU1QnLCAnSURTX1RyaW5hcnlfT3BlcmF0b3InXSxcblx0WydKb2luX0MnLCAnSm9pbl9Db250cm9sJ10sXG5cdFsnTE9FJywgJ0xvZ2ljYWxfT3JkZXJfRXhjZXB0aW9uJ10sXG5cdFsnTG93ZXInLCAnTG93ZXJjYXNlJ10sXG5cdFsnTWF0aCcsICdNYXRoJ10sXG5cdFsnTkNoYXInLCAnTm9uY2hhcmFjdGVyX0NvZGVfUG9pbnQnXSxcblx0WydQYXRfU3luJywgJ1BhdHRlcm5fU3ludGF4J10sXG5cdFsnUGF0X1dTJywgJ1BhdHRlcm5fV2hpdGVfU3BhY2UnXSxcblx0WydRTWFyaycsICdRdW90YXRpb25fTWFyayddLFxuXHRbJ1JhZGljYWwnLCAnUmFkaWNhbCddLFxuXHRbJ1JJJywgJ1JlZ2lvbmFsX0luZGljYXRvciddLFxuXHRbJ1NEJywgJ1NvZnRfRG90dGVkJ10sXG5cdFsnU1Rlcm0nLCAnU2VudGVuY2VfVGVybWluYWwnXSxcblx0WydUZXJtJywgJ1Rlcm1pbmFsX1B1bmN0dWF0aW9uJ10sXG5cdFsnVUlkZW8nLCAnVW5pZmllZF9JZGVvZ3JhcGgnXSxcblx0WydVcHBlcicsICdVcHBlcmNhc2UnXSxcblx0WydWUycsICdWYXJpYXRpb25fU2VsZWN0b3InXSxcblx0WydXU3BhY2UnLCAnV2hpdGVfU3BhY2UnXSxcblx0WydzcGFjZScsICdXaGl0ZV9TcGFjZSddLFxuXHRbJ1hJREMnLCAnWElEX0NvbnRpbnVlJ10sXG5cdFsnWElEUycsICdYSURfU3RhcnQnXVxuXSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHByb3BlcnR5VG9WYWx1ZUFsaWFzZXMgPSByZXF1aXJlKCcuL2RhdGEvbWFwcGluZ3MuanMnKTtcblxuY29uc3QgbWF0Y2hQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24ocHJvcGVydHksIHZhbHVlKSB7XG5cdGNvbnN0IGFsaWFzVG9WYWx1ZSA9IHByb3BlcnR5VG9WYWx1ZUFsaWFzZXMuZ2V0KHByb3BlcnR5KTtcblx0aWYgKCFhbGlhc1RvVmFsdWUpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gcHJvcGVydHkgXFxgJHsgcHJvcGVydHkgfVxcYC5gKTtcblx0fVxuXHRjb25zdCBjYW5vbmljYWxWYWx1ZSA9IGFsaWFzVG9WYWx1ZS5nZXQodmFsdWUpO1xuXHRpZiAoY2Fub25pY2FsVmFsdWUpIHtcblx0XHRyZXR1cm4gY2Fub25pY2FsVmFsdWU7XG5cdH1cblx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdGBVbmtub3duIHZhbHVlIFxcYCR7IHZhbHVlIH1cXGAgZm9yIHByb3BlcnR5IFxcYCR7IHByb3BlcnR5IH1cXGAuYFxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaFByb3BlcnR5VmFsdWU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG5ldyBNYXAoW1xuXHRbJ0dlbmVyYWxfQ2F0ZWdvcnknLCBuZXcgTWFwKFtcblx0XHRbJ0MnLCAnT3RoZXInXSxcblx0XHRbJ0NjJywgJ0NvbnRyb2wnXSxcblx0XHRbJ2NudHJsJywgJ0NvbnRyb2wnXSxcblx0XHRbJ0NmJywgJ0Zvcm1hdCddLFxuXHRcdFsnQ24nLCAnVW5hc3NpZ25lZCddLFxuXHRcdFsnQ28nLCAnUHJpdmF0ZV9Vc2UnXSxcblx0XHRbJ0NzJywgJ1N1cnJvZ2F0ZSddLFxuXHRcdFsnTCcsICdMZXR0ZXInXSxcblx0XHRbJ0xDJywgJ0Nhc2VkX0xldHRlciddLFxuXHRcdFsnTGwnLCAnTG93ZXJjYXNlX0xldHRlciddLFxuXHRcdFsnTG0nLCAnTW9kaWZpZXJfTGV0dGVyJ10sXG5cdFx0WydMbycsICdPdGhlcl9MZXR0ZXInXSxcblx0XHRbJ0x0JywgJ1RpdGxlY2FzZV9MZXR0ZXInXSxcblx0XHRbJ0x1JywgJ1VwcGVyY2FzZV9MZXR0ZXInXSxcblx0XHRbJ00nLCAnTWFyayddLFxuXHRcdFsnQ29tYmluaW5nX01hcmsnLCAnTWFyayddLFxuXHRcdFsnTWMnLCAnU3BhY2luZ19NYXJrJ10sXG5cdFx0WydNZScsICdFbmNsb3NpbmdfTWFyayddLFxuXHRcdFsnTW4nLCAnTm9uc3BhY2luZ19NYXJrJ10sXG5cdFx0WydOJywgJ051bWJlciddLFxuXHRcdFsnTmQnLCAnRGVjaW1hbF9OdW1iZXInXSxcblx0XHRbJ2RpZ2l0JywgJ0RlY2ltYWxfTnVtYmVyJ10sXG5cdFx0WydObCcsICdMZXR0ZXJfTnVtYmVyJ10sXG5cdFx0WydObycsICdPdGhlcl9OdW1iZXInXSxcblx0XHRbJ1AnLCAnUHVuY3R1YXRpb24nXSxcblx0XHRbJ3B1bmN0JywgJ1B1bmN0dWF0aW9uJ10sXG5cdFx0WydQYycsICdDb25uZWN0b3JfUHVuY3R1YXRpb24nXSxcblx0XHRbJ1BkJywgJ0Rhc2hfUHVuY3R1YXRpb24nXSxcblx0XHRbJ1BlJywgJ0Nsb3NlX1B1bmN0dWF0aW9uJ10sXG5cdFx0WydQZicsICdGaW5hbF9QdW5jdHVhdGlvbiddLFxuXHRcdFsnUGknLCAnSW5pdGlhbF9QdW5jdHVhdGlvbiddLFxuXHRcdFsnUG8nLCAnT3RoZXJfUHVuY3R1YXRpb24nXSxcblx0XHRbJ1BzJywgJ09wZW5fUHVuY3R1YXRpb24nXSxcblx0XHRbJ1MnLCAnU3ltYm9sJ10sXG5cdFx0WydTYycsICdDdXJyZW5jeV9TeW1ib2wnXSxcblx0XHRbJ1NrJywgJ01vZGlmaWVyX1N5bWJvbCddLFxuXHRcdFsnU20nLCAnTWF0aF9TeW1ib2wnXSxcblx0XHRbJ1NvJywgJ090aGVyX1N5bWJvbCddLFxuXHRcdFsnWicsICdTZXBhcmF0b3InXSxcblx0XHRbJ1psJywgJ0xpbmVfU2VwYXJhdG9yJ10sXG5cdFx0WydacCcsICdQYXJhZ3JhcGhfU2VwYXJhdG9yJ10sXG5cdFx0WydacycsICdTcGFjZV9TZXBhcmF0b3InXSxcblx0XHRbJ090aGVyJywgJ090aGVyJ10sXG5cdFx0WydDb250cm9sJywgJ0NvbnRyb2wnXSxcblx0XHRbJ0Zvcm1hdCcsICdGb3JtYXQnXSxcblx0XHRbJ1VuYXNzaWduZWQnLCAnVW5hc3NpZ25lZCddLFxuXHRcdFsnUHJpdmF0ZV9Vc2UnLCAnUHJpdmF0ZV9Vc2UnXSxcblx0XHRbJ1N1cnJvZ2F0ZScsICdTdXJyb2dhdGUnXSxcblx0XHRbJ0xldHRlcicsICdMZXR0ZXInXSxcblx0XHRbJ0Nhc2VkX0xldHRlcicsICdDYXNlZF9MZXR0ZXInXSxcblx0XHRbJ0xvd2VyY2FzZV9MZXR0ZXInLCAnTG93ZXJjYXNlX0xldHRlciddLFxuXHRcdFsnTW9kaWZpZXJfTGV0dGVyJywgJ01vZGlmaWVyX0xldHRlciddLFxuXHRcdFsnT3RoZXJfTGV0dGVyJywgJ090aGVyX0xldHRlciddLFxuXHRcdFsnVGl0bGVjYXNlX0xldHRlcicsICdUaXRsZWNhc2VfTGV0dGVyJ10sXG5cdFx0WydVcHBlcmNhc2VfTGV0dGVyJywgJ1VwcGVyY2FzZV9MZXR0ZXInXSxcblx0XHRbJ01hcmsnLCAnTWFyayddLFxuXHRcdFsnU3BhY2luZ19NYXJrJywgJ1NwYWNpbmdfTWFyayddLFxuXHRcdFsnRW5jbG9zaW5nX01hcmsnLCAnRW5jbG9zaW5nX01hcmsnXSxcblx0XHRbJ05vbnNwYWNpbmdfTWFyaycsICdOb25zcGFjaW5nX01hcmsnXSxcblx0XHRbJ051bWJlcicsICdOdW1iZXInXSxcblx0XHRbJ0RlY2ltYWxfTnVtYmVyJywgJ0RlY2ltYWxfTnVtYmVyJ10sXG5cdFx0WydMZXR0ZXJfTnVtYmVyJywgJ0xldHRlcl9OdW1iZXInXSxcblx0XHRbJ090aGVyX051bWJlcicsICdPdGhlcl9OdW1iZXInXSxcblx0XHRbJ1B1bmN0dWF0aW9uJywgJ1B1bmN0dWF0aW9uJ10sXG5cdFx0WydDb25uZWN0b3JfUHVuY3R1YXRpb24nLCAnQ29ubmVjdG9yX1B1bmN0dWF0aW9uJ10sXG5cdFx0WydEYXNoX1B1bmN0dWF0aW9uJywgJ0Rhc2hfUHVuY3R1YXRpb24nXSxcblx0XHRbJ0Nsb3NlX1B1bmN0dWF0aW9uJywgJ0Nsb3NlX1B1bmN0dWF0aW9uJ10sXG5cdFx0WydGaW5hbF9QdW5jdHVhdGlvbicsICdGaW5hbF9QdW5jdHVhdGlvbiddLFxuXHRcdFsnSW5pdGlhbF9QdW5jdHVhdGlvbicsICdJbml0aWFsX1B1bmN0dWF0aW9uJ10sXG5cdFx0WydPdGhlcl9QdW5jdHVhdGlvbicsICdPdGhlcl9QdW5jdHVhdGlvbiddLFxuXHRcdFsnT3Blbl9QdW5jdHVhdGlvbicsICdPcGVuX1B1bmN0dWF0aW9uJ10sXG5cdFx0WydTeW1ib2wnLCAnU3ltYm9sJ10sXG5cdFx0WydDdXJyZW5jeV9TeW1ib2wnLCAnQ3VycmVuY3lfU3ltYm9sJ10sXG5cdFx0WydNb2RpZmllcl9TeW1ib2wnLCAnTW9kaWZpZXJfU3ltYm9sJ10sXG5cdFx0WydNYXRoX1N5bWJvbCcsICdNYXRoX1N5bWJvbCddLFxuXHRcdFsnT3RoZXJfU3ltYm9sJywgJ090aGVyX1N5bWJvbCddLFxuXHRcdFsnU2VwYXJhdG9yJywgJ1NlcGFyYXRvciddLFxuXHRcdFsnTGluZV9TZXBhcmF0b3InLCAnTGluZV9TZXBhcmF0b3InXSxcblx0XHRbJ1BhcmFncmFwaF9TZXBhcmF0b3InLCAnUGFyYWdyYXBoX1NlcGFyYXRvciddLFxuXHRcdFsnU3BhY2VfU2VwYXJhdG9yJywgJ1NwYWNlX1NlcGFyYXRvciddXG5cdF0pXSxcblx0WydTY3JpcHQnLCBuZXcgTWFwKFtcblx0XHRbJ0FkbG0nLCAnQWRsYW0nXSxcblx0XHRbJ0FnaGInLCAnQ2F1Y2FzaWFuX0FsYmFuaWFuJ10sXG5cdFx0WydBaG9tJywgJ0Fob20nXSxcblx0XHRbJ0FyYWInLCAnQXJhYmljJ10sXG5cdFx0WydBcm1pJywgJ0ltcGVyaWFsX0FyYW1haWMnXSxcblx0XHRbJ0FybW4nLCAnQXJtZW5pYW4nXSxcblx0XHRbJ0F2c3QnLCAnQXZlc3RhbiddLFxuXHRcdFsnQmFsaScsICdCYWxpbmVzZSddLFxuXHRcdFsnQmFtdScsICdCYW11bSddLFxuXHRcdFsnQmFzcycsICdCYXNzYV9WYWgnXSxcblx0XHRbJ0JhdGsnLCAnQmF0YWsnXSxcblx0XHRbJ0JlbmcnLCAnQmVuZ2FsaSddLFxuXHRcdFsnQmhrcycsICdCaGFpa3N1a2knXSxcblx0XHRbJ0JvcG8nLCAnQm9wb21vZm8nXSxcblx0XHRbJ0JyYWgnLCAnQnJhaG1pJ10sXG5cdFx0WydCcmFpJywgJ0JyYWlsbGUnXSxcblx0XHRbJ0J1Z2knLCAnQnVnaW5lc2UnXSxcblx0XHRbJ0J1aGQnLCAnQnVoaWQnXSxcblx0XHRbJ0Nha20nLCAnQ2hha21hJ10sXG5cdFx0WydDYW5zJywgJ0NhbmFkaWFuX0Fib3JpZ2luYWwnXSxcblx0XHRbJ0NhcmknLCAnQ2FyaWFuJ10sXG5cdFx0WydDaGFtJywgJ0NoYW0nXSxcblx0XHRbJ0NoZXInLCAnQ2hlcm9rZWUnXSxcblx0XHRbJ0NocnMnLCAnQ2hvcmFzbWlhbiddLFxuXHRcdFsnQ29wdCcsICdDb3B0aWMnXSxcblx0XHRbJ1FhYWMnLCAnQ29wdGljJ10sXG5cdFx0WydDcHJ0JywgJ0N5cHJpb3QnXSxcblx0XHRbJ0N5cmwnLCAnQ3lyaWxsaWMnXSxcblx0XHRbJ0RldmEnLCAnRGV2YW5hZ2FyaSddLFxuXHRcdFsnRGlhaycsICdEaXZlc19Ba3VydSddLFxuXHRcdFsnRG9ncicsICdEb2dyYSddLFxuXHRcdFsnRHNydCcsICdEZXNlcmV0J10sXG5cdFx0WydEdXBsJywgJ0R1cGxveWFuJ10sXG5cdFx0WydFZ3lwJywgJ0VneXB0aWFuX0hpZXJvZ2x5cGhzJ10sXG5cdFx0WydFbGJhJywgJ0VsYmFzYW4nXSxcblx0XHRbJ0VseW0nLCAnRWx5bWFpYyddLFxuXHRcdFsnRXRoaScsICdFdGhpb3BpYyddLFxuXHRcdFsnR2VvcicsICdHZW9yZ2lhbiddLFxuXHRcdFsnR2xhZycsICdHbGFnb2xpdGljJ10sXG5cdFx0WydHb25nJywgJ0d1bmphbGFfR29uZGknXSxcblx0XHRbJ0dvbm0nLCAnTWFzYXJhbV9Hb25kaSddLFxuXHRcdFsnR290aCcsICdHb3RoaWMnXSxcblx0XHRbJ0dyYW4nLCAnR3JhbnRoYSddLFxuXHRcdFsnR3JlaycsICdHcmVlayddLFxuXHRcdFsnR3VqcicsICdHdWphcmF0aSddLFxuXHRcdFsnR3VydScsICdHdXJtdWtoaSddLFxuXHRcdFsnSGFuZycsICdIYW5ndWwnXSxcblx0XHRbJ0hhbmknLCAnSGFuJ10sXG5cdFx0WydIYW5vJywgJ0hhbnVub28nXSxcblx0XHRbJ0hhdHInLCAnSGF0cmFuJ10sXG5cdFx0WydIZWJyJywgJ0hlYnJldyddLFxuXHRcdFsnSGlyYScsICdIaXJhZ2FuYSddLFxuXHRcdFsnSGx1dycsICdBbmF0b2xpYW5fSGllcm9nbHlwaHMnXSxcblx0XHRbJ0htbmcnLCAnUGFoYXdoX0htb25nJ10sXG5cdFx0WydIbW5wJywgJ055aWFrZW5nX1B1YWNodWVfSG1vbmcnXSxcblx0XHRbJ0hya3QnLCAnS2F0YWthbmFfT3JfSGlyYWdhbmEnXSxcblx0XHRbJ0h1bmcnLCAnT2xkX0h1bmdhcmlhbiddLFxuXHRcdFsnSXRhbCcsICdPbGRfSXRhbGljJ10sXG5cdFx0WydKYXZhJywgJ0phdmFuZXNlJ10sXG5cdFx0WydLYWxpJywgJ0theWFoX0xpJ10sXG5cdFx0WydLYW5hJywgJ0thdGFrYW5hJ10sXG5cdFx0WydLaGFyJywgJ0toYXJvc2h0aGknXSxcblx0XHRbJ0tobXInLCAnS2htZXInXSxcblx0XHRbJ0tob2onLCAnS2hvamtpJ10sXG5cdFx0WydLaXRzJywgJ0toaXRhbl9TbWFsbF9TY3JpcHQnXSxcblx0XHRbJ0tuZGEnLCAnS2FubmFkYSddLFxuXHRcdFsnS3RoaScsICdLYWl0aGknXSxcblx0XHRbJ0xhbmEnLCAnVGFpX1RoYW0nXSxcblx0XHRbJ0xhb28nLCAnTGFvJ10sXG5cdFx0WydMYXRuJywgJ0xhdGluJ10sXG5cdFx0WydMZXBjJywgJ0xlcGNoYSddLFxuXHRcdFsnTGltYicsICdMaW1idSddLFxuXHRcdFsnTGluYScsICdMaW5lYXJfQSddLFxuXHRcdFsnTGluYicsICdMaW5lYXJfQiddLFxuXHRcdFsnTGlzdScsICdMaXN1J10sXG5cdFx0WydMeWNpJywgJ0x5Y2lhbiddLFxuXHRcdFsnTHlkaScsICdMeWRpYW4nXSxcblx0XHRbJ01haGonLCAnTWFoYWphbmknXSxcblx0XHRbJ01ha2EnLCAnTWFrYXNhciddLFxuXHRcdFsnTWFuZCcsICdNYW5kYWljJ10sXG5cdFx0WydNYW5pJywgJ01hbmljaGFlYW4nXSxcblx0XHRbJ01hcmMnLCAnTWFyY2hlbiddLFxuXHRcdFsnTWVkZicsICdNZWRlZmFpZHJpbiddLFxuXHRcdFsnTWVuZCcsICdNZW5kZV9LaWtha3VpJ10sXG5cdFx0WydNZXJjJywgJ01lcm9pdGljX0N1cnNpdmUnXSxcblx0XHRbJ01lcm8nLCAnTWVyb2l0aWNfSGllcm9nbHlwaHMnXSxcblx0XHRbJ01seW0nLCAnTWFsYXlhbGFtJ10sXG5cdFx0WydNb2RpJywgJ01vZGknXSxcblx0XHRbJ01vbmcnLCAnTW9uZ29saWFuJ10sXG5cdFx0WydNcm9vJywgJ01ybyddLFxuXHRcdFsnTXRlaScsICdNZWV0ZWlfTWF5ZWsnXSxcblx0XHRbJ011bHQnLCAnTXVsdGFuaSddLFxuXHRcdFsnTXltcicsICdNeWFubWFyJ10sXG5cdFx0WydOYW5kJywgJ05hbmRpbmFnYXJpJ10sXG5cdFx0WydOYXJiJywgJ09sZF9Ob3J0aF9BcmFiaWFuJ10sXG5cdFx0WydOYmF0JywgJ05hYmF0YWVhbiddLFxuXHRcdFsnTmV3YScsICdOZXdhJ10sXG5cdFx0WydOa29vJywgJ05rbyddLFxuXHRcdFsnTnNodScsICdOdXNodSddLFxuXHRcdFsnT2dhbScsICdPZ2hhbSddLFxuXHRcdFsnT2xjaycsICdPbF9DaGlraSddLFxuXHRcdFsnT3JraCcsICdPbGRfVHVya2ljJ10sXG5cdFx0WydPcnlhJywgJ09yaXlhJ10sXG5cdFx0WydPc2dlJywgJ09zYWdlJ10sXG5cdFx0WydPc21hJywgJ09zbWFueWEnXSxcblx0XHRbJ1BhbG0nLCAnUGFsbXlyZW5lJ10sXG5cdFx0WydQYXVjJywgJ1BhdV9DaW5fSGF1J10sXG5cdFx0WydQZXJtJywgJ09sZF9QZXJtaWMnXSxcblx0XHRbJ1BoYWcnLCAnUGhhZ3NfUGEnXSxcblx0XHRbJ1BobGknLCAnSW5zY3JpcHRpb25hbF9QYWhsYXZpJ10sXG5cdFx0WydQaGxwJywgJ1BzYWx0ZXJfUGFobGF2aSddLFxuXHRcdFsnUGhueCcsICdQaG9lbmljaWFuJ10sXG5cdFx0WydQbHJkJywgJ01pYW8nXSxcblx0XHRbJ1BydGknLCAnSW5zY3JpcHRpb25hbF9QYXJ0aGlhbiddLFxuXHRcdFsnUmpuZycsICdSZWphbmcnXSxcblx0XHRbJ1JvaGcnLCAnSGFuaWZpX1JvaGluZ3lhJ10sXG5cdFx0WydSdW5yJywgJ1J1bmljJ10sXG5cdFx0WydTYW1yJywgJ1NhbWFyaXRhbiddLFxuXHRcdFsnU2FyYicsICdPbGRfU291dGhfQXJhYmlhbiddLFxuXHRcdFsnU2F1cicsICdTYXVyYXNodHJhJ10sXG5cdFx0WydTZ253JywgJ1NpZ25Xcml0aW5nJ10sXG5cdFx0WydTaGF3JywgJ1NoYXZpYW4nXSxcblx0XHRbJ1NocmQnLCAnU2hhcmFkYSddLFxuXHRcdFsnU2lkZCcsICdTaWRkaGFtJ10sXG5cdFx0WydTaW5kJywgJ0todWRhd2FkaSddLFxuXHRcdFsnU2luaCcsICdTaW5oYWxhJ10sXG5cdFx0WydTb2dkJywgJ1NvZ2RpYW4nXSxcblx0XHRbJ1NvZ28nLCAnT2xkX1NvZ2RpYW4nXSxcblx0XHRbJ1NvcmEnLCAnU29yYV9Tb21wZW5nJ10sXG5cdFx0WydTb3lvJywgJ1NveW9tYm8nXSxcblx0XHRbJ1N1bmQnLCAnU3VuZGFuZXNlJ10sXG5cdFx0WydTeWxvJywgJ1N5bG90aV9OYWdyaSddLFxuXHRcdFsnU3lyYycsICdTeXJpYWMnXSxcblx0XHRbJ1RhZ2InLCAnVGFnYmFud2EnXSxcblx0XHRbJ1Rha3InLCAnVGFrcmknXSxcblx0XHRbJ1RhbGUnLCAnVGFpX0xlJ10sXG5cdFx0WydUYWx1JywgJ05ld19UYWlfTHVlJ10sXG5cdFx0WydUYW1sJywgJ1RhbWlsJ10sXG5cdFx0WydUYW5nJywgJ1Rhbmd1dCddLFxuXHRcdFsnVGF2dCcsICdUYWlfVmlldCddLFxuXHRcdFsnVGVsdScsICdUZWx1Z3UnXSxcblx0XHRbJ1RmbmcnLCAnVGlmaW5hZ2gnXSxcblx0XHRbJ1RnbGcnLCAnVGFnYWxvZyddLFxuXHRcdFsnVGhhYScsICdUaGFhbmEnXSxcblx0XHRbJ1RoYWknLCAnVGhhaSddLFxuXHRcdFsnVGlidCcsICdUaWJldGFuJ10sXG5cdFx0WydUaXJoJywgJ1Rpcmh1dGEnXSxcblx0XHRbJ1VnYXInLCAnVWdhcml0aWMnXSxcblx0XHRbJ1ZhaWknLCAnVmFpJ10sXG5cdFx0WydXYXJhJywgJ1dhcmFuZ19DaXRpJ10sXG5cdFx0WydXY2hvJywgJ1dhbmNobyddLFxuXHRcdFsnWHBlbycsICdPbGRfUGVyc2lhbiddLFxuXHRcdFsnWHN1eCcsICdDdW5laWZvcm0nXSxcblx0XHRbJ1llemknLCAnWWV6aWRpJ10sXG5cdFx0WydZaWlpJywgJ1lpJ10sXG5cdFx0WydaYW5iJywgJ1phbmFiYXphcl9TcXVhcmUnXSxcblx0XHRbJ1ppbmgnLCAnSW5oZXJpdGVkJ10sXG5cdFx0WydRYWFpJywgJ0luaGVyaXRlZCddLFxuXHRcdFsnWnl5eScsICdDb21tb24nXSxcblx0XHRbJ1p6enonLCAnVW5rbm93biddLFxuXHRcdFsnQWRsYW0nLCAnQWRsYW0nXSxcblx0XHRbJ0NhdWNhc2lhbl9BbGJhbmlhbicsICdDYXVjYXNpYW5fQWxiYW5pYW4nXSxcblx0XHRbJ0FyYWJpYycsICdBcmFiaWMnXSxcblx0XHRbJ0ltcGVyaWFsX0FyYW1haWMnLCAnSW1wZXJpYWxfQXJhbWFpYyddLFxuXHRcdFsnQXJtZW5pYW4nLCAnQXJtZW5pYW4nXSxcblx0XHRbJ0F2ZXN0YW4nLCAnQXZlc3RhbiddLFxuXHRcdFsnQmFsaW5lc2UnLCAnQmFsaW5lc2UnXSxcblx0XHRbJ0JhbXVtJywgJ0JhbXVtJ10sXG5cdFx0WydCYXNzYV9WYWgnLCAnQmFzc2FfVmFoJ10sXG5cdFx0WydCYXRhaycsICdCYXRhayddLFxuXHRcdFsnQmVuZ2FsaScsICdCZW5nYWxpJ10sXG5cdFx0WydCaGFpa3N1a2knLCAnQmhhaWtzdWtpJ10sXG5cdFx0WydCb3BvbW9mbycsICdCb3BvbW9mbyddLFxuXHRcdFsnQnJhaG1pJywgJ0JyYWhtaSddLFxuXHRcdFsnQnJhaWxsZScsICdCcmFpbGxlJ10sXG5cdFx0WydCdWdpbmVzZScsICdCdWdpbmVzZSddLFxuXHRcdFsnQnVoaWQnLCAnQnVoaWQnXSxcblx0XHRbJ0NoYWttYScsICdDaGFrbWEnXSxcblx0XHRbJ0NhbmFkaWFuX0Fib3JpZ2luYWwnLCAnQ2FuYWRpYW5fQWJvcmlnaW5hbCddLFxuXHRcdFsnQ2FyaWFuJywgJ0NhcmlhbiddLFxuXHRcdFsnQ2hlcm9rZWUnLCAnQ2hlcm9rZWUnXSxcblx0XHRbJ0Nob3Jhc21pYW4nLCAnQ2hvcmFzbWlhbiddLFxuXHRcdFsnQ29wdGljJywgJ0NvcHRpYyddLFxuXHRcdFsnQ3lwcmlvdCcsICdDeXByaW90J10sXG5cdFx0WydDeXJpbGxpYycsICdDeXJpbGxpYyddLFxuXHRcdFsnRGV2YW5hZ2FyaScsICdEZXZhbmFnYXJpJ10sXG5cdFx0WydEaXZlc19Ba3VydScsICdEaXZlc19Ba3VydSddLFxuXHRcdFsnRG9ncmEnLCAnRG9ncmEnXSxcblx0XHRbJ0Rlc2VyZXQnLCAnRGVzZXJldCddLFxuXHRcdFsnRHVwbG95YW4nLCAnRHVwbG95YW4nXSxcblx0XHRbJ0VneXB0aWFuX0hpZXJvZ2x5cGhzJywgJ0VneXB0aWFuX0hpZXJvZ2x5cGhzJ10sXG5cdFx0WydFbGJhc2FuJywgJ0VsYmFzYW4nXSxcblx0XHRbJ0VseW1haWMnLCAnRWx5bWFpYyddLFxuXHRcdFsnRXRoaW9waWMnLCAnRXRoaW9waWMnXSxcblx0XHRbJ0dlb3JnaWFuJywgJ0dlb3JnaWFuJ10sXG5cdFx0WydHbGFnb2xpdGljJywgJ0dsYWdvbGl0aWMnXSxcblx0XHRbJ0d1bmphbGFfR29uZGknLCAnR3VuamFsYV9Hb25kaSddLFxuXHRcdFsnTWFzYXJhbV9Hb25kaScsICdNYXNhcmFtX0dvbmRpJ10sXG5cdFx0WydHb3RoaWMnLCAnR290aGljJ10sXG5cdFx0WydHcmFudGhhJywgJ0dyYW50aGEnXSxcblx0XHRbJ0dyZWVrJywgJ0dyZWVrJ10sXG5cdFx0WydHdWphcmF0aScsICdHdWphcmF0aSddLFxuXHRcdFsnR3VybXVraGknLCAnR3VybXVraGknXSxcblx0XHRbJ0hhbmd1bCcsICdIYW5ndWwnXSxcblx0XHRbJ0hhbicsICdIYW4nXSxcblx0XHRbJ0hhbnVub28nLCAnSGFudW5vbyddLFxuXHRcdFsnSGF0cmFuJywgJ0hhdHJhbiddLFxuXHRcdFsnSGVicmV3JywgJ0hlYnJldyddLFxuXHRcdFsnSGlyYWdhbmEnLCAnSGlyYWdhbmEnXSxcblx0XHRbJ0FuYXRvbGlhbl9IaWVyb2dseXBocycsICdBbmF0b2xpYW5fSGllcm9nbHlwaHMnXSxcblx0XHRbJ1BhaGF3aF9IbW9uZycsICdQYWhhd2hfSG1vbmcnXSxcblx0XHRbJ055aWFrZW5nX1B1YWNodWVfSG1vbmcnLCAnTnlpYWtlbmdfUHVhY2h1ZV9IbW9uZyddLFxuXHRcdFsnS2F0YWthbmFfT3JfSGlyYWdhbmEnLCAnS2F0YWthbmFfT3JfSGlyYWdhbmEnXSxcblx0XHRbJ09sZF9IdW5nYXJpYW4nLCAnT2xkX0h1bmdhcmlhbiddLFxuXHRcdFsnT2xkX0l0YWxpYycsICdPbGRfSXRhbGljJ10sXG5cdFx0WydKYXZhbmVzZScsICdKYXZhbmVzZSddLFxuXHRcdFsnS2F5YWhfTGknLCAnS2F5YWhfTGknXSxcblx0XHRbJ0thdGFrYW5hJywgJ0thdGFrYW5hJ10sXG5cdFx0WydLaGFyb3NodGhpJywgJ0toYXJvc2h0aGknXSxcblx0XHRbJ0tobWVyJywgJ0tobWVyJ10sXG5cdFx0WydLaG9qa2knLCAnS2hvamtpJ10sXG5cdFx0WydLaGl0YW5fU21hbGxfU2NyaXB0JywgJ0toaXRhbl9TbWFsbF9TY3JpcHQnXSxcblx0XHRbJ0thbm5hZGEnLCAnS2FubmFkYSddLFxuXHRcdFsnS2FpdGhpJywgJ0thaXRoaSddLFxuXHRcdFsnVGFpX1RoYW0nLCAnVGFpX1RoYW0nXSxcblx0XHRbJ0xhbycsICdMYW8nXSxcblx0XHRbJ0xhdGluJywgJ0xhdGluJ10sXG5cdFx0WydMZXBjaGEnLCAnTGVwY2hhJ10sXG5cdFx0WydMaW1idScsICdMaW1idSddLFxuXHRcdFsnTGluZWFyX0EnLCAnTGluZWFyX0EnXSxcblx0XHRbJ0xpbmVhcl9CJywgJ0xpbmVhcl9CJ10sXG5cdFx0WydMeWNpYW4nLCAnTHljaWFuJ10sXG5cdFx0WydMeWRpYW4nLCAnTHlkaWFuJ10sXG5cdFx0WydNYWhhamFuaScsICdNYWhhamFuaSddLFxuXHRcdFsnTWFrYXNhcicsICdNYWthc2FyJ10sXG5cdFx0WydNYW5kYWljJywgJ01hbmRhaWMnXSxcblx0XHRbJ01hbmljaGFlYW4nLCAnTWFuaWNoYWVhbiddLFxuXHRcdFsnTWFyY2hlbicsICdNYXJjaGVuJ10sXG5cdFx0WydNZWRlZmFpZHJpbicsICdNZWRlZmFpZHJpbiddLFxuXHRcdFsnTWVuZGVfS2lrYWt1aScsICdNZW5kZV9LaWtha3VpJ10sXG5cdFx0WydNZXJvaXRpY19DdXJzaXZlJywgJ01lcm9pdGljX0N1cnNpdmUnXSxcblx0XHRbJ01lcm9pdGljX0hpZXJvZ2x5cGhzJywgJ01lcm9pdGljX0hpZXJvZ2x5cGhzJ10sXG5cdFx0WydNYWxheWFsYW0nLCAnTWFsYXlhbGFtJ10sXG5cdFx0WydNb25nb2xpYW4nLCAnTW9uZ29saWFuJ10sXG5cdFx0WydNcm8nLCAnTXJvJ10sXG5cdFx0WydNZWV0ZWlfTWF5ZWsnLCAnTWVldGVpX01heWVrJ10sXG5cdFx0WydNdWx0YW5pJywgJ011bHRhbmknXSxcblx0XHRbJ015YW5tYXInLCAnTXlhbm1hciddLFxuXHRcdFsnTmFuZGluYWdhcmknLCAnTmFuZGluYWdhcmknXSxcblx0XHRbJ09sZF9Ob3J0aF9BcmFiaWFuJywgJ09sZF9Ob3J0aF9BcmFiaWFuJ10sXG5cdFx0WydOYWJhdGFlYW4nLCAnTmFiYXRhZWFuJ10sXG5cdFx0WydOa28nLCAnTmtvJ10sXG5cdFx0WydOdXNodScsICdOdXNodSddLFxuXHRcdFsnT2doYW0nLCAnT2doYW0nXSxcblx0XHRbJ09sX0NoaWtpJywgJ09sX0NoaWtpJ10sXG5cdFx0WydPbGRfVHVya2ljJywgJ09sZF9UdXJraWMnXSxcblx0XHRbJ09yaXlhJywgJ09yaXlhJ10sXG5cdFx0WydPc2FnZScsICdPc2FnZSddLFxuXHRcdFsnT3NtYW55YScsICdPc21hbnlhJ10sXG5cdFx0WydQYWxteXJlbmUnLCAnUGFsbXlyZW5lJ10sXG5cdFx0WydQYXVfQ2luX0hhdScsICdQYXVfQ2luX0hhdSddLFxuXHRcdFsnT2xkX1Blcm1pYycsICdPbGRfUGVybWljJ10sXG5cdFx0WydQaGFnc19QYScsICdQaGFnc19QYSddLFxuXHRcdFsnSW5zY3JpcHRpb25hbF9QYWhsYXZpJywgJ0luc2NyaXB0aW9uYWxfUGFobGF2aSddLFxuXHRcdFsnUHNhbHRlcl9QYWhsYXZpJywgJ1BzYWx0ZXJfUGFobGF2aSddLFxuXHRcdFsnUGhvZW5pY2lhbicsICdQaG9lbmljaWFuJ10sXG5cdFx0WydNaWFvJywgJ01pYW8nXSxcblx0XHRbJ0luc2NyaXB0aW9uYWxfUGFydGhpYW4nLCAnSW5zY3JpcHRpb25hbF9QYXJ0aGlhbiddLFxuXHRcdFsnUmVqYW5nJywgJ1JlamFuZyddLFxuXHRcdFsnSGFuaWZpX1JvaGluZ3lhJywgJ0hhbmlmaV9Sb2hpbmd5YSddLFxuXHRcdFsnUnVuaWMnLCAnUnVuaWMnXSxcblx0XHRbJ1NhbWFyaXRhbicsICdTYW1hcml0YW4nXSxcblx0XHRbJ09sZF9Tb3V0aF9BcmFiaWFuJywgJ09sZF9Tb3V0aF9BcmFiaWFuJ10sXG5cdFx0WydTYXVyYXNodHJhJywgJ1NhdXJhc2h0cmEnXSxcblx0XHRbJ1NpZ25Xcml0aW5nJywgJ1NpZ25Xcml0aW5nJ10sXG5cdFx0WydTaGF2aWFuJywgJ1NoYXZpYW4nXSxcblx0XHRbJ1NoYXJhZGEnLCAnU2hhcmFkYSddLFxuXHRcdFsnU2lkZGhhbScsICdTaWRkaGFtJ10sXG5cdFx0WydLaHVkYXdhZGknLCAnS2h1ZGF3YWRpJ10sXG5cdFx0WydTaW5oYWxhJywgJ1NpbmhhbGEnXSxcblx0XHRbJ1NvZ2RpYW4nLCAnU29nZGlhbiddLFxuXHRcdFsnT2xkX1NvZ2RpYW4nLCAnT2xkX1NvZ2RpYW4nXSxcblx0XHRbJ1NvcmFfU29tcGVuZycsICdTb3JhX1NvbXBlbmcnXSxcblx0XHRbJ1NveW9tYm8nLCAnU295b21ibyddLFxuXHRcdFsnU3VuZGFuZXNlJywgJ1N1bmRhbmVzZSddLFxuXHRcdFsnU3lsb3RpX05hZ3JpJywgJ1N5bG90aV9OYWdyaSddLFxuXHRcdFsnU3lyaWFjJywgJ1N5cmlhYyddLFxuXHRcdFsnVGFnYmFud2EnLCAnVGFnYmFud2EnXSxcblx0XHRbJ1Rha3JpJywgJ1Rha3JpJ10sXG5cdFx0WydUYWlfTGUnLCAnVGFpX0xlJ10sXG5cdFx0WydOZXdfVGFpX0x1ZScsICdOZXdfVGFpX0x1ZSddLFxuXHRcdFsnVGFtaWwnLCAnVGFtaWwnXSxcblx0XHRbJ1Rhbmd1dCcsICdUYW5ndXQnXSxcblx0XHRbJ1RhaV9WaWV0JywgJ1RhaV9WaWV0J10sXG5cdFx0WydUZWx1Z3UnLCAnVGVsdWd1J10sXG5cdFx0WydUaWZpbmFnaCcsICdUaWZpbmFnaCddLFxuXHRcdFsnVGFnYWxvZycsICdUYWdhbG9nJ10sXG5cdFx0WydUaGFhbmEnLCAnVGhhYW5hJ10sXG5cdFx0WydUaWJldGFuJywgJ1RpYmV0YW4nXSxcblx0XHRbJ1Rpcmh1dGEnLCAnVGlyaHV0YSddLFxuXHRcdFsnVWdhcml0aWMnLCAnVWdhcml0aWMnXSxcblx0XHRbJ1ZhaScsICdWYWknXSxcblx0XHRbJ1dhcmFuZ19DaXRpJywgJ1dhcmFuZ19DaXRpJ10sXG5cdFx0WydXYW5jaG8nLCAnV2FuY2hvJ10sXG5cdFx0WydPbGRfUGVyc2lhbicsICdPbGRfUGVyc2lhbiddLFxuXHRcdFsnQ3VuZWlmb3JtJywgJ0N1bmVpZm9ybSddLFxuXHRcdFsnWWV6aWRpJywgJ1llemlkaSddLFxuXHRcdFsnWWknLCAnWWknXSxcblx0XHRbJ1phbmFiYXphcl9TcXVhcmUnLCAnWmFuYWJhemFyX1NxdWFyZSddLFxuXHRcdFsnSW5oZXJpdGVkJywgJ0luaGVyaXRlZCddLFxuXHRcdFsnQ29tbW9uJywgJ0NvbW1vbiddLFxuXHRcdFsnVW5rbm93bicsICdVbmtub3duJ11cblx0XSldLFxuXHRbJ1NjcmlwdF9FeHRlbnNpb25zJywgbmV3IE1hcChbXG5cdFx0WydBZGxtJywgJ0FkbGFtJ10sXG5cdFx0WydBZ2hiJywgJ0NhdWNhc2lhbl9BbGJhbmlhbiddLFxuXHRcdFsnQWhvbScsICdBaG9tJ10sXG5cdFx0WydBcmFiJywgJ0FyYWJpYyddLFxuXHRcdFsnQXJtaScsICdJbXBlcmlhbF9BcmFtYWljJ10sXG5cdFx0WydBcm1uJywgJ0FybWVuaWFuJ10sXG5cdFx0WydBdnN0JywgJ0F2ZXN0YW4nXSxcblx0XHRbJ0JhbGknLCAnQmFsaW5lc2UnXSxcblx0XHRbJ0JhbXUnLCAnQmFtdW0nXSxcblx0XHRbJ0Jhc3MnLCAnQmFzc2FfVmFoJ10sXG5cdFx0WydCYXRrJywgJ0JhdGFrJ10sXG5cdFx0WydCZW5nJywgJ0JlbmdhbGknXSxcblx0XHRbJ0Joa3MnLCAnQmhhaWtzdWtpJ10sXG5cdFx0WydCb3BvJywgJ0JvcG9tb2ZvJ10sXG5cdFx0WydCcmFoJywgJ0JyYWhtaSddLFxuXHRcdFsnQnJhaScsICdCcmFpbGxlJ10sXG5cdFx0WydCdWdpJywgJ0J1Z2luZXNlJ10sXG5cdFx0WydCdWhkJywgJ0J1aGlkJ10sXG5cdFx0WydDYWttJywgJ0NoYWttYSddLFxuXHRcdFsnQ2FucycsICdDYW5hZGlhbl9BYm9yaWdpbmFsJ10sXG5cdFx0WydDYXJpJywgJ0NhcmlhbiddLFxuXHRcdFsnQ2hhbScsICdDaGFtJ10sXG5cdFx0WydDaGVyJywgJ0NoZXJva2VlJ10sXG5cdFx0WydDaHJzJywgJ0Nob3Jhc21pYW4nXSxcblx0XHRbJ0NvcHQnLCAnQ29wdGljJ10sXG5cdFx0WydRYWFjJywgJ0NvcHRpYyddLFxuXHRcdFsnQ3BydCcsICdDeXByaW90J10sXG5cdFx0WydDeXJsJywgJ0N5cmlsbGljJ10sXG5cdFx0WydEZXZhJywgJ0RldmFuYWdhcmknXSxcblx0XHRbJ0RpYWsnLCAnRGl2ZXNfQWt1cnUnXSxcblx0XHRbJ0RvZ3InLCAnRG9ncmEnXSxcblx0XHRbJ0RzcnQnLCAnRGVzZXJldCddLFxuXHRcdFsnRHVwbCcsICdEdXBsb3lhbiddLFxuXHRcdFsnRWd5cCcsICdFZ3lwdGlhbl9IaWVyb2dseXBocyddLFxuXHRcdFsnRWxiYScsICdFbGJhc2FuJ10sXG5cdFx0WydFbHltJywgJ0VseW1haWMnXSxcblx0XHRbJ0V0aGknLCAnRXRoaW9waWMnXSxcblx0XHRbJ0dlb3InLCAnR2VvcmdpYW4nXSxcblx0XHRbJ0dsYWcnLCAnR2xhZ29saXRpYyddLFxuXHRcdFsnR29uZycsICdHdW5qYWxhX0dvbmRpJ10sXG5cdFx0WydHb25tJywgJ01hc2FyYW1fR29uZGknXSxcblx0XHRbJ0dvdGgnLCAnR290aGljJ10sXG5cdFx0WydHcmFuJywgJ0dyYW50aGEnXSxcblx0XHRbJ0dyZWsnLCAnR3JlZWsnXSxcblx0XHRbJ0d1anInLCAnR3VqYXJhdGknXSxcblx0XHRbJ0d1cnUnLCAnR3VybXVraGknXSxcblx0XHRbJ0hhbmcnLCAnSGFuZ3VsJ10sXG5cdFx0WydIYW5pJywgJ0hhbiddLFxuXHRcdFsnSGFubycsICdIYW51bm9vJ10sXG5cdFx0WydIYXRyJywgJ0hhdHJhbiddLFxuXHRcdFsnSGVicicsICdIZWJyZXcnXSxcblx0XHRbJ0hpcmEnLCAnSGlyYWdhbmEnXSxcblx0XHRbJ0hsdXcnLCAnQW5hdG9saWFuX0hpZXJvZ2x5cGhzJ10sXG5cdFx0WydIbW5nJywgJ1BhaGF3aF9IbW9uZyddLFxuXHRcdFsnSG1ucCcsICdOeWlha2VuZ19QdWFjaHVlX0htb25nJ10sXG5cdFx0WydIcmt0JywgJ0thdGFrYW5hX09yX0hpcmFnYW5hJ10sXG5cdFx0WydIdW5nJywgJ09sZF9IdW5nYXJpYW4nXSxcblx0XHRbJ0l0YWwnLCAnT2xkX0l0YWxpYyddLFxuXHRcdFsnSmF2YScsICdKYXZhbmVzZSddLFxuXHRcdFsnS2FsaScsICdLYXlhaF9MaSddLFxuXHRcdFsnS2FuYScsICdLYXRha2FuYSddLFxuXHRcdFsnS2hhcicsICdLaGFyb3NodGhpJ10sXG5cdFx0WydLaG1yJywgJ0tobWVyJ10sXG5cdFx0WydLaG9qJywgJ0tob2praSddLFxuXHRcdFsnS2l0cycsICdLaGl0YW5fU21hbGxfU2NyaXB0J10sXG5cdFx0WydLbmRhJywgJ0thbm5hZGEnXSxcblx0XHRbJ0t0aGknLCAnS2FpdGhpJ10sXG5cdFx0WydMYW5hJywgJ1RhaV9UaGFtJ10sXG5cdFx0WydMYW9vJywgJ0xhbyddLFxuXHRcdFsnTGF0bicsICdMYXRpbiddLFxuXHRcdFsnTGVwYycsICdMZXBjaGEnXSxcblx0XHRbJ0xpbWInLCAnTGltYnUnXSxcblx0XHRbJ0xpbmEnLCAnTGluZWFyX0EnXSxcblx0XHRbJ0xpbmInLCAnTGluZWFyX0InXSxcblx0XHRbJ0xpc3UnLCAnTGlzdSddLFxuXHRcdFsnTHljaScsICdMeWNpYW4nXSxcblx0XHRbJ0x5ZGknLCAnTHlkaWFuJ10sXG5cdFx0WydNYWhqJywgJ01haGFqYW5pJ10sXG5cdFx0WydNYWthJywgJ01ha2FzYXInXSxcblx0XHRbJ01hbmQnLCAnTWFuZGFpYyddLFxuXHRcdFsnTWFuaScsICdNYW5pY2hhZWFuJ10sXG5cdFx0WydNYXJjJywgJ01hcmNoZW4nXSxcblx0XHRbJ01lZGYnLCAnTWVkZWZhaWRyaW4nXSxcblx0XHRbJ01lbmQnLCAnTWVuZGVfS2lrYWt1aSddLFxuXHRcdFsnTWVyYycsICdNZXJvaXRpY19DdXJzaXZlJ10sXG5cdFx0WydNZXJvJywgJ01lcm9pdGljX0hpZXJvZ2x5cGhzJ10sXG5cdFx0WydNbHltJywgJ01hbGF5YWxhbSddLFxuXHRcdFsnTW9kaScsICdNb2RpJ10sXG5cdFx0WydNb25nJywgJ01vbmdvbGlhbiddLFxuXHRcdFsnTXJvbycsICdNcm8nXSxcblx0XHRbJ010ZWknLCAnTWVldGVpX01heWVrJ10sXG5cdFx0WydNdWx0JywgJ011bHRhbmknXSxcblx0XHRbJ015bXInLCAnTXlhbm1hciddLFxuXHRcdFsnTmFuZCcsICdOYW5kaW5hZ2FyaSddLFxuXHRcdFsnTmFyYicsICdPbGRfTm9ydGhfQXJhYmlhbiddLFxuXHRcdFsnTmJhdCcsICdOYWJhdGFlYW4nXSxcblx0XHRbJ05ld2EnLCAnTmV3YSddLFxuXHRcdFsnTmtvbycsICdOa28nXSxcblx0XHRbJ05zaHUnLCAnTnVzaHUnXSxcblx0XHRbJ09nYW0nLCAnT2doYW0nXSxcblx0XHRbJ09sY2snLCAnT2xfQ2hpa2knXSxcblx0XHRbJ09ya2gnLCAnT2xkX1R1cmtpYyddLFxuXHRcdFsnT3J5YScsICdPcml5YSddLFxuXHRcdFsnT3NnZScsICdPc2FnZSddLFxuXHRcdFsnT3NtYScsICdPc21hbnlhJ10sXG5cdFx0WydQYWxtJywgJ1BhbG15cmVuZSddLFxuXHRcdFsnUGF1YycsICdQYXVfQ2luX0hhdSddLFxuXHRcdFsnUGVybScsICdPbGRfUGVybWljJ10sXG5cdFx0WydQaGFnJywgJ1BoYWdzX1BhJ10sXG5cdFx0WydQaGxpJywgJ0luc2NyaXB0aW9uYWxfUGFobGF2aSddLFxuXHRcdFsnUGhscCcsICdQc2FsdGVyX1BhaGxhdmknXSxcblx0XHRbJ1BobngnLCAnUGhvZW5pY2lhbiddLFxuXHRcdFsnUGxyZCcsICdNaWFvJ10sXG5cdFx0WydQcnRpJywgJ0luc2NyaXB0aW9uYWxfUGFydGhpYW4nXSxcblx0XHRbJ1JqbmcnLCAnUmVqYW5nJ10sXG5cdFx0WydSb2hnJywgJ0hhbmlmaV9Sb2hpbmd5YSddLFxuXHRcdFsnUnVucicsICdSdW5pYyddLFxuXHRcdFsnU2FtcicsICdTYW1hcml0YW4nXSxcblx0XHRbJ1NhcmInLCAnT2xkX1NvdXRoX0FyYWJpYW4nXSxcblx0XHRbJ1NhdXInLCAnU2F1cmFzaHRyYSddLFxuXHRcdFsnU2dudycsICdTaWduV3JpdGluZyddLFxuXHRcdFsnU2hhdycsICdTaGF2aWFuJ10sXG5cdFx0WydTaHJkJywgJ1NoYXJhZGEnXSxcblx0XHRbJ1NpZGQnLCAnU2lkZGhhbSddLFxuXHRcdFsnU2luZCcsICdLaHVkYXdhZGknXSxcblx0XHRbJ1NpbmgnLCAnU2luaGFsYSddLFxuXHRcdFsnU29nZCcsICdTb2dkaWFuJ10sXG5cdFx0WydTb2dvJywgJ09sZF9Tb2dkaWFuJ10sXG5cdFx0WydTb3JhJywgJ1NvcmFfU29tcGVuZyddLFxuXHRcdFsnU295bycsICdTb3lvbWJvJ10sXG5cdFx0WydTdW5kJywgJ1N1bmRhbmVzZSddLFxuXHRcdFsnU3lsbycsICdTeWxvdGlfTmFncmknXSxcblx0XHRbJ1N5cmMnLCAnU3lyaWFjJ10sXG5cdFx0WydUYWdiJywgJ1RhZ2JhbndhJ10sXG5cdFx0WydUYWtyJywgJ1Rha3JpJ10sXG5cdFx0WydUYWxlJywgJ1RhaV9MZSddLFxuXHRcdFsnVGFsdScsICdOZXdfVGFpX0x1ZSddLFxuXHRcdFsnVGFtbCcsICdUYW1pbCddLFxuXHRcdFsnVGFuZycsICdUYW5ndXQnXSxcblx0XHRbJ1RhdnQnLCAnVGFpX1ZpZXQnXSxcblx0XHRbJ1RlbHUnLCAnVGVsdWd1J10sXG5cdFx0WydUZm5nJywgJ1RpZmluYWdoJ10sXG5cdFx0WydUZ2xnJywgJ1RhZ2Fsb2cnXSxcblx0XHRbJ1RoYWEnLCAnVGhhYW5hJ10sXG5cdFx0WydUaGFpJywgJ1RoYWknXSxcblx0XHRbJ1RpYnQnLCAnVGliZXRhbiddLFxuXHRcdFsnVGlyaCcsICdUaXJodXRhJ10sXG5cdFx0WydVZ2FyJywgJ1VnYXJpdGljJ10sXG5cdFx0WydWYWlpJywgJ1ZhaSddLFxuXHRcdFsnV2FyYScsICdXYXJhbmdfQ2l0aSddLFxuXHRcdFsnV2NobycsICdXYW5jaG8nXSxcblx0XHRbJ1hwZW8nLCAnT2xkX1BlcnNpYW4nXSxcblx0XHRbJ1hzdXgnLCAnQ3VuZWlmb3JtJ10sXG5cdFx0WydZZXppJywgJ1llemlkaSddLFxuXHRcdFsnWWlpaScsICdZaSddLFxuXHRcdFsnWmFuYicsICdaYW5hYmF6YXJfU3F1YXJlJ10sXG5cdFx0WydaaW5oJywgJ0luaGVyaXRlZCddLFxuXHRcdFsnUWFhaScsICdJbmhlcml0ZWQnXSxcblx0XHRbJ1p5eXknLCAnQ29tbW9uJ10sXG5cdFx0Wydaenp6JywgJ1Vua25vd24nXSxcblx0XHRbJ0FkbGFtJywgJ0FkbGFtJ10sXG5cdFx0WydDYXVjYXNpYW5fQWxiYW5pYW4nLCAnQ2F1Y2FzaWFuX0FsYmFuaWFuJ10sXG5cdFx0WydBcmFiaWMnLCAnQXJhYmljJ10sXG5cdFx0WydJbXBlcmlhbF9BcmFtYWljJywgJ0ltcGVyaWFsX0FyYW1haWMnXSxcblx0XHRbJ0FybWVuaWFuJywgJ0FybWVuaWFuJ10sXG5cdFx0WydBdmVzdGFuJywgJ0F2ZXN0YW4nXSxcblx0XHRbJ0JhbGluZXNlJywgJ0JhbGluZXNlJ10sXG5cdFx0WydCYW11bScsICdCYW11bSddLFxuXHRcdFsnQmFzc2FfVmFoJywgJ0Jhc3NhX1ZhaCddLFxuXHRcdFsnQmF0YWsnLCAnQmF0YWsnXSxcblx0XHRbJ0JlbmdhbGknLCAnQmVuZ2FsaSddLFxuXHRcdFsnQmhhaWtzdWtpJywgJ0JoYWlrc3VraSddLFxuXHRcdFsnQm9wb21vZm8nLCAnQm9wb21vZm8nXSxcblx0XHRbJ0JyYWhtaScsICdCcmFobWknXSxcblx0XHRbJ0JyYWlsbGUnLCAnQnJhaWxsZSddLFxuXHRcdFsnQnVnaW5lc2UnLCAnQnVnaW5lc2UnXSxcblx0XHRbJ0J1aGlkJywgJ0J1aGlkJ10sXG5cdFx0WydDaGFrbWEnLCAnQ2hha21hJ10sXG5cdFx0WydDYW5hZGlhbl9BYm9yaWdpbmFsJywgJ0NhbmFkaWFuX0Fib3JpZ2luYWwnXSxcblx0XHRbJ0NhcmlhbicsICdDYXJpYW4nXSxcblx0XHRbJ0NoZXJva2VlJywgJ0NoZXJva2VlJ10sXG5cdFx0WydDaG9yYXNtaWFuJywgJ0Nob3Jhc21pYW4nXSxcblx0XHRbJ0NvcHRpYycsICdDb3B0aWMnXSxcblx0XHRbJ0N5cHJpb3QnLCAnQ3lwcmlvdCddLFxuXHRcdFsnQ3lyaWxsaWMnLCAnQ3lyaWxsaWMnXSxcblx0XHRbJ0RldmFuYWdhcmknLCAnRGV2YW5hZ2FyaSddLFxuXHRcdFsnRGl2ZXNfQWt1cnUnLCAnRGl2ZXNfQWt1cnUnXSxcblx0XHRbJ0RvZ3JhJywgJ0RvZ3JhJ10sXG5cdFx0WydEZXNlcmV0JywgJ0Rlc2VyZXQnXSxcblx0XHRbJ0R1cGxveWFuJywgJ0R1cGxveWFuJ10sXG5cdFx0WydFZ3lwdGlhbl9IaWVyb2dseXBocycsICdFZ3lwdGlhbl9IaWVyb2dseXBocyddLFxuXHRcdFsnRWxiYXNhbicsICdFbGJhc2FuJ10sXG5cdFx0WydFbHltYWljJywgJ0VseW1haWMnXSxcblx0XHRbJ0V0aGlvcGljJywgJ0V0aGlvcGljJ10sXG5cdFx0WydHZW9yZ2lhbicsICdHZW9yZ2lhbiddLFxuXHRcdFsnR2xhZ29saXRpYycsICdHbGFnb2xpdGljJ10sXG5cdFx0WydHdW5qYWxhX0dvbmRpJywgJ0d1bmphbGFfR29uZGknXSxcblx0XHRbJ01hc2FyYW1fR29uZGknLCAnTWFzYXJhbV9Hb25kaSddLFxuXHRcdFsnR290aGljJywgJ0dvdGhpYyddLFxuXHRcdFsnR3JhbnRoYScsICdHcmFudGhhJ10sXG5cdFx0WydHcmVlaycsICdHcmVlayddLFxuXHRcdFsnR3VqYXJhdGknLCAnR3VqYXJhdGknXSxcblx0XHRbJ0d1cm11a2hpJywgJ0d1cm11a2hpJ10sXG5cdFx0WydIYW5ndWwnLCAnSGFuZ3VsJ10sXG5cdFx0WydIYW4nLCAnSGFuJ10sXG5cdFx0WydIYW51bm9vJywgJ0hhbnVub28nXSxcblx0XHRbJ0hhdHJhbicsICdIYXRyYW4nXSxcblx0XHRbJ0hlYnJldycsICdIZWJyZXcnXSxcblx0XHRbJ0hpcmFnYW5hJywgJ0hpcmFnYW5hJ10sXG5cdFx0WydBbmF0b2xpYW5fSGllcm9nbHlwaHMnLCAnQW5hdG9saWFuX0hpZXJvZ2x5cGhzJ10sXG5cdFx0WydQYWhhd2hfSG1vbmcnLCAnUGFoYXdoX0htb25nJ10sXG5cdFx0WydOeWlha2VuZ19QdWFjaHVlX0htb25nJywgJ055aWFrZW5nX1B1YWNodWVfSG1vbmcnXSxcblx0XHRbJ0thdGFrYW5hX09yX0hpcmFnYW5hJywgJ0thdGFrYW5hX09yX0hpcmFnYW5hJ10sXG5cdFx0WydPbGRfSHVuZ2FyaWFuJywgJ09sZF9IdW5nYXJpYW4nXSxcblx0XHRbJ09sZF9JdGFsaWMnLCAnT2xkX0l0YWxpYyddLFxuXHRcdFsnSmF2YW5lc2UnLCAnSmF2YW5lc2UnXSxcblx0XHRbJ0theWFoX0xpJywgJ0theWFoX0xpJ10sXG5cdFx0WydLYXRha2FuYScsICdLYXRha2FuYSddLFxuXHRcdFsnS2hhcm9zaHRoaScsICdLaGFyb3NodGhpJ10sXG5cdFx0WydLaG1lcicsICdLaG1lciddLFxuXHRcdFsnS2hvamtpJywgJ0tob2praSddLFxuXHRcdFsnS2hpdGFuX1NtYWxsX1NjcmlwdCcsICdLaGl0YW5fU21hbGxfU2NyaXB0J10sXG5cdFx0WydLYW5uYWRhJywgJ0thbm5hZGEnXSxcblx0XHRbJ0thaXRoaScsICdLYWl0aGknXSxcblx0XHRbJ1RhaV9UaGFtJywgJ1RhaV9UaGFtJ10sXG5cdFx0WydMYW8nLCAnTGFvJ10sXG5cdFx0WydMYXRpbicsICdMYXRpbiddLFxuXHRcdFsnTGVwY2hhJywgJ0xlcGNoYSddLFxuXHRcdFsnTGltYnUnLCAnTGltYnUnXSxcblx0XHRbJ0xpbmVhcl9BJywgJ0xpbmVhcl9BJ10sXG5cdFx0WydMaW5lYXJfQicsICdMaW5lYXJfQiddLFxuXHRcdFsnTHljaWFuJywgJ0x5Y2lhbiddLFxuXHRcdFsnTHlkaWFuJywgJ0x5ZGlhbiddLFxuXHRcdFsnTWFoYWphbmknLCAnTWFoYWphbmknXSxcblx0XHRbJ01ha2FzYXInLCAnTWFrYXNhciddLFxuXHRcdFsnTWFuZGFpYycsICdNYW5kYWljJ10sXG5cdFx0WydNYW5pY2hhZWFuJywgJ01hbmljaGFlYW4nXSxcblx0XHRbJ01hcmNoZW4nLCAnTWFyY2hlbiddLFxuXHRcdFsnTWVkZWZhaWRyaW4nLCAnTWVkZWZhaWRyaW4nXSxcblx0XHRbJ01lbmRlX0tpa2FrdWknLCAnTWVuZGVfS2lrYWt1aSddLFxuXHRcdFsnTWVyb2l0aWNfQ3Vyc2l2ZScsICdNZXJvaXRpY19DdXJzaXZlJ10sXG5cdFx0WydNZXJvaXRpY19IaWVyb2dseXBocycsICdNZXJvaXRpY19IaWVyb2dseXBocyddLFxuXHRcdFsnTWFsYXlhbGFtJywgJ01hbGF5YWxhbSddLFxuXHRcdFsnTW9uZ29saWFuJywgJ01vbmdvbGlhbiddLFxuXHRcdFsnTXJvJywgJ01ybyddLFxuXHRcdFsnTWVldGVpX01heWVrJywgJ01lZXRlaV9NYXllayddLFxuXHRcdFsnTXVsdGFuaScsICdNdWx0YW5pJ10sXG5cdFx0WydNeWFubWFyJywgJ015YW5tYXInXSxcblx0XHRbJ05hbmRpbmFnYXJpJywgJ05hbmRpbmFnYXJpJ10sXG5cdFx0WydPbGRfTm9ydGhfQXJhYmlhbicsICdPbGRfTm9ydGhfQXJhYmlhbiddLFxuXHRcdFsnTmFiYXRhZWFuJywgJ05hYmF0YWVhbiddLFxuXHRcdFsnTmtvJywgJ05rbyddLFxuXHRcdFsnTnVzaHUnLCAnTnVzaHUnXSxcblx0XHRbJ09naGFtJywgJ09naGFtJ10sXG5cdFx0WydPbF9DaGlraScsICdPbF9DaGlraSddLFxuXHRcdFsnT2xkX1R1cmtpYycsICdPbGRfVHVya2ljJ10sXG5cdFx0WydPcml5YScsICdPcml5YSddLFxuXHRcdFsnT3NhZ2UnLCAnT3NhZ2UnXSxcblx0XHRbJ09zbWFueWEnLCAnT3NtYW55YSddLFxuXHRcdFsnUGFsbXlyZW5lJywgJ1BhbG15cmVuZSddLFxuXHRcdFsnUGF1X0Npbl9IYXUnLCAnUGF1X0Npbl9IYXUnXSxcblx0XHRbJ09sZF9QZXJtaWMnLCAnT2xkX1Blcm1pYyddLFxuXHRcdFsnUGhhZ3NfUGEnLCAnUGhhZ3NfUGEnXSxcblx0XHRbJ0luc2NyaXB0aW9uYWxfUGFobGF2aScsICdJbnNjcmlwdGlvbmFsX1BhaGxhdmknXSxcblx0XHRbJ1BzYWx0ZXJfUGFobGF2aScsICdQc2FsdGVyX1BhaGxhdmknXSxcblx0XHRbJ1Bob2VuaWNpYW4nLCAnUGhvZW5pY2lhbiddLFxuXHRcdFsnTWlhbycsICdNaWFvJ10sXG5cdFx0WydJbnNjcmlwdGlvbmFsX1BhcnRoaWFuJywgJ0luc2NyaXB0aW9uYWxfUGFydGhpYW4nXSxcblx0XHRbJ1JlamFuZycsICdSZWphbmcnXSxcblx0XHRbJ0hhbmlmaV9Sb2hpbmd5YScsICdIYW5pZmlfUm9oaW5neWEnXSxcblx0XHRbJ1J1bmljJywgJ1J1bmljJ10sXG5cdFx0WydTYW1hcml0YW4nLCAnU2FtYXJpdGFuJ10sXG5cdFx0WydPbGRfU291dGhfQXJhYmlhbicsICdPbGRfU291dGhfQXJhYmlhbiddLFxuXHRcdFsnU2F1cmFzaHRyYScsICdTYXVyYXNodHJhJ10sXG5cdFx0WydTaWduV3JpdGluZycsICdTaWduV3JpdGluZyddLFxuXHRcdFsnU2hhdmlhbicsICdTaGF2aWFuJ10sXG5cdFx0WydTaGFyYWRhJywgJ1NoYXJhZGEnXSxcblx0XHRbJ1NpZGRoYW0nLCAnU2lkZGhhbSddLFxuXHRcdFsnS2h1ZGF3YWRpJywgJ0todWRhd2FkaSddLFxuXHRcdFsnU2luaGFsYScsICdTaW5oYWxhJ10sXG5cdFx0WydTb2dkaWFuJywgJ1NvZ2RpYW4nXSxcblx0XHRbJ09sZF9Tb2dkaWFuJywgJ09sZF9Tb2dkaWFuJ10sXG5cdFx0WydTb3JhX1NvbXBlbmcnLCAnU29yYV9Tb21wZW5nJ10sXG5cdFx0WydTb3lvbWJvJywgJ1NveW9tYm8nXSxcblx0XHRbJ1N1bmRhbmVzZScsICdTdW5kYW5lc2UnXSxcblx0XHRbJ1N5bG90aV9OYWdyaScsICdTeWxvdGlfTmFncmknXSxcblx0XHRbJ1N5cmlhYycsICdTeXJpYWMnXSxcblx0XHRbJ1RhZ2JhbndhJywgJ1RhZ2JhbndhJ10sXG5cdFx0WydUYWtyaScsICdUYWtyaSddLFxuXHRcdFsnVGFpX0xlJywgJ1RhaV9MZSddLFxuXHRcdFsnTmV3X1RhaV9MdWUnLCAnTmV3X1RhaV9MdWUnXSxcblx0XHRbJ1RhbWlsJywgJ1RhbWlsJ10sXG5cdFx0WydUYW5ndXQnLCAnVGFuZ3V0J10sXG5cdFx0WydUYWlfVmlldCcsICdUYWlfVmlldCddLFxuXHRcdFsnVGVsdWd1JywgJ1RlbHVndSddLFxuXHRcdFsnVGlmaW5hZ2gnLCAnVGlmaW5hZ2gnXSxcblx0XHRbJ1RhZ2Fsb2cnLCAnVGFnYWxvZyddLFxuXHRcdFsnVGhhYW5hJywgJ1RoYWFuYSddLFxuXHRcdFsnVGliZXRhbicsICdUaWJldGFuJ10sXG5cdFx0WydUaXJodXRhJywgJ1Rpcmh1dGEnXSxcblx0XHRbJ1VnYXJpdGljJywgJ1VnYXJpdGljJ10sXG5cdFx0WydWYWknLCAnVmFpJ10sXG5cdFx0WydXYXJhbmdfQ2l0aScsICdXYXJhbmdfQ2l0aSddLFxuXHRcdFsnV2FuY2hvJywgJ1dhbmNobyddLFxuXHRcdFsnT2xkX1BlcnNpYW4nLCAnT2xkX1BlcnNpYW4nXSxcblx0XHRbJ0N1bmVpZm9ybScsICdDdW5laWZvcm0nXSxcblx0XHRbJ1llemlkaScsICdZZXppZGknXSxcblx0XHRbJ1lpJywgJ1lpJ10sXG5cdFx0WydaYW5hYmF6YXJfU3F1YXJlJywgJ1phbmFiYXphcl9TcXVhcmUnXSxcblx0XHRbJ0luaGVyaXRlZCcsICdJbmhlcml0ZWQnXSxcblx0XHRbJ0NvbW1vbicsICdDb21tb24nXSxcblx0XHRbJ1Vua25vd24nLCAnVW5rbm93biddXG5cdF0pXVxuXSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG5ldyBNYXAoW1xuXHRbMHg0QiwgMHgyMTJBXSxcblx0WzB4NTMsIDB4MTdGXSxcblx0WzB4NkIsIDB4MjEyQV0sXG5cdFsweDczLCAweDE3Rl0sXG5cdFsweEI1LCAweDM5Q10sXG5cdFsweEM1LCAweDIxMkJdLFxuXHRbMHhERiwgMHgxRTlFXSxcblx0WzB4RTUsIDB4MjEyQl0sXG5cdFsweDE3RiwgMHg1M10sXG5cdFsweDFDNCwgMHgxQzVdLFxuXHRbMHgxQzUsIDB4MUM0XSxcblx0WzB4MUM3LCAweDFDOF0sXG5cdFsweDFDOCwgMHgxQzddLFxuXHRbMHgxQ0EsIDB4MUNCXSxcblx0WzB4MUNCLCAweDFDQV0sXG5cdFsweDFGMSwgMHgxRjJdLFxuXHRbMHgxRjIsIDB4MUYxXSxcblx0WzB4MzQ1LCAweDFGQkVdLFxuXHRbMHgzOTIsIDB4M0QwXSxcblx0WzB4Mzk1LCAweDNGNV0sXG5cdFsweDM5OCwgMHgzRjRdLFxuXHRbMHgzOTksIDB4MUZCRV0sXG5cdFsweDM5QSwgMHgzRjBdLFxuXHRbMHgzOUMsIDB4QjVdLFxuXHRbMHgzQTAsIDB4M0Q2XSxcblx0WzB4M0ExLCAweDNGMV0sXG5cdFsweDNBMywgMHgzQzJdLFxuXHRbMHgzQTYsIDB4M0Q1XSxcblx0WzB4M0E5LCAweDIxMjZdLFxuXHRbMHgzQjgsIDB4M0Y0XSxcblx0WzB4M0MyLCAweDNBM10sXG5cdFsweDNDOSwgMHgyMTI2XSxcblx0WzB4M0QwLCAweDM5Ml0sXG5cdFsweDNEMSwgMHgzRjRdLFxuXHRbMHgzRDUsIDB4M0E2XSxcblx0WzB4M0Q2LCAweDNBMF0sXG5cdFsweDNGMCwgMHgzOUFdLFxuXHRbMHgzRjEsIDB4M0ExXSxcblx0WzB4M0Y0LCBbXG5cdFx0MHgzOTgsXG5cdFx0MHgzRDEsXG5cdFx0MHgzQjhcblx0XV0sXG5cdFsweDNGNSwgMHgzOTVdLFxuXHRbMHg0MTIsIDB4MUM4MF0sXG5cdFsweDQxNCwgMHgxQzgxXSxcblx0WzB4NDFFLCAweDFDODJdLFxuXHRbMHg0MjEsIDB4MUM4M10sXG5cdFsweDQyMiwgMHgxQzg1XSxcblx0WzB4NDJBLCAweDFDODZdLFxuXHRbMHg0NjIsIDB4MUM4N10sXG5cdFsweDFDODAsIDB4NDEyXSxcblx0WzB4MUM4MSwgMHg0MTRdLFxuXHRbMHgxQzgyLCAweDQxRV0sXG5cdFsweDFDODMsIDB4NDIxXSxcblx0WzB4MUM4NCwgMHgxQzg1XSxcblx0WzB4MUM4NSwgW1xuXHRcdDB4NDIyLFxuXHRcdDB4MUM4NFxuXHRdXSxcblx0WzB4MUM4NiwgMHg0MkFdLFxuXHRbMHgxQzg3LCAweDQ2Ml0sXG5cdFsweDFDODgsIDB4QTY0QV0sXG5cdFsweDFFNjAsIDB4MUU5Ql0sXG5cdFsweDFFOUIsIDB4MUU2MF0sXG5cdFsweDFFOUUsIDB4REZdLFxuXHRbMHgxRjgwLCAweDFGODhdLFxuXHRbMHgxRjgxLCAweDFGODldLFxuXHRbMHgxRjgyLCAweDFGOEFdLFxuXHRbMHgxRjgzLCAweDFGOEJdLFxuXHRbMHgxRjg0LCAweDFGOENdLFxuXHRbMHgxRjg1LCAweDFGOERdLFxuXHRbMHgxRjg2LCAweDFGOEVdLFxuXHRbMHgxRjg3LCAweDFGOEZdLFxuXHRbMHgxRjg4LCAweDFGODBdLFxuXHRbMHgxRjg5LCAweDFGODFdLFxuXHRbMHgxRjhBLCAweDFGODJdLFxuXHRbMHgxRjhCLCAweDFGODNdLFxuXHRbMHgxRjhDLCAweDFGODRdLFxuXHRbMHgxRjhELCAweDFGODVdLFxuXHRbMHgxRjhFLCAweDFGODZdLFxuXHRbMHgxRjhGLCAweDFGODddLFxuXHRbMHgxRjkwLCAweDFGOThdLFxuXHRbMHgxRjkxLCAweDFGOTldLFxuXHRbMHgxRjkyLCAweDFGOUFdLFxuXHRbMHgxRjkzLCAweDFGOUJdLFxuXHRbMHgxRjk0LCAweDFGOUNdLFxuXHRbMHgxRjk1LCAweDFGOURdLFxuXHRbMHgxRjk2LCAweDFGOUVdLFxuXHRbMHgxRjk3LCAweDFGOUZdLFxuXHRbMHgxRjk4LCAweDFGOTBdLFxuXHRbMHgxRjk5LCAweDFGOTFdLFxuXHRbMHgxRjlBLCAweDFGOTJdLFxuXHRbMHgxRjlCLCAweDFGOTNdLFxuXHRbMHgxRjlDLCAweDFGOTRdLFxuXHRbMHgxRjlELCAweDFGOTVdLFxuXHRbMHgxRjlFLCAweDFGOTZdLFxuXHRbMHgxRjlGLCAweDFGOTddLFxuXHRbMHgxRkEwLCAweDFGQThdLFxuXHRbMHgxRkExLCAweDFGQTldLFxuXHRbMHgxRkEyLCAweDFGQUFdLFxuXHRbMHgxRkEzLCAweDFGQUJdLFxuXHRbMHgxRkE0LCAweDFGQUNdLFxuXHRbMHgxRkE1LCAweDFGQURdLFxuXHRbMHgxRkE2LCAweDFGQUVdLFxuXHRbMHgxRkE3LCAweDFGQUZdLFxuXHRbMHgxRkE4LCAweDFGQTBdLFxuXHRbMHgxRkE5LCAweDFGQTFdLFxuXHRbMHgxRkFBLCAweDFGQTJdLFxuXHRbMHgxRkFCLCAweDFGQTNdLFxuXHRbMHgxRkFDLCAweDFGQTRdLFxuXHRbMHgxRkFELCAweDFGQTVdLFxuXHRbMHgxRkFFLCAweDFGQTZdLFxuXHRbMHgxRkFGLCAweDFGQTddLFxuXHRbMHgxRkIzLCAweDFGQkNdLFxuXHRbMHgxRkJDLCAweDFGQjNdLFxuXHRbMHgxRkJFLCBbXG5cdFx0MHgzNDUsXG5cdFx0MHgzOTlcblx0XV0sXG5cdFsweDFGQzMsIDB4MUZDQ10sXG5cdFsweDFGQ0MsIDB4MUZDM10sXG5cdFsweDFGRjMsIDB4MUZGQ10sXG5cdFsweDFGRkMsIDB4MUZGM10sXG5cdFsweDIxMjYsIFtcblx0XHQweDNBOSxcblx0XHQweDNDOVxuXHRdXSxcblx0WzB4MjEyQSwgMHg0Ql0sXG5cdFsweDIxMkIsIFtcblx0XHQweEM1LFxuXHRcdDB4RTVcblx0XV0sXG5cdFsweEE2NEEsIDB4MUM4OF0sXG5cdFsweDEwNDAwLCAweDEwNDI4XSxcblx0WzB4MTA0MDEsIDB4MTA0MjldLFxuXHRbMHgxMDQwMiwgMHgxMDQyQV0sXG5cdFsweDEwNDAzLCAweDEwNDJCXSxcblx0WzB4MTA0MDQsIDB4MTA0MkNdLFxuXHRbMHgxMDQwNSwgMHgxMDQyRF0sXG5cdFsweDEwNDA2LCAweDEwNDJFXSxcblx0WzB4MTA0MDcsIDB4MTA0MkZdLFxuXHRbMHgxMDQwOCwgMHgxMDQzMF0sXG5cdFsweDEwNDA5LCAweDEwNDMxXSxcblx0WzB4MTA0MEEsIDB4MTA0MzJdLFxuXHRbMHgxMDQwQiwgMHgxMDQzM10sXG5cdFsweDEwNDBDLCAweDEwNDM0XSxcblx0WzB4MTA0MEQsIDB4MTA0MzVdLFxuXHRbMHgxMDQwRSwgMHgxMDQzNl0sXG5cdFsweDEwNDBGLCAweDEwNDM3XSxcblx0WzB4MTA0MTAsIDB4MTA0MzhdLFxuXHRbMHgxMDQxMSwgMHgxMDQzOV0sXG5cdFsweDEwNDEyLCAweDEwNDNBXSxcblx0WzB4MTA0MTMsIDB4MTA0M0JdLFxuXHRbMHgxMDQxNCwgMHgxMDQzQ10sXG5cdFsweDEwNDE1LCAweDEwNDNEXSxcblx0WzB4MTA0MTYsIDB4MTA0M0VdLFxuXHRbMHgxMDQxNywgMHgxMDQzRl0sXG5cdFsweDEwNDE4LCAweDEwNDQwXSxcblx0WzB4MTA0MTksIDB4MTA0NDFdLFxuXHRbMHgxMDQxQSwgMHgxMDQ0Ml0sXG5cdFsweDEwNDFCLCAweDEwNDQzXSxcblx0WzB4MTA0MUMsIDB4MTA0NDRdLFxuXHRbMHgxMDQxRCwgMHgxMDQ0NV0sXG5cdFsweDEwNDFFLCAweDEwNDQ2XSxcblx0WzB4MTA0MUYsIDB4MTA0NDddLFxuXHRbMHgxMDQyMCwgMHgxMDQ0OF0sXG5cdFsweDEwNDIxLCAweDEwNDQ5XSxcblx0WzB4MTA0MjIsIDB4MTA0NEFdLFxuXHRbMHgxMDQyMywgMHgxMDQ0Ql0sXG5cdFsweDEwNDI0LCAweDEwNDRDXSxcblx0WzB4MTA0MjUsIDB4MTA0NERdLFxuXHRbMHgxMDQyNiwgMHgxMDQ0RV0sXG5cdFsweDEwNDI3LCAweDEwNDRGXSxcblx0WzB4MTA0MjgsIDB4MTA0MDBdLFxuXHRbMHgxMDQyOSwgMHgxMDQwMV0sXG5cdFsweDEwNDJBLCAweDEwNDAyXSxcblx0WzB4MTA0MkIsIDB4MTA0MDNdLFxuXHRbMHgxMDQyQywgMHgxMDQwNF0sXG5cdFsweDEwNDJELCAweDEwNDA1XSxcblx0WzB4MTA0MkUsIDB4MTA0MDZdLFxuXHRbMHgxMDQyRiwgMHgxMDQwN10sXG5cdFsweDEwNDMwLCAweDEwNDA4XSxcblx0WzB4MTA0MzEsIDB4MTA0MDldLFxuXHRbMHgxMDQzMiwgMHgxMDQwQV0sXG5cdFsweDEwNDMzLCAweDEwNDBCXSxcblx0WzB4MTA0MzQsIDB4MTA0MENdLFxuXHRbMHgxMDQzNSwgMHgxMDQwRF0sXG5cdFsweDEwNDM2LCAweDEwNDBFXSxcblx0WzB4MTA0MzcsIDB4MTA0MEZdLFxuXHRbMHgxMDQzOCwgMHgxMDQxMF0sXG5cdFsweDEwNDM5LCAweDEwNDExXSxcblx0WzB4MTA0M0EsIDB4MTA0MTJdLFxuXHRbMHgxMDQzQiwgMHgxMDQxM10sXG5cdFsweDEwNDNDLCAweDEwNDE0XSxcblx0WzB4MTA0M0QsIDB4MTA0MTVdLFxuXHRbMHgxMDQzRSwgMHgxMDQxNl0sXG5cdFsweDEwNDNGLCAweDEwNDE3XSxcblx0WzB4MTA0NDAsIDB4MTA0MThdLFxuXHRbMHgxMDQ0MSwgMHgxMDQxOV0sXG5cdFsweDEwNDQyLCAweDEwNDFBXSxcblx0WzB4MTA0NDMsIDB4MTA0MUJdLFxuXHRbMHgxMDQ0NCwgMHgxMDQxQ10sXG5cdFsweDEwNDQ1LCAweDEwNDFEXSxcblx0WzB4MTA0NDYsIDB4MTA0MUVdLFxuXHRbMHgxMDQ0NywgMHgxMDQxRl0sXG5cdFsweDEwNDQ4LCAweDEwNDIwXSxcblx0WzB4MTA0NDksIDB4MTA0MjFdLFxuXHRbMHgxMDQ0QSwgMHgxMDQyMl0sXG5cdFsweDEwNDRCLCAweDEwNDIzXSxcblx0WzB4MTA0NEMsIDB4MTA0MjRdLFxuXHRbMHgxMDQ0RCwgMHgxMDQyNV0sXG5cdFsweDEwNDRFLCAweDEwNDI2XSxcblx0WzB4MTA0NEYsIDB4MTA0MjddLFxuXHRbMHgxMDRCMCwgMHgxMDREOF0sXG5cdFsweDEwNEIxLCAweDEwNEQ5XSxcblx0WzB4MTA0QjIsIDB4MTA0REFdLFxuXHRbMHgxMDRCMywgMHgxMDREQl0sXG5cdFsweDEwNEI0LCAweDEwNERDXSxcblx0WzB4MTA0QjUsIDB4MTA0RERdLFxuXHRbMHgxMDRCNiwgMHgxMDRERV0sXG5cdFsweDEwNEI3LCAweDEwNERGXSxcblx0WzB4MTA0QjgsIDB4MTA0RTBdLFxuXHRbMHgxMDRCOSwgMHgxMDRFMV0sXG5cdFsweDEwNEJBLCAweDEwNEUyXSxcblx0WzB4MTA0QkIsIDB4MTA0RTNdLFxuXHRbMHgxMDRCQywgMHgxMDRFNF0sXG5cdFsweDEwNEJELCAweDEwNEU1XSxcblx0WzB4MTA0QkUsIDB4MTA0RTZdLFxuXHRbMHgxMDRCRiwgMHgxMDRFN10sXG5cdFsweDEwNEMwLCAweDEwNEU4XSxcblx0WzB4MTA0QzEsIDB4MTA0RTldLFxuXHRbMHgxMDRDMiwgMHgxMDRFQV0sXG5cdFsweDEwNEMzLCAweDEwNEVCXSxcblx0WzB4MTA0QzQsIDB4MTA0RUNdLFxuXHRbMHgxMDRDNSwgMHgxMDRFRF0sXG5cdFsweDEwNEM2LCAweDEwNEVFXSxcblx0WzB4MTA0QzcsIDB4MTA0RUZdLFxuXHRbMHgxMDRDOCwgMHgxMDRGMF0sXG5cdFsweDEwNEM5LCAweDEwNEYxXSxcblx0WzB4MTA0Q0EsIDB4MTA0RjJdLFxuXHRbMHgxMDRDQiwgMHgxMDRGM10sXG5cdFsweDEwNENDLCAweDEwNEY0XSxcblx0WzB4MTA0Q0QsIDB4MTA0RjVdLFxuXHRbMHgxMDRDRSwgMHgxMDRGNl0sXG5cdFsweDEwNENGLCAweDEwNEY3XSxcblx0WzB4MTA0RDAsIDB4MTA0RjhdLFxuXHRbMHgxMDREMSwgMHgxMDRGOV0sXG5cdFsweDEwNEQyLCAweDEwNEZBXSxcblx0WzB4MTA0RDMsIDB4MTA0RkJdLFxuXHRbMHgxMDREOCwgMHgxMDRCMF0sXG5cdFsweDEwNEQ5LCAweDEwNEIxXSxcblx0WzB4MTA0REEsIDB4MTA0QjJdLFxuXHRbMHgxMDREQiwgMHgxMDRCM10sXG5cdFsweDEwNERDLCAweDEwNEI0XSxcblx0WzB4MTA0REQsIDB4MTA0QjVdLFxuXHRbMHgxMDRERSwgMHgxMDRCNl0sXG5cdFsweDEwNERGLCAweDEwNEI3XSxcblx0WzB4MTA0RTAsIDB4MTA0QjhdLFxuXHRbMHgxMDRFMSwgMHgxMDRCOV0sXG5cdFsweDEwNEUyLCAweDEwNEJBXSxcblx0WzB4MTA0RTMsIDB4MTA0QkJdLFxuXHRbMHgxMDRFNCwgMHgxMDRCQ10sXG5cdFsweDEwNEU1LCAweDEwNEJEXSxcblx0WzB4MTA0RTYsIDB4MTA0QkVdLFxuXHRbMHgxMDRFNywgMHgxMDRCRl0sXG5cdFsweDEwNEU4LCAweDEwNEMwXSxcblx0WzB4MTA0RTksIDB4MTA0QzFdLFxuXHRbMHgxMDRFQSwgMHgxMDRDMl0sXG5cdFsweDEwNEVCLCAweDEwNEMzXSxcblx0WzB4MTA0RUMsIDB4MTA0QzRdLFxuXHRbMHgxMDRFRCwgMHgxMDRDNV0sXG5cdFsweDEwNEVFLCAweDEwNEM2XSxcblx0WzB4MTA0RUYsIDB4MTA0QzddLFxuXHRbMHgxMDRGMCwgMHgxMDRDOF0sXG5cdFsweDEwNEYxLCAweDEwNEM5XSxcblx0WzB4MTA0RjIsIDB4MTA0Q0FdLFxuXHRbMHgxMDRGMywgMHgxMDRDQl0sXG5cdFsweDEwNEY0LCAweDEwNENDXSxcblx0WzB4MTA0RjUsIDB4MTA0Q0RdLFxuXHRbMHgxMDRGNiwgMHgxMDRDRV0sXG5cdFsweDEwNEY3LCAweDEwNENGXSxcblx0WzB4MTA0RjgsIDB4MTA0RDBdLFxuXHRbMHgxMDRGOSwgMHgxMDREMV0sXG5cdFsweDEwNEZBLCAweDEwNEQyXSxcblx0WzB4MTA0RkIsIDB4MTA0RDNdLFxuXHRbMHgxMEM4MCwgMHgxMENDMF0sXG5cdFsweDEwQzgxLCAweDEwQ0MxXSxcblx0WzB4MTBDODIsIDB4MTBDQzJdLFxuXHRbMHgxMEM4MywgMHgxMENDM10sXG5cdFsweDEwQzg0LCAweDEwQ0M0XSxcblx0WzB4MTBDODUsIDB4MTBDQzVdLFxuXHRbMHgxMEM4NiwgMHgxMENDNl0sXG5cdFsweDEwQzg3LCAweDEwQ0M3XSxcblx0WzB4MTBDODgsIDB4MTBDQzhdLFxuXHRbMHgxMEM4OSwgMHgxMENDOV0sXG5cdFsweDEwQzhBLCAweDEwQ0NBXSxcblx0WzB4MTBDOEIsIDB4MTBDQ0JdLFxuXHRbMHgxMEM4QywgMHgxMENDQ10sXG5cdFsweDEwQzhELCAweDEwQ0NEXSxcblx0WzB4MTBDOEUsIDB4MTBDQ0VdLFxuXHRbMHgxMEM4RiwgMHgxMENDRl0sXG5cdFsweDEwQzkwLCAweDEwQ0QwXSxcblx0WzB4MTBDOTEsIDB4MTBDRDFdLFxuXHRbMHgxMEM5MiwgMHgxMENEMl0sXG5cdFsweDEwQzkzLCAweDEwQ0QzXSxcblx0WzB4MTBDOTQsIDB4MTBDRDRdLFxuXHRbMHgxMEM5NSwgMHgxMENENV0sXG5cdFsweDEwQzk2LCAweDEwQ0Q2XSxcblx0WzB4MTBDOTcsIDB4MTBDRDddLFxuXHRbMHgxMEM5OCwgMHgxMENEOF0sXG5cdFsweDEwQzk5LCAweDEwQ0Q5XSxcblx0WzB4MTBDOUEsIDB4MTBDREFdLFxuXHRbMHgxMEM5QiwgMHgxMENEQl0sXG5cdFsweDEwQzlDLCAweDEwQ0RDXSxcblx0WzB4MTBDOUQsIDB4MTBDRERdLFxuXHRbMHgxMEM5RSwgMHgxMENERV0sXG5cdFsweDEwQzlGLCAweDEwQ0RGXSxcblx0WzB4MTBDQTAsIDB4MTBDRTBdLFxuXHRbMHgxMENBMSwgMHgxMENFMV0sXG5cdFsweDEwQ0EyLCAweDEwQ0UyXSxcblx0WzB4MTBDQTMsIDB4MTBDRTNdLFxuXHRbMHgxMENBNCwgMHgxMENFNF0sXG5cdFsweDEwQ0E1LCAweDEwQ0U1XSxcblx0WzB4MTBDQTYsIDB4MTBDRTZdLFxuXHRbMHgxMENBNywgMHgxMENFN10sXG5cdFsweDEwQ0E4LCAweDEwQ0U4XSxcblx0WzB4MTBDQTksIDB4MTBDRTldLFxuXHRbMHgxMENBQSwgMHgxMENFQV0sXG5cdFsweDEwQ0FCLCAweDEwQ0VCXSxcblx0WzB4MTBDQUMsIDB4MTBDRUNdLFxuXHRbMHgxMENBRCwgMHgxMENFRF0sXG5cdFsweDEwQ0FFLCAweDEwQ0VFXSxcblx0WzB4MTBDQUYsIDB4MTBDRUZdLFxuXHRbMHgxMENCMCwgMHgxMENGMF0sXG5cdFsweDEwQ0IxLCAweDEwQ0YxXSxcblx0WzB4MTBDQjIsIDB4MTBDRjJdLFxuXHRbMHgxMENDMCwgMHgxMEM4MF0sXG5cdFsweDEwQ0MxLCAweDEwQzgxXSxcblx0WzB4MTBDQzIsIDB4MTBDODJdLFxuXHRbMHgxMENDMywgMHgxMEM4M10sXG5cdFsweDEwQ0M0LCAweDEwQzg0XSxcblx0WzB4MTBDQzUsIDB4MTBDODVdLFxuXHRbMHgxMENDNiwgMHgxMEM4Nl0sXG5cdFsweDEwQ0M3LCAweDEwQzg3XSxcblx0WzB4MTBDQzgsIDB4MTBDODhdLFxuXHRbMHgxMENDOSwgMHgxMEM4OV0sXG5cdFsweDEwQ0NBLCAweDEwQzhBXSxcblx0WzB4MTBDQ0IsIDB4MTBDOEJdLFxuXHRbMHgxMENDQywgMHgxMEM4Q10sXG5cdFsweDEwQ0NELCAweDEwQzhEXSxcblx0WzB4MTBDQ0UsIDB4MTBDOEVdLFxuXHRbMHgxMENDRiwgMHgxMEM4Rl0sXG5cdFsweDEwQ0QwLCAweDEwQzkwXSxcblx0WzB4MTBDRDEsIDB4MTBDOTFdLFxuXHRbMHgxMENEMiwgMHgxMEM5Ml0sXG5cdFsweDEwQ0QzLCAweDEwQzkzXSxcblx0WzB4MTBDRDQsIDB4MTBDOTRdLFxuXHRbMHgxMENENSwgMHgxMEM5NV0sXG5cdFsweDEwQ0Q2LCAweDEwQzk2XSxcblx0WzB4MTBDRDcsIDB4MTBDOTddLFxuXHRbMHgxMENEOCwgMHgxMEM5OF0sXG5cdFsweDEwQ0Q5LCAweDEwQzk5XSxcblx0WzB4MTBDREEsIDB4MTBDOUFdLFxuXHRbMHgxMENEQiwgMHgxMEM5Ql0sXG5cdFsweDEwQ0RDLCAweDEwQzlDXSxcblx0WzB4MTBDREQsIDB4MTBDOURdLFxuXHRbMHgxMENERSwgMHgxMEM5RV0sXG5cdFsweDEwQ0RGLCAweDEwQzlGXSxcblx0WzB4MTBDRTAsIDB4MTBDQTBdLFxuXHRbMHgxMENFMSwgMHgxMENBMV0sXG5cdFsweDEwQ0UyLCAweDEwQ0EyXSxcblx0WzB4MTBDRTMsIDB4MTBDQTNdLFxuXHRbMHgxMENFNCwgMHgxMENBNF0sXG5cdFsweDEwQ0U1LCAweDEwQ0E1XSxcblx0WzB4MTBDRTYsIDB4MTBDQTZdLFxuXHRbMHgxMENFNywgMHgxMENBN10sXG5cdFsweDEwQ0U4LCAweDEwQ0E4XSxcblx0WzB4MTBDRTksIDB4MTBDQTldLFxuXHRbMHgxMENFQSwgMHgxMENBQV0sXG5cdFsweDEwQ0VCLCAweDEwQ0FCXSxcblx0WzB4MTBDRUMsIDB4MTBDQUNdLFxuXHRbMHgxMENFRCwgMHgxMENBRF0sXG5cdFsweDEwQ0VFLCAweDEwQ0FFXSxcblx0WzB4MTBDRUYsIDB4MTBDQUZdLFxuXHRbMHgxMENGMCwgMHgxMENCMF0sXG5cdFsweDEwQ0YxLCAweDEwQ0IxXSxcblx0WzB4MTBDRjIsIDB4MTBDQjJdLFxuXHRbMHgxMThBMCwgMHgxMThDMF0sXG5cdFsweDExOEExLCAweDExOEMxXSxcblx0WzB4MTE4QTIsIDB4MTE4QzJdLFxuXHRbMHgxMThBMywgMHgxMThDM10sXG5cdFsweDExOEE0LCAweDExOEM0XSxcblx0WzB4MTE4QTUsIDB4MTE4QzVdLFxuXHRbMHgxMThBNiwgMHgxMThDNl0sXG5cdFsweDExOEE3LCAweDExOEM3XSxcblx0WzB4MTE4QTgsIDB4MTE4QzhdLFxuXHRbMHgxMThBOSwgMHgxMThDOV0sXG5cdFsweDExOEFBLCAweDExOENBXSxcblx0WzB4MTE4QUIsIDB4MTE4Q0JdLFxuXHRbMHgxMThBQywgMHgxMThDQ10sXG5cdFsweDExOEFELCAweDExOENEXSxcblx0WzB4MTE4QUUsIDB4MTE4Q0VdLFxuXHRbMHgxMThBRiwgMHgxMThDRl0sXG5cdFsweDExOEIwLCAweDExOEQwXSxcblx0WzB4MTE4QjEsIDB4MTE4RDFdLFxuXHRbMHgxMThCMiwgMHgxMThEMl0sXG5cdFsweDExOEIzLCAweDExOEQzXSxcblx0WzB4MTE4QjQsIDB4MTE4RDRdLFxuXHRbMHgxMThCNSwgMHgxMThENV0sXG5cdFsweDExOEI2LCAweDExOEQ2XSxcblx0WzB4MTE4QjcsIDB4MTE4RDddLFxuXHRbMHgxMThCOCwgMHgxMThEOF0sXG5cdFsweDExOEI5LCAweDExOEQ5XSxcblx0WzB4MTE4QkEsIDB4MTE4REFdLFxuXHRbMHgxMThCQiwgMHgxMThEQl0sXG5cdFsweDExOEJDLCAweDExOERDXSxcblx0WzB4MTE4QkQsIDB4MTE4RERdLFxuXHRbMHgxMThCRSwgMHgxMThERV0sXG5cdFsweDExOEJGLCAweDExOERGXSxcblx0WzB4MTE4QzAsIDB4MTE4QTBdLFxuXHRbMHgxMThDMSwgMHgxMThBMV0sXG5cdFsweDExOEMyLCAweDExOEEyXSxcblx0WzB4MTE4QzMsIDB4MTE4QTNdLFxuXHRbMHgxMThDNCwgMHgxMThBNF0sXG5cdFsweDExOEM1LCAweDExOEE1XSxcblx0WzB4MTE4QzYsIDB4MTE4QTZdLFxuXHRbMHgxMThDNywgMHgxMThBN10sXG5cdFsweDExOEM4LCAweDExOEE4XSxcblx0WzB4MTE4QzksIDB4MTE4QTldLFxuXHRbMHgxMThDQSwgMHgxMThBQV0sXG5cdFsweDExOENCLCAweDExOEFCXSxcblx0WzB4MTE4Q0MsIDB4MTE4QUNdLFxuXHRbMHgxMThDRCwgMHgxMThBRF0sXG5cdFsweDExOENFLCAweDExOEFFXSxcblx0WzB4MTE4Q0YsIDB4MTE4QUZdLFxuXHRbMHgxMThEMCwgMHgxMThCMF0sXG5cdFsweDExOEQxLCAweDExOEIxXSxcblx0WzB4MTE4RDIsIDB4MTE4QjJdLFxuXHRbMHgxMThEMywgMHgxMThCM10sXG5cdFsweDExOEQ0LCAweDExOEI0XSxcblx0WzB4MTE4RDUsIDB4MTE4QjVdLFxuXHRbMHgxMThENiwgMHgxMThCNl0sXG5cdFsweDExOEQ3LCAweDExOEI3XSxcblx0WzB4MTE4RDgsIDB4MTE4QjhdLFxuXHRbMHgxMThEOSwgMHgxMThCOV0sXG5cdFsweDExOERBLCAweDExOEJBXSxcblx0WzB4MTE4REIsIDB4MTE4QkJdLFxuXHRbMHgxMThEQywgMHgxMThCQ10sXG5cdFsweDExOERELCAweDExOEJEXSxcblx0WzB4MTE4REUsIDB4MTE4QkVdLFxuXHRbMHgxMThERiwgMHgxMThCRl0sXG5cdFsweDE2RTQwLCAweDE2RTYwXSxcblx0WzB4MTZFNDEsIDB4MTZFNjFdLFxuXHRbMHgxNkU0MiwgMHgxNkU2Ml0sXG5cdFsweDE2RTQzLCAweDE2RTYzXSxcblx0WzB4MTZFNDQsIDB4MTZFNjRdLFxuXHRbMHgxNkU0NSwgMHgxNkU2NV0sXG5cdFsweDE2RTQ2LCAweDE2RTY2XSxcblx0WzB4MTZFNDcsIDB4MTZFNjddLFxuXHRbMHgxNkU0OCwgMHgxNkU2OF0sXG5cdFsweDE2RTQ5LCAweDE2RTY5XSxcblx0WzB4MTZFNEEsIDB4MTZFNkFdLFxuXHRbMHgxNkU0QiwgMHgxNkU2Ql0sXG5cdFsweDE2RTRDLCAweDE2RTZDXSxcblx0WzB4MTZFNEQsIDB4MTZFNkRdLFxuXHRbMHgxNkU0RSwgMHgxNkU2RV0sXG5cdFsweDE2RTRGLCAweDE2RTZGXSxcblx0WzB4MTZFNTAsIDB4MTZFNzBdLFxuXHRbMHgxNkU1MSwgMHgxNkU3MV0sXG5cdFsweDE2RTUyLCAweDE2RTcyXSxcblx0WzB4MTZFNTMsIDB4MTZFNzNdLFxuXHRbMHgxNkU1NCwgMHgxNkU3NF0sXG5cdFsweDE2RTU1LCAweDE2RTc1XSxcblx0WzB4MTZFNTYsIDB4MTZFNzZdLFxuXHRbMHgxNkU1NywgMHgxNkU3N10sXG5cdFsweDE2RTU4LCAweDE2RTc4XSxcblx0WzB4MTZFNTksIDB4MTZFNzldLFxuXHRbMHgxNkU1QSwgMHgxNkU3QV0sXG5cdFsweDE2RTVCLCAweDE2RTdCXSxcblx0WzB4MTZFNUMsIDB4MTZFN0NdLFxuXHRbMHgxNkU1RCwgMHgxNkU3RF0sXG5cdFsweDE2RTVFLCAweDE2RTdFXSxcblx0WzB4MTZFNUYsIDB4MTZFN0ZdLFxuXHRbMHgxNkU2MCwgMHgxNkU0MF0sXG5cdFsweDE2RTYxLCAweDE2RTQxXSxcblx0WzB4MTZFNjIsIDB4MTZFNDJdLFxuXHRbMHgxNkU2MywgMHgxNkU0M10sXG5cdFsweDE2RTY0LCAweDE2RTQ0XSxcblx0WzB4MTZFNjUsIDB4MTZFNDVdLFxuXHRbMHgxNkU2NiwgMHgxNkU0Nl0sXG5cdFsweDE2RTY3LCAweDE2RTQ3XSxcblx0WzB4MTZFNjgsIDB4MTZFNDhdLFxuXHRbMHgxNkU2OSwgMHgxNkU0OV0sXG5cdFsweDE2RTZBLCAweDE2RTRBXSxcblx0WzB4MTZFNkIsIDB4MTZFNEJdLFxuXHRbMHgxNkU2QywgMHgxNkU0Q10sXG5cdFsweDE2RTZELCAweDE2RTREXSxcblx0WzB4MTZFNkUsIDB4MTZFNEVdLFxuXHRbMHgxNkU2RiwgMHgxNkU0Rl0sXG5cdFsweDE2RTcwLCAweDE2RTUwXSxcblx0WzB4MTZFNzEsIDB4MTZFNTFdLFxuXHRbMHgxNkU3MiwgMHgxNkU1Ml0sXG5cdFsweDE2RTczLCAweDE2RTUzXSxcblx0WzB4MTZFNzQsIDB4MTZFNTRdLFxuXHRbMHgxNkU3NSwgMHgxNkU1NV0sXG5cdFsweDE2RTc2LCAweDE2RTU2XSxcblx0WzB4MTZFNzcsIDB4MTZFNTddLFxuXHRbMHgxNkU3OCwgMHgxNkU1OF0sXG5cdFsweDE2RTc5LCAweDE2RTU5XSxcblx0WzB4MTZFN0EsIDB4MTZFNUFdLFxuXHRbMHgxNkU3QiwgMHgxNkU1Ql0sXG5cdFsweDE2RTdDLCAweDE2RTVDXSxcblx0WzB4MTZFN0QsIDB4MTZFNURdLFxuXHRbMHgxNkU3RSwgMHgxNkU1RV0sXG5cdFsweDE2RTdGLCAweDE2RTVGXSxcblx0WzB4MUU5MDAsIDB4MUU5MjJdLFxuXHRbMHgxRTkwMSwgMHgxRTkyM10sXG5cdFsweDFFOTAyLCAweDFFOTI0XSxcblx0WzB4MUU5MDMsIDB4MUU5MjVdLFxuXHRbMHgxRTkwNCwgMHgxRTkyNl0sXG5cdFsweDFFOTA1LCAweDFFOTI3XSxcblx0WzB4MUU5MDYsIDB4MUU5MjhdLFxuXHRbMHgxRTkwNywgMHgxRTkyOV0sXG5cdFsweDFFOTA4LCAweDFFOTJBXSxcblx0WzB4MUU5MDksIDB4MUU5MkJdLFxuXHRbMHgxRTkwQSwgMHgxRTkyQ10sXG5cdFsweDFFOTBCLCAweDFFOTJEXSxcblx0WzB4MUU5MEMsIDB4MUU5MkVdLFxuXHRbMHgxRTkwRCwgMHgxRTkyRl0sXG5cdFsweDFFOTBFLCAweDFFOTMwXSxcblx0WzB4MUU5MEYsIDB4MUU5MzFdLFxuXHRbMHgxRTkxMCwgMHgxRTkzMl0sXG5cdFsweDFFOTExLCAweDFFOTMzXSxcblx0WzB4MUU5MTIsIDB4MUU5MzRdLFxuXHRbMHgxRTkxMywgMHgxRTkzNV0sXG5cdFsweDFFOTE0LCAweDFFOTM2XSxcblx0WzB4MUU5MTUsIDB4MUU5MzddLFxuXHRbMHgxRTkxNiwgMHgxRTkzOF0sXG5cdFsweDFFOTE3LCAweDFFOTM5XSxcblx0WzB4MUU5MTgsIDB4MUU5M0FdLFxuXHRbMHgxRTkxOSwgMHgxRTkzQl0sXG5cdFsweDFFOTFBLCAweDFFOTNDXSxcblx0WzB4MUU5MUIsIDB4MUU5M0RdLFxuXHRbMHgxRTkxQywgMHgxRTkzRV0sXG5cdFsweDFFOTFELCAweDFFOTNGXSxcblx0WzB4MUU5MUUsIDB4MUU5NDBdLFxuXHRbMHgxRTkxRiwgMHgxRTk0MV0sXG5cdFsweDFFOTIwLCAweDFFOTQyXSxcblx0WzB4MUU5MjEsIDB4MUU5NDNdLFxuXHRbMHgxRTkyMiwgMHgxRTkwMF0sXG5cdFsweDFFOTIzLCAweDFFOTAxXSxcblx0WzB4MUU5MjQsIDB4MUU5MDJdLFxuXHRbMHgxRTkyNSwgMHgxRTkwM10sXG5cdFsweDFFOTI2LCAweDFFOTA0XSxcblx0WzB4MUU5MjcsIDB4MUU5MDVdLFxuXHRbMHgxRTkyOCwgMHgxRTkwNl0sXG5cdFsweDFFOTI5LCAweDFFOTA3XSxcblx0WzB4MUU5MkEsIDB4MUU5MDhdLFxuXHRbMHgxRTkyQiwgMHgxRTkwOV0sXG5cdFsweDFFOTJDLCAweDFFOTBBXSxcblx0WzB4MUU5MkQsIDB4MUU5MEJdLFxuXHRbMHgxRTkyRSwgMHgxRTkwQ10sXG5cdFsweDFFOTJGLCAweDFFOTBEXSxcblx0WzB4MUU5MzAsIDB4MUU5MEVdLFxuXHRbMHgxRTkzMSwgMHgxRTkwRl0sXG5cdFsweDFFOTMyLCAweDFFOTEwXSxcblx0WzB4MUU5MzMsIDB4MUU5MTFdLFxuXHRbMHgxRTkzNCwgMHgxRTkxMl0sXG5cdFsweDFFOTM1LCAweDFFOTEzXSxcblx0WzB4MUU5MzYsIDB4MUU5MTRdLFxuXHRbMHgxRTkzNywgMHgxRTkxNV0sXG5cdFsweDFFOTM4LCAweDFFOTE2XSxcblx0WzB4MUU5MzksIDB4MUU5MTddLFxuXHRbMHgxRTkzQSwgMHgxRTkxOF0sXG5cdFsweDFFOTNCLCAweDFFOTE5XSxcblx0WzB4MUU5M0MsIDB4MUU5MUFdLFxuXHRbMHgxRTkzRCwgMHgxRTkxQl0sXG5cdFsweDFFOTNFLCAweDFFOTFDXSxcblx0WzB4MUU5M0YsIDB4MUU5MURdLFxuXHRbMHgxRTk0MCwgMHgxRTkxRV0sXG5cdFsweDFFOTQxLCAweDFFOTFGXSxcblx0WzB4MUU5NDIsIDB4MUU5MjBdLFxuXHRbMHgxRTk0MywgMHgxRTkyMV1cbl0pO1xuIiwiLy8gR2VuZXJhdGVkIHVzaW5nIGBucG0gcnVuIGJ1aWxkYC4gRG8gbm90IGVkaXQuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHJlZ2VuZXJhdGUgPSByZXF1aXJlKCdyZWdlbmVyYXRlJyk7XG5cbmV4cG9ydHMuUkVHVUxBUiA9IG5ldyBNYXAoW1xuXHRbJ2QnLCByZWdlbmVyYXRlKClcblx0XHQuYWRkUmFuZ2UoMHgzMCwgMHgzOSldLFxuXHRbJ0QnLCByZWdlbmVyYXRlKClcblx0XHQuYWRkUmFuZ2UoMHgwLCAweDJGKVxuXHRcdC5hZGRSYW5nZSgweDNBLCAweEZGRkYpXSxcblx0WydzJywgcmVnZW5lcmF0ZSgweDIwLCAweEEwLCAweDE2ODAsIDB4MjAyRiwgMHgyMDVGLCAweDMwMDAsIDB4RkVGRilcblx0XHQuYWRkUmFuZ2UoMHg5LCAweEQpXG5cdFx0LmFkZFJhbmdlKDB4MjAwMCwgMHgyMDBBKVxuXHRcdC5hZGRSYW5nZSgweDIwMjgsIDB4MjAyOSldLFxuXHRbJ1MnLCByZWdlbmVyYXRlKClcblx0XHQuYWRkUmFuZ2UoMHgwLCAweDgpXG5cdFx0LmFkZFJhbmdlKDB4RSwgMHgxRilcblx0XHQuYWRkUmFuZ2UoMHgyMSwgMHg5Rilcblx0XHQuYWRkUmFuZ2UoMHhBMSwgMHgxNjdGKVxuXHRcdC5hZGRSYW5nZSgweDE2ODEsIDB4MUZGRilcblx0XHQuYWRkUmFuZ2UoMHgyMDBCLCAweDIwMjcpXG5cdFx0LmFkZFJhbmdlKDB4MjAyQSwgMHgyMDJFKVxuXHRcdC5hZGRSYW5nZSgweDIwMzAsIDB4MjA1RSlcblx0XHQuYWRkUmFuZ2UoMHgyMDYwLCAweDJGRkYpXG5cdFx0LmFkZFJhbmdlKDB4MzAwMSwgMHhGRUZFKVxuXHRcdC5hZGRSYW5nZSgweEZGMDAsIDB4RkZGRildLFxuXHRbJ3cnLCByZWdlbmVyYXRlKDB4NUYpXG5cdFx0LmFkZFJhbmdlKDB4MzAsIDB4MzkpXG5cdFx0LmFkZFJhbmdlKDB4NDEsIDB4NUEpXG5cdFx0LmFkZFJhbmdlKDB4NjEsIDB4N0EpXSxcblx0WydXJywgcmVnZW5lcmF0ZSgweDYwKVxuXHRcdC5hZGRSYW5nZSgweDAsIDB4MkYpXG5cdFx0LmFkZFJhbmdlKDB4M0EsIDB4NDApXG5cdFx0LmFkZFJhbmdlKDB4NUIsIDB4NUUpXG5cdFx0LmFkZFJhbmdlKDB4N0IsIDB4RkZGRildXG5dKTtcblxuZXhwb3J0cy5VTklDT0RFID0gbmV3IE1hcChbXG5cdFsnZCcsIHJlZ2VuZXJhdGUoKVxuXHRcdC5hZGRSYW5nZSgweDMwLCAweDM5KV0sXG5cdFsnRCcsIHJlZ2VuZXJhdGUoKVxuXHRcdC5hZGRSYW5nZSgweDAsIDB4MkYpXG5cdFx0LmFkZFJhbmdlKDB4M0EsIDB4MTBGRkZGKV0sXG5cdFsncycsIHJlZ2VuZXJhdGUoMHgyMCwgMHhBMCwgMHgxNjgwLCAweDIwMkYsIDB4MjA1RiwgMHgzMDAwLCAweEZFRkYpXG5cdFx0LmFkZFJhbmdlKDB4OSwgMHhEKVxuXHRcdC5hZGRSYW5nZSgweDIwMDAsIDB4MjAwQSlcblx0XHQuYWRkUmFuZ2UoMHgyMDI4LCAweDIwMjkpXSxcblx0WydTJywgcmVnZW5lcmF0ZSgpXG5cdFx0LmFkZFJhbmdlKDB4MCwgMHg4KVxuXHRcdC5hZGRSYW5nZSgweEUsIDB4MUYpXG5cdFx0LmFkZFJhbmdlKDB4MjEsIDB4OUYpXG5cdFx0LmFkZFJhbmdlKDB4QTEsIDB4MTY3Rilcblx0XHQuYWRkUmFuZ2UoMHgxNjgxLCAweDFGRkYpXG5cdFx0LmFkZFJhbmdlKDB4MjAwQiwgMHgyMDI3KVxuXHRcdC5hZGRSYW5nZSgweDIwMkEsIDB4MjAyRSlcblx0XHQuYWRkUmFuZ2UoMHgyMDMwLCAweDIwNUUpXG5cdFx0LmFkZFJhbmdlKDB4MjA2MCwgMHgyRkZGKVxuXHRcdC5hZGRSYW5nZSgweDMwMDEsIDB4RkVGRSlcblx0XHQuYWRkUmFuZ2UoMHhGRjAwLCAweDEwRkZGRildLFxuXHRbJ3cnLCByZWdlbmVyYXRlKDB4NUYpXG5cdFx0LmFkZFJhbmdlKDB4MzAsIDB4MzkpXG5cdFx0LmFkZFJhbmdlKDB4NDEsIDB4NUEpXG5cdFx0LmFkZFJhbmdlKDB4NjEsIDB4N0EpXSxcblx0WydXJywgcmVnZW5lcmF0ZSgweDYwKVxuXHRcdC5hZGRSYW5nZSgweDAsIDB4MkYpXG5cdFx0LmFkZFJhbmdlKDB4M0EsIDB4NDApXG5cdFx0LmFkZFJhbmdlKDB4NUIsIDB4NUUpXG5cdFx0LmFkZFJhbmdlKDB4N0IsIDB4MTBGRkZGKV1cbl0pO1xuXG5leHBvcnRzLlVOSUNPREVfSUdOT1JFX0NBU0UgPSBuZXcgTWFwKFtcblx0WydkJywgcmVnZW5lcmF0ZSgpXG5cdFx0LmFkZFJhbmdlKDB4MzAsIDB4MzkpXSxcblx0WydEJywgcmVnZW5lcmF0ZSgpXG5cdFx0LmFkZFJhbmdlKDB4MCwgMHgyRilcblx0XHQuYWRkUmFuZ2UoMHgzQSwgMHgxMEZGRkYpXSxcblx0WydzJywgcmVnZW5lcmF0ZSgweDIwLCAweEEwLCAweDE2ODAsIDB4MjAyRiwgMHgyMDVGLCAweDMwMDAsIDB4RkVGRilcblx0XHQuYWRkUmFuZ2UoMHg5LCAweEQpXG5cdFx0LmFkZFJhbmdlKDB4MjAwMCwgMHgyMDBBKVxuXHRcdC5hZGRSYW5nZSgweDIwMjgsIDB4MjAyOSldLFxuXHRbJ1MnLCByZWdlbmVyYXRlKClcblx0XHQuYWRkUmFuZ2UoMHgwLCAweDgpXG5cdFx0LmFkZFJhbmdlKDB4RSwgMHgxRilcblx0XHQuYWRkUmFuZ2UoMHgyMSwgMHg5Rilcblx0XHQuYWRkUmFuZ2UoMHhBMSwgMHgxNjdGKVxuXHRcdC5hZGRSYW5nZSgweDE2ODEsIDB4MUZGRilcblx0XHQuYWRkUmFuZ2UoMHgyMDBCLCAweDIwMjcpXG5cdFx0LmFkZFJhbmdlKDB4MjAyQSwgMHgyMDJFKVxuXHRcdC5hZGRSYW5nZSgweDIwMzAsIDB4MjA1RSlcblx0XHQuYWRkUmFuZ2UoMHgyMDYwLCAweDJGRkYpXG5cdFx0LmFkZFJhbmdlKDB4MzAwMSwgMHhGRUZFKVxuXHRcdC5hZGRSYW5nZSgweEZGMDAsIDB4MTBGRkZGKV0sXG5cdFsndycsIHJlZ2VuZXJhdGUoMHg1RiwgMHgxN0YsIDB4MjEyQSlcblx0XHQuYWRkUmFuZ2UoMHgzMCwgMHgzOSlcblx0XHQuYWRkUmFuZ2UoMHg0MSwgMHg1QSlcblx0XHQuYWRkUmFuZ2UoMHg2MSwgMHg3QSldLFxuXHRbJ1cnLCByZWdlbmVyYXRlKDB4NjApXG5cdFx0LmFkZFJhbmdlKDB4MCwgMHgyRilcblx0XHQuYWRkUmFuZ2UoMHgzQSwgMHg0MClcblx0XHQuYWRkUmFuZ2UoMHg1QiwgMHg1RSlcblx0XHQuYWRkUmFuZ2UoMHg3QiwgMHgxN0UpXG5cdFx0LmFkZFJhbmdlKDB4MTgwLCAweDIxMjkpXG5cdFx0LmFkZFJhbmdlKDB4MjEyQiwgMHgxMEZGRkYpXVxuXSk7XG4iXSwic291cmNlUm9vdCI6IiJ9